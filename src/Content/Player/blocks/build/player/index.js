/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../node_modules/@lit/react/development/create-component.js":
/*!******************************************************************!*\
  !*** ../node_modules/@lit/react/development/create-component.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createComponent: () => (/* binding */ createComponent)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const NODE_MODE = false;
const DEV_MODE = true;
const reservedReactProperties = new Set([
    'children',
    'localName',
    'ref',
    'style',
    'className',
]);
const listenedEvents = new WeakMap();
/**
 * Adds an event listener for the specified event to the given node. In the
 * React setup, there should only ever be one event listener. Thus, for
 * efficiency only one listener is added and the handler for that listener is
 * updated to point to the given listener function.
 */
const addOrUpdateEventListener = (node, event, listener) => {
    let events = listenedEvents.get(node);
    if (events === undefined) {
        listenedEvents.set(node, (events = new Map()));
    }
    let handler = events.get(event);
    if (listener !== undefined) {
        // If necessary, add listener and track handler
        if (handler === undefined) {
            events.set(event, (handler = { handleEvent: listener }));
            node.addEventListener(event, handler);
            // Otherwise just update the listener with new value
        }
        else {
            handler.handleEvent = listener;
        }
        // Remove listener if one exists and value is undefined
    }
    else if (handler !== undefined) {
        events.delete(event);
        node.removeEventListener(event, handler);
    }
};
/**
 * Sets properties and events on custom elements. These properties and events
 * have been pre-filtered so we know they should apply to the custom element.
 */
const setProperty = (node, name, value, old, events) => {
    const event = events?.[name];
    // Dirty check event value.
    if (event !== undefined) {
        if (value !== old) {
            addOrUpdateEventListener(node, event, value);
        }
        return;
    }
    // But don't dirty check properties; elements are assumed to do this.
    node[name] = value;
    // This block is to replicate React's behavior for attributes of native
    // elements where `undefined` or `null` values result in attributes being
    // removed.
    // https://github.com/facebook/react/blob/899cb95f52cc83ab5ca1eb1e268c909d3f0961e7/packages/react-dom-bindings/src/client/DOMPropertyOperations.js#L107-L141
    //
    // It's only needed here for native HTMLElement properties that reflect
    // attributes of the same name but don't have that behavior like "id" or
    // "draggable".
    if ((value === undefined || value === null) &&
        name in HTMLElement.prototype) {
        node.removeAttribute(name);
    }
};
/**
 * Creates a React component for a custom element. Properties are distinguished
 * from attributes automatically, and events can be configured so they are added
 * to the custom element as event listeners.
 *
 * @param options An options bag containing the parameters needed to generate a
 * wrapped web component.
 *
 * @param options.react The React module, typically imported from the `react`
 * npm package.
 * @param options.tagName The custom element tag name registered via
 * `customElements.define`.
 * @param options.elementClass The custom element class registered via
 * `customElements.define`.
 * @param options.events An object listing events to which the component can
 * listen. The object keys are the event property names passed in via React
 * props and the object values are the names of the corresponding events
 * generated by the custom element. For example, given `{onactivate:
 * 'activate'}` an event function may be passed via the component's `onactivate`
 * prop and will be called when the custom element fires its `activate` event.
 * @param options.displayName A React component display name, used in debugging
 * messages. Default value is inferred from the name of custom element class
 * registered via `customElements.define`.
 */
const createComponent = ({ react: React, tagName, elementClass, events, displayName, }) => {
    const eventProps = new Set(Object.keys(events ?? {}));
    if (DEV_MODE && !NODE_MODE) {
        for (const p of reservedReactProperties) {
            if (p in elementClass.prototype && !(p in HTMLElement.prototype)) {
                // Note, this effectively warns only for `ref` since the other
                // reserved props are on HTMLElement.prototype. To address this
                // would require crawling down the prototype, which doesn't feel worth
                // it since implementing these properties on an element is extremely
                // rare.
                console.warn(`${tagName} contains property ${p} which is a React reserved ` +
                    `property. It will be used by React and not set on the element.`);
            }
        }
    }
    const ReactComponent = React.forwardRef((props, ref) => {
        const prevElemPropsRef = React.useRef(new Map());
        const elementRef = React.useRef(null);
        // Props to be passed to React.createElement
        const reactProps = {};
        // Props to be set on element with setProperty
        const elementProps = {};
        for (const [k, v] of Object.entries(props)) {
            if (reservedReactProperties.has(k)) {
                // React does *not* handle `className` for custom elements so
                // coerce it to `class` so it's handled correctly.
                reactProps[k === 'className' ? 'class' : k] = v;
                continue;
            }
            if (eventProps.has(k) || k in elementClass.prototype) {
                elementProps[k] = v;
                continue;
            }
            reactProps[k] = v;
        }
        // useLayoutEffect produces warnings during server rendering.
        if (!NODE_MODE) {
            // This one has no dependency array so it'll run on every re-render.
            React.useLayoutEffect(() => {
                if (elementRef.current === null) {
                    return;
                }
                const newElemProps = new Map();
                for (const key in elementProps) {
                    setProperty(elementRef.current, key, props[key], prevElemPropsRef.current.get(key), events);
                    prevElemPropsRef.current.delete(key);
                    newElemProps.set(key, props[key]);
                }
                // "Unset" any props from previous render that no longer exist.
                // Setting to `undefined` seems like the correct thing to "unset"
                // but currently React will set it as `null`.
                // See https://github.com/facebook/react/issues/28203
                for (const [key, value] of prevElemPropsRef.current) {
                    setProperty(elementRef.current, key, undefined, value, events);
                }
                prevElemPropsRef.current = newElemProps;
            });
            // Empty dependency array so this will only run once after first render.
            React.useLayoutEffect(() => {
                elementRef.current?.removeAttribute('defer-hydration');
            }, []);
        }
        if (NODE_MODE) {
            // If component is to be server rendered with `@lit/ssr-react`, pass
            // element properties in a special bag to be set by the server-side
            // element renderer.
            if ((React.createElement.name === 'litPatchedCreateElement' ||
                globalThis.litSsrReactEnabled) &&
                Object.keys(elementProps).length) {
                // This property needs to remain unminified.
                reactProps['_$litProps$'] = elementProps;
            }
        }
        else {
            // Suppress hydration warning for server-rendered attributes.
            // This property needs to remain unminified.
            reactProps['suppressHydrationWarning'] = true;
        }
        return React.createElement(tagName, {
            ...reactProps,
            ref: React.useCallback((node) => {
                elementRef.current = node;
                if (typeof ref === 'function') {
                    ref(node);
                }
                else if (ref !== null) {
                    ref.current = node;
                }
            }, [ref]),
        });
    });
    ReactComponent.displayName = displayName ?? elementClass.name;
    return ReactComponent;
};
//# sourceMappingURL=create-component.js.map

/***/ }),

/***/ "../node_modules/@lit/react/development/index.js":
/*!*******************************************************!*\
  !*** ../node_modules/@lit/react/development/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createComponent: () => (/* reexport safe */ _create_component_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)
/* harmony export */ });
/* harmony import */ var _create_component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./create-component.js */ "../node_modules/@lit/react/development/create-component.js");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../node_modules/@stencil/react-output-target/dist/react.js":
/*!******************************************************************!*\
  !*** ../node_modules/@stencil/react-output-target/dist/react.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createComponent: () => (/* binding */ i),
/* harmony export */   createSSRComponent: () => (/* binding */ p)
/* harmony export */ });
/* harmony import */ var _lit_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lit/react */ "../node_modules/@lit/react/development/index.js");

const i = ({
  defineCustomElement: e,
  ...r
}) => (typeof e < "u" && e(), (0,_lit_react__WEBPACK_IMPORTED_MODULE_0__.createComponent)(r)), p = ({
  hydrateModule: e,
  properties: r,
  tagName: n
}) => async (t) => {
  const { createComponentForServerSideRendering: o } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_stencil_react-output-target_dist_ssr_js").then(__webpack_require__.bind(__webpack_require__, /*! ./ssr.js */ "../node_modules/@stencil/react-output-target/dist/ssr.js"));
  return o({
    tagName: n,
    properties: r,
    renderToString: (await e).renderToString
  })(t);
};



/***/ }),

/***/ "../web-components/dist/components lazy recursive ^\\.\\/.*\\.entry\\.js.*$":
/*!**************************************************************************************!*\
  !*** ../web-components/dist/components/ lazy ^\.\/.*\.entry\.js.*$ namespace object ***!
  \**************************************************************************************/
/***/ ((module) => {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(() => {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = () => ([]);
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "../web-components/dist/components lazy recursive ^\\.\\/.*\\.entry\\.js.*$";
module.exports = webpackEmptyAsyncContext;

/***/ }),

/***/ "../web-components/dist/components/dtpc-button.js":
/*!********************************************************!*\
  !*** ../web-components/dist/components/dtpc-button.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DtpcButton: () => (/* binding */ DtpcButton),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _dtpc_button2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dtpc-button2.js */ "../web-components/dist/components/dtpc-button2.js");

const DtpcButton = _dtpc_button2_js__WEBPACK_IMPORTED_MODULE_0__.D;
const defineCustomElement = _dtpc_button2_js__WEBPACK_IMPORTED_MODULE_0__.d;


/***/ }),

/***/ "../web-components/dist/components/dtpc-button2.js":
/*!*********************************************************!*\
  !*** ../web-components/dist/components/dtpc-button2.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DtpcButton),
/* harmony export */   d: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "../web-components/dist/components/index2.js");
/* harmony import */ var _index3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index3.js */ "../web-components/dist/components/index3.js");
/* harmony import */ var _index4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index4.js */ "../web-components/dist/components/index4.js");



const dtpcButtonCss = ":host{--_dtpc-button--size:var(--dtpc-button--size, 1.5rem);--_dtpc-button--padding:var(--dtpc-button--padding, 0.325rem);--_dtpc-button--foreground:var(--dtpc-button--foreground, var(--_dtpc-player--foreground));--_dtpc-button--foreground--hover:var(--dtpc-button--foreground--hover, var(--_dtpc-player--foreground));--_dtpc-button--foreground--active:var(--dtpc-button--foreground--active, var(--_dtpc-player--foreground));--_dtpc-button--surface:var(--_dtpc-button--surface, var(--_dtpc-player--foreground));--_dtpc-button--surface--hover:var(--dtpc-button--surface--hover, var(--_dtpc-player--foreground));--_dtpc-button--surface--active:var(--dtpc-button--surface--active, var(--_dtpc-player--foreground));--_dtpc-button--surface-opacity:var(--dtpc-button--surface-opacity, 0);--_dtpc-button--surface-opacity--hover:var(--dtpc-button--surface-opacity--hover, 20%);--_dtpc-button--surface-opacity--active:var(--dtpc-button--surface-opacity--active, 10%);--_dtpc-button--border-color:var(--dtpc-button--border-color, transparent);--_dtpc-button--border-color--hover:var(--dtpc-button--border-color--hover, transparent);--_dtpc-button--border-color--active:var(--dtpc-button--border-color--active, transparent);--_dtpc-button--border-radius:var(--dtpc-button--border-radius, 100vw);--_dtpc-button--border-radius--hover:var(--dtpc-button--border-radius--hover, 100vw);--_dtpc-button--border-radius--active:var(--dtpc-button--border-radius--active, 100vw);--_dtpc-button--border-width:var(--dtpc-button--border-width, 0);--_dtpc-button--border-width--hover:var(--dtpc-button--border-width--hover, 0);--_dtpc-button--border-width--active:var(--dtpc-button--border-width--active, 0);--_dtpc-button--focus-ring-color:var(--dtpc-button--focus-ring-color, var(--_dtpc-player--highlight));--_dtpc-button--focus-ring-offset:var(--dtpc-button--focus-ring-offset, 0.125rem);--_dtpc-button--focus-ring-width:var(--dtpc-button--focus-ring-width, 2px)}:host{transition-property:background-color, border-color, border-width, border-radius, color;transition-duration:200ms;transition-timing-function:ease;box-sizing:content-box;display:inline-grid;place-items:stretch;justify-content:stretch;aspect-ratio:1;width:var(--_dtpc-button--size);padding:var(--_dtpc-button--padding);border-style:solid;border-color:var(--_dtpc-button--border-color);border-width:var(--_dtpc-button--border-width);border-radius:var(--_dtpc-button--border-radius);background-color:color-mix(in oklch, var(--_dtpc-button--surface) var(--_dtpc-button--surface-opacity), transparent);color:var(--_dtpc-button--foreground);cursor:pointer;user-select:none}:host(:hover){--_dtpc-button--foreground:var(--_dtpc-button--foreground--hover);--_dtpc-button--surface:var(--_dtpc-button--surface--hover);--_dtpc-button--surface-opacity:var(--_dtpc-button--surface-opacity--hover);--_dtpc-button--border-color:var(--_dtpc-button--border-color--hover);--_dtpc-button--border-width:var(--_dtpc-button--border-width--hover);--_dtpc-button--border-radius:var(--_dtpc-button--border-radius--hover)}:host(:active){--_dtpc-button--foreground:var(--_dtpc-button--foreground--active);--_dtpc-button--surface:var(--_dtpc-button--surface--active);--_dtpc-button--surface-opacity:var(--_dtpc-button--surface-opacity--active);--_dtpc-button--border-color:var(--_dtpc-button--border-color--active);--_dtpc-button--border-width:var(--_dtpc-button--border-width--active);--_dtpc-button--border-radius:var(--_dtpc-button--border-radius--active)}:host(:focus-visible){outline-style:solid;outline-offset:var(--_dtpc-button--focus-ring-offset);outline-color:var(--_dtpc-button--focus-ring-color);outline-width:var(--_dtpc-button--focus-ring-width)}";
const DtpcButton = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.p)(class DtpcButton extends _index2_js__WEBPACK_IMPORTED_MODULE_0__.H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
  }
  get el() {
    return this;
  }
  handleKeyDown(ev) {
    console.log(ev);
    if (ev.code === 'Space') {
      ev.preventDefault();
      this.el.click();
    }
  }
  render() {
    const buttonAttributes = (0,_index4_js__WEBPACK_IMPORTED_MODULE_2__.a)(this.el);
    return (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index2_js__WEBPACK_IMPORTED_MODULE_0__.d, {
      key: 'c0214de80f82d9065a2b31b9f04db5cca14b797b',
      role: "button",
      tabindex: "0",
      ...buttonAttributes
    }, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", {
      key: 'e3df54b537f25ff99ae7199211ea5417567fe2b1'
    }));
  }
  static get style() {
    return dtpcButtonCss;
  }
}, [1, "dtpc-button", undefined, [[0, "keydown", "handleKeyDown"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dtpc-button"];
  components.forEach(tagName => {
    switch (tagName) {
      case "dtpc-button":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, DtpcButton);
        }
        break;
    }
  });
}
defineCustomElement(DtpcButton);


/***/ }),

/***/ "../web-components/dist/components/dtpc-mute-button.js":
/*!*************************************************************!*\
  !*** ../web-components/dist/components/dtpc-mute-button.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DtpcMuteButton: () => (/* binding */ DtpcMuteButton),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "../web-components/dist/components/index2.js");
/* harmony import */ var _index5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index5.js */ "../web-components/dist/components/index5.js");
/* harmony import */ var _dtpc_button2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dtpc-button2.js */ "../web-components/dist/components/dtpc-button2.js");
/* harmony import */ var _icon_volume2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./icon-volume2.js */ "../web-components/dist/components/icon-volume2.js");




const dtpcMuteButtonCss = ":host{--dtpc-button--size:var(--dtpc-mute-button--size);--dtpc-button--padding:var(--dtpc-mute-button--padding);--dtpc-button--foreground:var(--dtpc-mute-button--foreground);--dtpc-button--foreground--hover:var(--dtpc-mute-button--foreground--hover);--dtpc-button--foreground--active:var(--dtpc-mute-button--foreground--playing);--dtpc-button--surface:var(--dtpc-mute-button--surface);--dtpc-button--surface--hover:var(--dtpc-mute-button--surface--hover);--dtpc-button--surface--active:var(--dtpc-mute-button--surface--playing);--dtpc-button--surface-opacity:var(--dtpc-mute-button--surface-opacity);--dtpc-button--surface-opacity--hover:var(--dtpc-mute-button--surface-opacity--hover);--dtpc-button--surface-opacity--active:var(--dtpc-mute-button--surface-opacity--playing);--dtpc-button--border-color:var(--dtpc-mute-button--border-color);--dtpc-button--border-color--hover:var(--dtpc-mute-button--border-color--hover);--dtpc-button--border-color--active:var(--dtpc-mute-button--border-color--playing);--dtpc-button--border-radius:var(--dtpc-mute-button--border-radius);--dtpc-button--border-radius--hover:var(--dtpc-mute-button--border-radius--hover);--dtpc-button--border-radius--active:var(--dtpc-mute-button--border-radius--playing);--dtpc-button--border-width:var(--dtpc-mute-button--border-width);--dtpc-button--border-width--hover:var(--dtpc-mute-button--border-width--hover);--dtpc-button--border-width--active:var(--dtpc-mute-button--border-width--playing);--dtpc-button--focus-ring-color:var(--dtpc-mute-button--focus-ring-color);--dtpc-button--focus-ring-offset:var(--dtpc-mute-button--focus-ring-offset);--dtpc-button--focus-ring-width:var(--dtpc-mute-button--focus-ring-width)}";
const DtpcMuteButton$1 = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.p)(class DtpcMuteButton extends _index2_js__WEBPACK_IMPORTED_MODULE_0__.H {
  constructor() {
    super();
    Object.defineProperty(this, "state", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "initControl", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.__registerHost();
    this.__attachShadow();
    this.initControl = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "dtpc-control-init", 7);
  }
  componentWillLoad() {
    const self = this;
    this.initControl.emit(state => self.state = state);
  }
  handleClick() {
    this.state.muted = !this.state.muted;
  }
  render() {
    const {
      muted,
      volume
    } = this.state || {};
    const label = muted ? (0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)('Unmute', 'dovetail-podcasts') : (0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)('Mute', 'dovetail-podcasts');
    const buttonAttributes = {
      title: label
    };
    return (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index2_js__WEBPACK_IMPORTED_MODULE_0__.d, {
      key: 'a8efd8bdd55a3e821b62176075003323deae633c'
    }, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("dtpc-button", {
      key: 'e62a6d55080c12a30ab58c3b65eed816f3a13f37',
      ...buttonAttributes
    }, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("icon-volume", {
      key: '6de5a70d0e7c670a38ca705e9aa507ecffa53c77',
      muted: muted,
      volume: volume
    })));
  }
  static get style() {
    return dtpcMuteButtonCss;
  }
}, [1, "dtpc-mute-button", undefined, [[0, "click", "handleClick"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dtpc-mute-button", "dtpc-button", "icon-volume"];
  components.forEach(tagName => {
    switch (tagName) {
      case "dtpc-mute-button":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, DtpcMuteButton$1);
        }
        break;
      case "dtpc-button":
        if (!customElements.get(tagName)) {
          (0,_dtpc_button2_js__WEBPACK_IMPORTED_MODULE_2__.d)();
        }
        break;
      case "icon-volume":
        if (!customElements.get(tagName)) {
          (0,_icon_volume2_js__WEBPACK_IMPORTED_MODULE_3__.d)();
        }
        break;
    }
  });
}
defineCustomElement$1(DtpcMuteButton$1);
const DtpcMuteButton = DtpcMuteButton$1;
const defineCustomElement = defineCustomElement$1;


/***/ }),

/***/ "../web-components/dist/components/dtpc-play-button.js":
/*!*************************************************************!*\
  !*** ../web-components/dist/components/dtpc-play-button.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DtpcPlayButton: () => (/* binding */ DtpcPlayButton),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "../web-components/dist/components/index2.js");
/* harmony import */ var _index5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index5.js */ "../web-components/dist/components/index5.js");
/* harmony import */ var _dtpc_button2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dtpc-button2.js */ "../web-components/dist/components/dtpc-button2.js");
/* harmony import */ var _icon_pause2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./icon-pause2.js */ "../web-components/dist/components/icon-pause2.js");
/* harmony import */ var _icon_play2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./icon-play2.js */ "../web-components/dist/components/icon-play2.js");





const dtpcPlayButtonCss = ":host {\n  --dtpc-button--size: var(--dtpc-play-button--size, 2rem);\n  --dtpc-button--padding: var(--dtpc-play-button--padding, 0.5rem);\n  --dtpc-button--foreground: var(--dtpc-play-button--foreground);\n  --dtpc-button--foreground--hover: var(--dtpc-play-button--foreground--hover, var(--_dtpc-player--surface));\n  --dtpc-button--foreground--active: var(--dtpc-play-button--foreground--playing);\n  --dtpc-button--surface: var(--dtpc-play-button--surface);\n  --dtpc-button--surface--hover: var(--dtpc-play-button--surface--hover, var(--_dtpc-player--foreground));\n  --dtpc-button--surface--active: var(--dtpc-play-button--surface--playing);\n  --dtpc-button--surface-opacity: var(--dtpc-play-button--surface-opacity);\n  --dtpc-button--surface-opacity--hover: var(--dtpc-play-button--surface-opacity--hover, 100%);\n  --dtpc-button--surface-opacity--active: var(--dtpc-play-button--surface-opacity--playing, 0);\n  --dtpc-button--border-color: var(--dtpc-play-button--border-color, transparent);\n  --dtpc-button--border-color--hover: var(--dtpc-play-button--border-color--hover, transparent);\n  --dtpc-button--border-color--active: var(--dtpc-play-button--border-color--playing, var(--_dtpc-player--foreground));\n  --dtpc-button--border-radius: var(--dtpc-play-button--border-radius);\n  --dtpc-button--border-radius--hover: var(--dtpc-play-button--border-radius--hover);\n  --dtpc-button--border-radius--active: var(--dtpc-play-button--border-radius--playing);\n  --dtpc-button--border-width: var(--dtpc-play-button--border-width, 0.125);\n  --dtpc-button--border-width--hover: var(--dtpc-play-button--border-width--hover, 0.125);\n  --dtpc-button--border-width--active: var(--dtpc-play-button--border-width--playing, 0.125);\n  --dtpc-button--focus-ring-color: var(--dtpc-play-button--focus-ring-color);\n  --dtpc-button--focus-ring-offset: var(--dtpc-play-button--focus-ring-offset);\n  --dtpc-button--focus-ring-width: var(--dtpc-play-button--focus-ring-width);\n}\n\n:host([data-status='playing']) {\n  --dtpc-button--foreground: var(--dtpc-button--foreground--active);\n  --dtpc-button--surface: var(--dtpc-button--surface--active);\n  --dtpc-button--surface-opacity: var(--dtpc-button--surface-opacity--active);\n  --dtpc-button--border-color: var(--dtpc-button--border-color--active);\n  --dtpc-button--border-width: var(--dtpc-button--border-width--active);\n  --dtpc-button--border-radius: var(--dtpc-button--border-radius--active);\n\n  &:hover {\n    --dtpc-button--surface-opacity: var(--dtpc-button--surface-opacity--hover);\n  }\n}\n";
const DtpcPlayButton$1 = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.p)(class DtpcPlayButton extends _index2_js__WEBPACK_IMPORTED_MODULE_0__.H {
  constructor() {
    super();
    Object.defineProperty(this, "state", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "initControl", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "togglePaused", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.__registerHost();
    this.__attachShadow();
    this.initControl = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "dtpc-control-init", 7);
    this.togglePaused = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "audio-toggle-paused", 7);
  }
  componentWillLoad() {
    const self = this;
    this.initControl.emit(state => self.state = state);
  }
  handleClick() {
    this.togglePaused.emit();
  }
  render() {
    const {
      playing
    } = this.state;
    const label = playing ? (0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)('Pause', 'dovetail-podcasts') : (0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)('Play', 'dovetail-podcasts');
    const buttonAttributes = {
      type: 'button',
      title: label
    };
    return (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index2_js__WEBPACK_IMPORTED_MODULE_0__.d, {
      key: '06e758827b0c348c9dc7352742d24482b5c35760',
      "data-status": playing ? 'playing' : 'paused'
    }, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("dtpc-button", {
      key: '43f8b4df8d104e706cfdf656f946db1bd3910949',
      ...buttonAttributes
    }, playing ? (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("icon-pause", null) : (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("icon-play", null)));
  }
  static get style() {
    return dtpcPlayButtonCss;
  }
}, [1, "dtpc-play-button", undefined, [[0, "click", "handleClick"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dtpc-play-button", "dtpc-button", "icon-pause", "icon-play"];
  components.forEach(tagName => {
    switch (tagName) {
      case "dtpc-play-button":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, DtpcPlayButton$1);
        }
        break;
      case "dtpc-button":
        if (!customElements.get(tagName)) {
          (0,_dtpc_button2_js__WEBPACK_IMPORTED_MODULE_2__.d)();
        }
        break;
      case "icon-pause":
        if (!customElements.get(tagName)) {
          (0,_icon_pause2_js__WEBPACK_IMPORTED_MODULE_3__.d)();
        }
        break;
      case "icon-play":
        if (!customElements.get(tagName)) {
          (0,_icon_play2_js__WEBPACK_IMPORTED_MODULE_4__.d)();
        }
        break;
    }
  });
}
defineCustomElement$1(DtpcPlayButton$1);
const DtpcPlayButton = DtpcPlayButton$1;
const defineCustomElement = defineCustomElement$1;


/***/ }),

/***/ "../web-components/dist/components/dtpc-player.js":
/*!********************************************************!*\
  !*** ../web-components/dist/components/dtpc-player.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DtpcPlayer: () => (/* binding */ DtpcPlayer),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "../web-components/dist/components/index2.js");

const appendToMap = (map, propName, value) => {
  const items = map.get(propName);
  if (!items) {
    map.set(propName, [value]);
  } else if (!items.includes(value)) {
    items.push(value);
  }
};
const debounce = (fn, ms) => {
  let timeoutId;
  return (...args) => {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(() => {
      timeoutId = 0;
      fn(...args);
    }, ms);
  };
};
const isConnected = maybeElement => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce(map => {
  for (let key of map.keys()) {
    map.set(key, map.get(key).filter(isConnected));
  }
}, 2000);
const stencilSubscription = () => {
  if (typeof _index2_js__WEBPACK_IMPORTED_MODULE_0__.e !== 'function') {
    return {};
  }
  const elmsToUpdate = new Map();
  return {
    dispose: () => elmsToUpdate.clear(),
    get: propName => {
      const elm = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.e)();
      if (elm) {
        appendToMap(elmsToUpdate, propName, elm);
      }
    },
    set: propName => {
      const elements = elmsToUpdate.get(propName);
      if (elements) {
        elmsToUpdate.set(propName, elements.filter(_index2_js__WEBPACK_IMPORTED_MODULE_0__.f));
      }
      cleanupElements(elmsToUpdate);
    },
    reset: () => {
      elmsToUpdate.forEach(elms => elms.forEach(_index2_js__WEBPACK_IMPORTED_MODULE_0__.f));
      cleanupElements(elmsToUpdate);
    }
  };
};
const unwrap = val => typeof val === 'function' ? val() : val;
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
  const unwrappedState = unwrap(defaultState);
  let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
  const handlers = {
    dispose: [],
    get: [],
    set: [],
    reset: []
  };
  const reset = () => {
    var _unwrap;
    states = new Map(Object.entries((_unwrap = unwrap(defaultState)) !== null && _unwrap !== void 0 ? _unwrap : {}));
    handlers.reset.forEach(cb => cb());
  };
  const dispose = () => {
    handlers.dispose.forEach(cb => cb());
    reset();
  };
  const get = propName => {
    handlers.get.forEach(cb => cb(propName));
    return states.get(propName);
  };
  const set = (propName, value) => {
    const oldValue = states.get(propName);
    if (shouldUpdate(value, oldValue, propName)) {
      states.set(propName, value);
      handlers.set.forEach(cb => cb(propName, value, oldValue));
    }
  };
  const state = typeof Proxy === 'undefined' ? {} : new Proxy(unwrappedState, {
    get(_, propName) {
      return get(propName);
    },
    ownKeys(_) {
      return Array.from(states.keys());
    },
    getOwnPropertyDescriptor() {
      return {
        enumerable: true,
        configurable: true
      };
    },
    has(_, propName) {
      return states.has(propName);
    },
    set(_, propName, value) {
      set(propName, value);
      return true;
    }
  });
  const on = (eventName, callback) => {
    handlers[eventName].push(callback);
    return () => {
      removeFromArray(handlers[eventName], callback);
    };
  };
  const onChange = (propName, cb) => {
    const unSet = on('set', (key, newValue) => {
      if (key === propName) {
        cb(newValue);
      }
    });
    const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
    return () => {
      unSet();
      unReset();
    };
  };
  const use = (...subscriptions) => {
    const unsubs = subscriptions.reduce((unsubs, subscription) => {
      if (subscription.set) {
        unsubs.push(on('set', subscription.set));
      }
      if (subscription.get) {
        unsubs.push(on('get', subscription.get));
      }
      if (subscription.reset) {
        unsubs.push(on('reset', subscription.reset));
      }
      if (subscription.dispose) {
        unsubs.push(on('dispose', subscription.dispose));
      }
      return unsubs;
    }, []);
    return () => unsubs.forEach(unsub => unsub());
  };
  const forceUpdate = key => {
    const oldValue = states.get(key);
    handlers.set.forEach(cb => cb(key, oldValue, oldValue));
  };
  return {
    state,
    get,
    set,
    on,
    onChange,
    use,
    dispose,
    reset,
    forceUpdate
  };
};
const removeFromArray = (array, item) => {
  const index = array.indexOf(item);
  if (index >= 0) {
    array[index] = array[array.length - 1];
    array.length--;
  }
};
const createStore = (defaultState, shouldUpdate) => {
  const map = createObservableMap(defaultState, shouldUpdate);
  map.use(stencilSubscription());
  return map;
};
class playerStateFactory {
  constructor() {
    Object.defineProperty(this, "stores", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
  }
  createStore(src) {
    const audioElm = new Audio();
    audioElm.preload = 'none';
    audioElm.src = src;
    audioElm.volume = 0.8;
    const newStore = createStore({
      audioElm,
      currentTime: audioElm.currentTime,
      duration: audioElm.duration,
      muted: audioElm.muted,
      playing: !audioElm.paused,
      volume: audioElm.volume,
      seekTime: null
    });
    this.stores.push(newStore);
    return newStore;
  }
}
const factory = new playerStateFactory();
const dtpcPlayerCss = ":host {\n  --_dtpc-player--foreground: var(--dtpc-player--foreground, CanvasText);\n  --_dtpc-player--highlight: var(--dtpc-player--highlight, LinkText);\n  --_dtpc-player--surface: var(--dtpc-player--surface, Canvas);\n  --_dtpc-player--surface-opacity: var(--dtpc-player--bg-opacity, 0);\n  --_dtpc-player--surface-blur: var(--dtpc-player--bg-blur, 0);\n  --_dtpc-player--padding: var(--dtpc-player--padding, 0);\n  --_dtpc-player--padding-inline: var(--dtpc-player--padding-inline, var(--_dtpc-player--padding));\n  --_dtpc-player--padding-block: var(--dtpc-player--padding-block, var(--_dtpc-player--padding));\n  --_dtpc-player--spacing: var(--dtpc-player--spacing, 0.5rem);\n\n  /* Time */\n  --_dtpc-player--time--color: var(--dtpc-player--time--font-size, var(--_dtpc-player--foreground));\n  --_dtpc-player--time--font-size: var(--dtpc-player--time--font-size, 0.875rem);\n  --_dtpc-player--time--font-family: var(--dtpc-player--time--font-family, ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace);\n  --_dtpc-player--time--font-weight: var(--dtpc-player--time--font-weight, inherit);\n}\n\n.wrapper {\n  display: grid;\n\n  & > * {\n    grid-column: 1 / -1;\n    grid-row: 1 / -1;\n  }\n}\n\n.main {\n  --_spacing: var(--_dtpc-player--spacing);\n  --_padding-inline: var(--_dtpc-player--padding-inline);\n  --_padding-block: var(--_dtpc-player--padding-block);\n\n  display: flex;\n  align-items: center;\n  gap: var(--_spacing);\n\n  padding-inline: var(--_padding-inline);\n  padding-block: var(--_padding-block);\n}\n";
const DtpcPlayer$1 = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.p)(class DtpcPlayer extends _index2_js__WEBPACK_IMPORTED_MODULE_0__.H {
  constructor() {
    super();
    Object.defineProperty(this, "state", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "src", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "duration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "audioDuration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: this.duration
    });
    this.__registerHost();
    this.__attachShadow();
  }
  connectedCallback() {
    const {
      state,
      onChange
    } = factory.createStore(this.src);
    const {
      audioElm
    } = state;
    let previousSeekTime = state.seekTime;
    this.audioDuration = this.duration;
    this.state = state;
    state.duration = this.audioDuration;
    onChange('seekTime', seekTime => {
      if (previousSeekTime !== null && seekTime === null) {
        audioElm.currentTime = previousSeekTime;
        state.currentTime = previousSeekTime;
      }
      previousSeekTime = seekTime;
    });
    onChange('muted', muted => audioElm.muted = muted);
    onChange('volume', volume => audioElm.volume = volume);
    state.audioElm.addEventListener('loadedmetadata', e => {
      state.currentTime = e.target.currentTime;
      state.duration = e.target.duration;
    });
    state.audioElm.addEventListener('timeupdate', e => state.currentTime = e.target.currentTime);
    state.audioElm.addEventListener('play', () => state.playing = true);
    state.audioElm.addEventListener('pause', () => state.playing = false);
  }
  disconnectedCallback() {
    this.state.audioElm.pause();
  }
  handleTogglePaused() {
    if (this.state.audioElm.paused) {
      this.state.audioElm.play().then(() => {}).catch(e => {
        console.error(e);
      });
    } else {
      this.state.audioElm.pause();
    }
  }
  handleControlInit(e) {
    if (e.detail instanceof Function) {
      e.stopPropagation();
      e.detail(this.state);
    }
  }
  watchSrcHandler(newSrc) {
    if (!this.state.audioElm.paused) {
      this.state.audioElm.pause();
    }
    this.state.audioElm.src = newSrc;
  }
  render() {
    return (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index2_js__WEBPACK_IMPORTED_MODULE_0__.d, {
      key: '9418451f204b2349cc27758716a085bfd8ede364'
    }, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
      key: 'e38c38f166ca83ea738a03721804e23527cb2a2a',
      class: "wrapper"
    }, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
      key: 'e1fadfdebf7dba6b6a15fa1d7e1689d114e067ae',
      part: "backdrop"
    }), (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
      key: '30afd10f8dd61f515e250697026190da73c46e8f',
      class: "main"
    }, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", {
      key: '8b500e39691ead695867040475031de1b51a5537'
    }))));
  }
  static get watchers() {
    return {
      "src": ["watchSrcHandler"]
    };
  }
  static get style() {
    return dtpcPlayerCss;
  }
}, [1, "dtpc-player", {
  "src": [1],
  "duration": [2],
  "audioDuration": [32]
}, [[0, "audio-toggle-paused", "handleTogglePaused"], [0, "dtpc-control-init", "handleControlInit"]], {
  "src": ["watchSrcHandler"]
}]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dtpc-player"];
  components.forEach(tagName => {
    switch (tagName) {
      case "dtpc-player":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, DtpcPlayer$1);
        }
        break;
    }
  });
}
defineCustomElement$1(DtpcPlayer$1);
const DtpcPlayer = DtpcPlayer$1;
const defineCustomElement = defineCustomElement$1;


/***/ }),

/***/ "../web-components/dist/components/dtpc-progress-bar.js":
/*!**************************************************************!*\
  !*** ../web-components/dist/components/dtpc-progress-bar.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DtpcProgressBar: () => (/* binding */ DtpcProgressBar),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "../web-components/dist/components/index2.js");
/* harmony import */ var _index5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index5.js */ "../web-components/dist/components/index5.js");
/* harmony import */ var _index3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index3.js */ "../web-components/dist/components/index3.js");
/* harmony import */ var _dtpc_slider2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dtpc-slider2.js */ "../web-components/dist/components/dtpc-slider2.js");




const dtpcProgressBarCss = ":host{--dtpc-slider--scrubber--color:var(--dtpc-progress-bar--scrubber--color, var(--_dtpc-player--surface, white));--dtpc-slider--scrubber--size:var(--dtpc-progress-bar--scrubber--size, 1.25rem);--dtpc-slider--scrubber--border-color:var(--dtpc-progress-bar--scrubber--border-color, var(--_dtpc-player--foreground, currentColor));--dtpc-slider--scrubber--border-width:var(--dtpc-progress-bar--scrubber--border-width, 0.125rem);--dtpc-slider--scrubber--border-radius:var(--dtpc-progress-bar--scrubber--border-radius, 100vw);--dtpc-slider--progress--color:var(--dtpc-progress-bar--progress--color, var(--_dtpc-player--foreground, currentColor));--dtpc-slider--track--color:var(--dtpc-progress-bar--track--color, var(--_dtpc-player--surface, transparent));--dtpc-slider--track--height:var(--dtpc-progress-bar--track--height, 0.5rem);--dtpc-slider--track--radius:var(--dtpc-progress-bar--track--radius, 100vw);--dtpc-slider--track--border-color:var(--dtpc-progress-bar--track--border-color, var(--_dtpc-player--foreground, currentColor));--dtpc-slider--track--border-width:var(--dtpc-progress-bar--track--border-width, 0.125rem);--dtpc-slider--track--border-offset:var(--dtpc-progress-bar--track--border-offset, 0.125rem);--dtpc-slider--focus-ring-color:var(--dtpc-progress-bar--focus-ring-color, var(--_dtpc-player--highlight));--dtpc-slider--focus-ring-offset:var(--dtpc-progress-bar--focus-ring-offset, 0.125rem);--dtpc-slider--focus-ring-width:var(--dtpc-progress-bar--focus-ring-width, 2px);flex-grow:1}";
const DtpcProgressBar$1 = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.p)(class DtpcProgressBar extends _index2_js__WEBPACK_IMPORTED_MODULE_0__.H {
  constructor() {
    super();
    Object.defineProperty(this, "state", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "duration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "audioDuration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: this.duration
    });
    Object.defineProperty(this, "initControl", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.__registerHost();
    this.__attachShadow();
    this.initControl = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "dtpc-control-init", 7);
  }
  componentWillLoad() {
    const self = this;
    this.audioDuration = this.duration;
    this.initControl.emit(state => {
      self.state = state;
      self.audioDuration = state.duration || self.audioDuration;
    });
  }
  handleInput(event) {
    this.state.seekTime = event.detail;
  }
  handleChange() {
    this.state.seekTime = null;
  }
  render() {
    const {
      seekTime,
      currentTime,
      duration
    } = this.state;
    const time = seekTime !== null ? seekTime : currentTime;
    const [timeSeconds, timeMinutes, timeHours] = (0,_index3_js__WEBPACK_IMPORTED_MODULE_2__.c)((0,_index3_js__WEBPACK_IMPORTED_MODULE_2__.f)(time));
    const [durationSeconds, durationMinutes, durationHours] = (0,_index3_js__WEBPACK_IMPORTED_MODULE_2__.c)((0,_index3_js__WEBPACK_IMPORTED_MODULE_2__.f)(duration));
    const max = duration || this.audioDuration;
    const ariaLabel = (0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)('Seek slider', 'dovetail-podcasts');
    const ariaValueText = (0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)([...(timeHours && timeHours === 1 ? [(0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)(`1 Hour`, 'dovetail-podcasts')] : []), ...(timeHours && timeHours > 1 ? [(0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)(`${timeHours} Hours`, 'dovetail-podcasts')] : []), ...(timeMinutes === 1 ? [(0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)(`1 Minute`, 'dovetail-podcasts')] : []), ...(timeMinutes !== 1 ? [(0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)(`${timeMinutes || 0} Minutes`, 'dovetail-podcasts')] : []), ...(timeSeconds === 1 ? [(0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)(`1 Second`, 'dovetail-podcasts')] : []), ...(timeSeconds !== 1 ? [(0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)(`${timeSeconds || 0} Seconds`, 'dovetail-podcasts')] : []), (0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)('of', 'dovetail-podcasts'), ...(durationHours && durationHours === 1 ? [(0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)(`1 Hour`, 'dovetail-podcasts')] : []), ...(durationHours && durationHours > 1 ? [(0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)(`${durationHours} Hours`, 'dovetail-podcasts')] : []), ...(durationMinutes === 1 ? [(0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)(`1 Minute`, 'dovetail-podcasts')] : []), ...(durationMinutes !== 1 ? [(0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)(`${durationMinutes || 0} Minutes`, 'dovetail-podcasts')] : []), ...(durationSeconds === 1 ? [(0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)(`1 Second`, 'dovetail-podcasts')] : []), ...(durationSeconds !== 1 ? [(0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)(`${durationSeconds || 0} Seconds`, 'dovetail-podcasts')] : [])].join(' '), 'dovetail-podcasts');
    return (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index2_js__WEBPACK_IMPORTED_MODULE_0__.d, {
      key: 'd8853b2aaa7aa7bf99aef8b33fadf8c3874bb9a9',
      "aria-label": ariaLabel,
      "aria-valuemin": "0",
      "aria-valuemax": max,
      "aria-valuenow": time,
      "aria-valuetext": ariaValueText
    }, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("dtpc-slider", {
      key: 'f5cc261119cf7bb687f4a82563d85b2016549042',
      tabindex: 0,
      disabled: !max,
      defaultValue: 0,
      min: 0,
      max: max,
      step: 1,
      value: time
    }));
  }
  static get style() {
    return dtpcProgressBarCss;
  }
}, [1, "dtpc-progress-bar", {
  "duration": [2],
  "audioDuration": [32]
}, [[0, "slider-input", "handleInput"], [0, "slider-change", "handleChange"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dtpc-progress-bar", "dtpc-slider"];
  components.forEach(tagName => {
    switch (tagName) {
      case "dtpc-progress-bar":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, DtpcProgressBar$1);
        }
        break;
      case "dtpc-slider":
        if (!customElements.get(tagName)) {
          (0,_dtpc_slider2_js__WEBPACK_IMPORTED_MODULE_3__.d)();
        }
        break;
    }
  });
}
defineCustomElement$1(DtpcProgressBar$1);
const DtpcProgressBar = DtpcProgressBar$1;
const defineCustomElement = defineCustomElement$1;


/***/ }),

/***/ "../web-components/dist/components/dtpc-slider.js":
/*!********************************************************!*\
  !*** ../web-components/dist/components/dtpc-slider.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DtpcSlider: () => (/* binding */ DtpcSlider),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _dtpc_slider2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dtpc-slider2.js */ "../web-components/dist/components/dtpc-slider2.js");

const DtpcSlider = _dtpc_slider2_js__WEBPACK_IMPORTED_MODULE_0__.D;
const defineCustomElement = _dtpc_slider2_js__WEBPACK_IMPORTED_MODULE_0__.d;


/***/ }),

/***/ "../web-components/dist/components/dtpc-slider2.js":
/*!*********************************************************!*\
  !*** ../web-components/dist/components/dtpc-slider2.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DtpcSlider),
/* harmony export */   d: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "../web-components/dist/components/index2.js");

const dtpcSliderCss = ":host {\n  --_dtpc-slider--scrubber--color: var(--dtpc-slider--scrubber--color, var(--_dtpc-player--foreground, CanvasText));\n  --_dtpc-slider--scrubber--size: var(--dtpc-slider--scrubber--size, 1.25rem);\n  --_dtpc-slider--scrubber--border-color: var(--dtpc-slider--scrubber--border-color, transparent);\n  --_dtpc-slider--scrubber--border-width: var(--dtpc-slider--scrubber--border-width, 0);\n  --_dtpc-slider--scrubber--border-radius: var(--dtpc-slider--scrubber--border-radius, 100vw);\n  --_dtpc-slider--scrubber--focus-ring-color: var(--dtpc-slider--focus-ring-color, var(--_dtpc-player--highlight, LinkText));\n  --_dtpc-slider--scrubber--focus-ring-offset: var(--dtpc-slider--focus-ring-offset, 0.125rem);\n  --_dtpc-slider--scrubber--focus-ring-width: var(--dtpc-slider--focus-ring-width, 0.125rem);\n  --_dtpc-slider--progress--color: var(--dtpc-slider--progress--color, var(--_dtpc-player--foreground, CanvasText));\n  --_dtpc-slider--track--color: var(--dtpc-slider--track--color, color-mix(in oklch, var(--_dtpc-slider--progress--color) 20%, transparent));\n  --_dtpc-slider--track--height: var(--dtpc-slider--track--height, 0.25rem);\n  --_dtpc-slider--track--radius: var(--dtpc-slider--track--radius, 100vw);\n  --_dtpc-slider--track--border-color: var(--dtpc-slider--track--border-color, transparent);\n  --_dtpc-slider--track--border-width: var(--dtpc-slider--track--border-width, 0);\n  --_dtpc-slider--track--border-offset: var(--dtpc-slider--track--border-offset, 0);\n\n  display: contents;\n}\n\n.track {\n  --_dtpc-slider--track--gutter: calc(var(--_dtpc-slider--scrubber--size) / 2);\n\n  isolation: isolate;\n  display: grid;\n  align-items: center;\n  grid-template-columns: [range-start] var(--_dtpc-slider--track--gutter) [track-start] 1fr [track-end] var(--_dtpc-slider--track--gutter) [range-end];\n  grid-template-rows: [range-start] [track-start] var(--_dtpc-slider--track--height) [track-end] [range-end];\n\n  &::before {\n    content: '';\n\n    grid-area: track;\n    grid-row: 1;\n    place-self: stretch;\n\n    outline-style: solid;\n    outline-color: var(--_dtpc-slider--track--border-color);\n    outline-width: var(--_dtpc-slider--track--border-width);\n    outline-offset: var(--_dtpc-slider--track--border-offset);\n\n    border-radius: var(--_dtpc-slider--track--radius);\n\n    background-color: var(--_dtpc-slider--track--color);\n  }\n\n  &:has(input[orient='vertical']) {\n    writing-mode: vertical-lr;\n    direction: rtl;\n    height: 100px;\n\n    margin-block: calc(var(--_dtpc-slider--scrubber--size) / 2);\n  }\n}\n\n.progress {\n  --_progress--color: var(--_dtpc-slider--progress--color);\n  --_length: calc(var(--progress, 0) * (100% - var(--_dtpc-slider--track--gutter) * 2));\n\n  grid-area: range;\n  grid-row: 1;\n  place-self: stretch;\n\n  display: grid;\n  grid-template-columns: var(--_dtpc-slider--track--gutter) minmax(var(--_dtpc-slider--track--height), var(--_length)) 1fr var(--_dtpc-slider--track--gutter);\n\n  &:not([data-show]) {\n    visibility: hidden;\n  }\n\n  &::before {\n    content: '';\n    grid-column: 2;\n\n    border-radius: var(--_dtpc-slider--track--radius);\n\n    background-color: var(--_dtpc-slider--progress--color);\n  }\n}\n\n.range {\n  grid-area: range;\n  grid-row: 1;\n\n  display: grid;\n  grid-template-columns: calc(var(--progress, 0) * (100% - var(--_dtpc-slider--scrubber--size))) [thumb-start] var(--_dtpc-slider--scrubber--size) [thumb-end];\n  grid-template-rows: [thumb-start] var(--_dtpc-slider--track--height) [thumb-end];\n  align-items: center;\n  justify-items: center;\n\n  min-width: var(--_dtpc-slider--track--height);\n}\n\n.scrubber {\n  grid-area: thumb;\n  display: grid;\n  aspect-ratio: 1;\n  width: var(--_dtpc-slider--scrubber--size);\n\n  &::after {\n    content: '';\n\n    transition-property: scale, opacity;\n    transition-duration: 200ms;\n    transition-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);\n\n    display: block;\n    scale: 0;\n    opacity: 0;\n\n    border-style: solid;\n    border-color: var(--_dtpc-slider--scrubber--border-color);\n    border-width: var(--_dtpc-slider--scrubber--border-width);\n    border-radius: var(--_dtpc-slider--scrubber--border-radius);\n\n    background-color: var(--_dtpc-slider--scrubber--color);\n  }\n\n  .track:has(input:not(:disabled)):where(:hover, :focus-within) & {\n    &::after {\n      scale: 1;\n      opacity: 1;\n    }\n  }\n\n  .track:has(input:focus-visible) & {\n    &::after {\n      outline-style: solid;\n      outline-offset: var(--_dtpc-slider--scrubber--focus-ring-offset);\n      outline-color: var(--_dtpc-slider--scrubber--focus-ring-color);\n      outline-width: var(--_dtpc-slider--scrubber--focus-ring-width);\n    }\n  }\n}\n\ninput {\n  grid-area: range;\n  grid-row: 1;\n\n  appearance: none;\n  background-color: transparent;\n  outline: 0;\n  border: 0;\n  margin: 0;\n  padding: 0;\n  opacity: 0;\n\n  block-size: var(--_dtpc-slider--track--height);\n\n  &[orient='vertical'] {\n    writing-mode: vertical-lr;\n    direction: rtl;\n    vertical-align: bottom;\n  }\n\n  /* Chrome */\n  @media screen and (-webkit-min-device-pixel-ratio: 0) {\n    &::-webkit-slider-runnable-track {\n      appearance: none;\n      position: relative;\n      block-size: var(--_dtpc-slider--track--height);\n    }\n    &::-webkit-slider-thumb {\n      appearance: none;\n      position: relative;\n      display: block;\n      top: 50%;\n      left: 0;\n      translate: 0 -50%;\n      aspect-ratio: 1;\n      width: var(--_dtpc-slider--scrubber--size);\n      height: auto;\n      cursor: ew-resize;\n    }\n\n    &[orient='vertical'] {\n      &::-webkit-slider-thumb {\n        left: 50%;\n        top: 0;\n        translate: -50% 0;\n        cursor: ns-resize;\n      }\n    }\n\n    &:disabled {\n      &::-webkit-slider-thumb {\n        cursor: default;\n      }\n    }\n  }\n}\n";
const DtpcSlider = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.p)(class DtpcSlider extends _index2_js__WEBPACK_IMPORTED_MODULE_0__.H {
  constructor() {
    super();
    Object.defineProperty(this, "disabled", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "defaultValue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "value", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    Object.defineProperty(this, "min", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "max", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 100
    });
    Object.defineProperty(this, "step", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 1
    });
    Object.defineProperty(this, "orient", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "currentValue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "sliderChange", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "sliderInput", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.__registerHost();
    this.__attachShadow();
    this.sliderChange = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "slider-change", 7);
    this.sliderInput = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "slider-input", 7);
  }
  get el() {
    return this;
  }
  handleValueChange(newValue) {
    this.currentValue = newValue;
  }
  handleChange(e) {
    this.currentValue = parseFloat(e.target.value);
    this.sliderChange.emit(this.currentValue);
  }
  handleInput(e) {
    this.currentValue = parseFloat(e.target.value);
    this.sliderInput.emit(this.currentValue);
  }
  connectedCallback() {
    this.currentValue = this.value !== null ? this.value : this.defaultValue;
  }
  render() {
    const {
      min,
      max,
      defaultValue,
      currentValue,
      step,
      orient,
      disabled
    } = this;
    const progress = this.currentValue / this.max;
    const inputAttributes = {
      min,
      max,
      step,
      orient,
      defaultValue: `${defaultValue}`,
      value: currentValue,
      disabled: disabled || !max,
      onChange: e => this.handleChange(e),
      onInput: e => this.handleInput(e)
    };
    return (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
      key: 'bb0fc5836d30d9c7761c05ea27cf1b73424aac62',
      class: "track",
      style: {
        '--progress': `${progress}`
      }
    }, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
      key: 'b103713967683c13b406b932b40dc9f55af63636',
      class: "progress",
      "data-show": !!max
    }), (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
      key: '35343b5e08b2a34e53629ba161d40e95e0142228',
      class: "range"
    }, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
      key: '0edcf7ba3d9a67a92bf55e10930421558b9497d3',
      class: "scrubber"
    })), (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", {
      key: 'dbab00885c6a5ced7a9a7e44a7e25c77124b6bdb',
      type: 'range',
      ...inputAttributes,
      value: this.currentValue
    }));
  }
  static get watchers() {
    return {
      "value": ["handleValueChange"]
    };
  }
  static get style() {
    return dtpcSliderCss;
  }
}, [1, "dtpc-slider", {
  "disabled": [4],
  "defaultValue": [2, "default-value"],
  "value": [2],
  "min": [2],
  "max": [2],
  "step": [2],
  "orient": [1],
  "currentValue": [32]
}, undefined, {
  "value": ["handleValueChange"]
}]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dtpc-slider"];
  components.forEach(tagName => {
    switch (tagName) {
      case "dtpc-slider":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, DtpcSlider);
        }
        break;
    }
  });
}
defineCustomElement(DtpcSlider);


/***/ }),

/***/ "../web-components/dist/components/dtpc-time-current.js":
/*!**************************************************************!*\
  !*** ../web-components/dist/components/dtpc-time-current.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DtpcTimeCurrent: () => (/* binding */ DtpcTimeCurrent),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _dtpc_time_current2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dtpc-time-current2.js */ "../web-components/dist/components/dtpc-time-current2.js");

const DtpcTimeCurrent = _dtpc_time_current2_js__WEBPACK_IMPORTED_MODULE_0__.D;
const defineCustomElement = _dtpc_time_current2_js__WEBPACK_IMPORTED_MODULE_0__.d;


/***/ }),

/***/ "../web-components/dist/components/dtpc-time-current2.js":
/*!***************************************************************!*\
  !*** ../web-components/dist/components/dtpc-time-current2.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DtpcTimeCurrent),
/* harmony export */   d: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "../web-components/dist/components/index2.js");
/* harmony import */ var _index3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index3.js */ "../web-components/dist/components/index3.js");


const dtpcTimeCurrentCss = ":host{--_dtpc-time-current--color:var(--dtpc-time-current--color, var(--_dtpc-player--time--color));--_dtpc-time-current--font-family:var(--dtpc-time-current--font-family, var(--_dtpc-player--time--font-family));--_dtpc-time-current--font-size:var(--dtpc-time-current--font-size, var(--_dtpc-player--time--font-size));--_dtpc-time-current--font-weight:var(--dtpc-time-current--font-weight, var(--_dtpc-player--time--font-weight));color:var(--_dtpc-time-current--color);font-family:var(--_dtpc-time-current--font-family);font-size:var(--_dtpc-time-current--font-size);font-weight:var(--_dtpc-time-current--font-weight)}";
const DtpcTimeCurrent = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.p)(class DtpcTimeCurrent extends _index2_js__WEBPACK_IMPORTED_MODULE_0__.H {
  constructor() {
    super();
    Object.defineProperty(this, "state", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "initControl", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.__registerHost();
    this.__attachShadow();
    this.initControl = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "dtpc-control-init", 7);
  }
  componentWillLoad() {
    const self = this;
    this.initControl.emit(state => self.state = state);
  }
  render() {
    const {
      seekTime,
      currentTime
    } = this.state;
    const time = seekTime !== null ? seekTime : currentTime;
    const displayTime = (0,_index3_js__WEBPACK_IMPORTED_MODULE_1__.f)(time);
    return (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index2_js__WEBPACK_IMPORTED_MODULE_0__.d, {
      key: '059dd85c2e6a323e554536ff074e6d7896484994'
    }, displayTime);
  }
  static get style() {
    return dtpcTimeCurrentCss;
  }
}, [1, "dtpc-time-current"]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dtpc-time-current"];
  components.forEach(tagName => {
    switch (tagName) {
      case "dtpc-time-current":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, DtpcTimeCurrent);
        }
        break;
    }
  });
}
defineCustomElement(DtpcTimeCurrent);


/***/ }),

/***/ "../web-components/dist/components/dtpc-time-display.js":
/*!**************************************************************!*\
  !*** ../web-components/dist/components/dtpc-time-display.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DtpcTimeDisplay: () => (/* binding */ DtpcTimeDisplay),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "../web-components/dist/components/index2.js");
/* harmony import */ var _dtpc_time_current2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dtpc-time-current2.js */ "../web-components/dist/components/dtpc-time-current2.js");
/* harmony import */ var _dtpc_time_duration2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dtpc-time-duration2.js */ "../web-components/dist/components/dtpc-time-duration2.js");



const dtpcTimeDisplayCss = ":host{--_dtpc-time-display--spacing:var(--dtpc-time-display--spacing, 0.25rem);color:var(--_dtpc-player--time--color, currentColor);font-family:var(--_dtpc-player--time--font-family, inherit);font-size:var(--_dtpc-player--time--font-size, inherit);font-weight:var(--_dtpc-player--time--font-weight, inherit)}.wrapper{--_spacing:var(--_dtpc-time-display--spacing);display:flex;align-items:baseline;gap:var(--_spacing)}";
const DtpcTimeDisplay$1 = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.p)(class DtpcTimeDisplay extends _index2_js__WEBPACK_IMPORTED_MODULE_0__.H {
  constructor() {
    super();
    Object.defineProperty(this, "duration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    this.__registerHost();
    this.__attachShadow();
  }
  render() {
    return (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index2_js__WEBPACK_IMPORTED_MODULE_0__.d, {
      key: '1151a09917785ef95517d3f531c8d99958dfab48'
    }, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
      key: '18edebcd534ebd140829b184aa22a14bf2834f5f',
      class: "wrapper"
    }, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("dtpc-time-current", {
      key: '473f3c712bf1d2881cd5c028d0f8201c02a28dbc'
    }), (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", {
      key: '03a7d647bafdf55c9f1282841b4fe739ee8dcc80',
      class: "separator"
    }, "/"), (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("dtpc-time-duration", {
      key: '6c789eb18d1e3472cbadef493a782b487f5729af',
      duration: this.duration
    })));
  }
  static get style() {
    return dtpcTimeDisplayCss;
  }
}, [1, "dtpc-time-display", {
  "duration": [2]
}]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dtpc-time-display", "dtpc-time-current", "dtpc-time-duration"];
  components.forEach(tagName => {
    switch (tagName) {
      case "dtpc-time-display":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, DtpcTimeDisplay$1);
        }
        break;
      case "dtpc-time-current":
        if (!customElements.get(tagName)) {
          (0,_dtpc_time_current2_js__WEBPACK_IMPORTED_MODULE_1__.d)();
        }
        break;
      case "dtpc-time-duration":
        if (!customElements.get(tagName)) {
          (0,_dtpc_time_duration2_js__WEBPACK_IMPORTED_MODULE_2__.d)();
        }
        break;
    }
  });
}
defineCustomElement$1(DtpcTimeDisplay$1);
const DtpcTimeDisplay = DtpcTimeDisplay$1;
const defineCustomElement = defineCustomElement$1;


/***/ }),

/***/ "../web-components/dist/components/dtpc-time-duration.js":
/*!***************************************************************!*\
  !*** ../web-components/dist/components/dtpc-time-duration.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DtpcTimeDuration: () => (/* binding */ DtpcTimeDuration),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _dtpc_time_duration2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dtpc-time-duration2.js */ "../web-components/dist/components/dtpc-time-duration2.js");

const DtpcTimeDuration = _dtpc_time_duration2_js__WEBPACK_IMPORTED_MODULE_0__.D;
const defineCustomElement = _dtpc_time_duration2_js__WEBPACK_IMPORTED_MODULE_0__.d;


/***/ }),

/***/ "../web-components/dist/components/dtpc-time-duration2.js":
/*!****************************************************************!*\
  !*** ../web-components/dist/components/dtpc-time-duration2.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DtpcTimeDuration),
/* harmony export */   d: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "../web-components/dist/components/index2.js");
/* harmony import */ var _index3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index3.js */ "../web-components/dist/components/index3.js");


const dtpcTimeDurationCss = ":host{--_dtpc-time-duration--color:var(--dtpc-time-duration--color, var(--_dtpc-player--time--color));--_dtpc-time-duration--font-family:var(--dtpc-time-duration--font-family, var(--_dtpc-player--time--font-family));--_dtpc-time-duration--font-size:var(--dtpc-time-duration--font-size, var(--_dtpc-player--time--font-size));--_dtpc-time-duration--font-weight:var(--dtpc-time-duration--font-weight, var(--_dtpc-player--time--font-weight));color:var(--_dtpc-time-duration--color);font-family:var(--_dtpc-time-duration--font-family);font-size:var(--_dtpc-time-duration--font-size);font-weight:var(--_dtpc-time-duration--font-weight)}";
const DtpcTimeDuration = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.p)(class DtpcTimeDuration extends _index2_js__WEBPACK_IMPORTED_MODULE_0__.H {
  constructor() {
    super();
    Object.defineProperty(this, "state", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "duration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "audioDuration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: this.duration
    });
    Object.defineProperty(this, "initControl", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.__registerHost();
    this.__attachShadow();
    this.initControl = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "dtpc-control-init", 7);
  }
  componentWillLoad() {
    const self = this;
    this.audioDuration = this.duration;
    this.initControl.emit(state => {
      self.state = state;
      self.audioDuration = state.duration || this.duration;
    });
  }
  render() {
    const {
      duration
    } = this.state;
    const displayDuration = (0,_index3_js__WEBPACK_IMPORTED_MODULE_1__.f)(duration || this.audioDuration);
    return (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index2_js__WEBPACK_IMPORTED_MODULE_0__.d, {
      key: '8aefe12549f34ebd5710c43c050bfa0ad403a20a'
    }, displayDuration);
  }
  static get style() {
    return dtpcTimeDurationCss;
  }
}, [1, "dtpc-time-duration", {
  "duration": [2],
  "audioDuration": [32]
}]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dtpc-time-duration"];
  components.forEach(tagName => {
    switch (tagName) {
      case "dtpc-time-duration":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, DtpcTimeDuration);
        }
        break;
    }
  });
}
defineCustomElement(DtpcTimeDuration);


/***/ }),

/***/ "../web-components/dist/components/dtpc-volume-slider.js":
/*!***************************************************************!*\
  !*** ../web-components/dist/components/dtpc-volume-slider.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DtpcVolumeSlider: () => (/* binding */ DtpcVolumeSlider),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "../web-components/dist/components/index2.js");
/* harmony import */ var _index5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index5.js */ "../web-components/dist/components/index5.js");
/* harmony import */ var _dtpc_slider2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dtpc-slider2.js */ "../web-components/dist/components/dtpc-slider2.js");



const dtpcVolumeSliderCss = ":host{display:block}";
const DtpcVolumeSlider$1 = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.p)(class DtpcVolumeSlider extends _index2_js__WEBPACK_IMPORTED_MODULE_0__.H {
  constructor() {
    super();
    Object.defineProperty(this, "state", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "orient", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "volume", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0.8
    });
    Object.defineProperty(this, "initControl", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.__registerHost();
    this.__attachShadow();
    this.initControl = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "dtpc-control-init", 7);
  }
  componentWillLoad() {
    const self = this;
    this.initControl.emit(state => {
      self.state = state;
      state.volume = self.volume;
    });
  }
  handleInput(event) {
    this.state.volume = event.detail;
  }
  render() {
    const {
      volume
    } = this.state;
    const ariaLabel = (0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)('Volume slider', 'dovetail-podcasts');
    const ariaValueText = (0,_index5_js__WEBPACK_IMPORTED_MODULE_1__._)(`${volume * 100}% volume`, 'dovetail-podcasts');
    return (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index2_js__WEBPACK_IMPORTED_MODULE_0__.d, {
      key: 'bc5b3726c0e882e560ed46944c72e631987679ae',
      "aria-label": ariaLabel,
      "aria-valuemin": "0",
      "aria-valuemax": "1",
      "aria-valuenow": volume,
      "aria-valuetext": ariaValueText
    }, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)("dtpc-slider", {
      key: 'c3201b8f397ff2b670061a82d42278eac42aaefe',
      defaultValue: volume,
      min: 0,
      max: 1,
      step: 0.01,
      value: volume,
      orient: this.orient
    }));
  }
  static get style() {
    return dtpcVolumeSliderCss;
  }
}, [1, "dtpc-volume-slider", {
  "orient": [1],
  "volume": [2]
}, [[0, "slider-input", "handleInput"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dtpc-volume-slider", "dtpc-slider"];
  components.forEach(tagName => {
    switch (tagName) {
      case "dtpc-volume-slider":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, DtpcVolumeSlider$1);
        }
        break;
      case "dtpc-slider":
        if (!customElements.get(tagName)) {
          (0,_dtpc_slider2_js__WEBPACK_IMPORTED_MODULE_2__.d)();
        }
        break;
    }
  });
}
defineCustomElement$1(DtpcVolumeSlider$1);
const DtpcVolumeSlider = DtpcVolumeSlider$1;
const defineCustomElement = defineCustomElement$1;


/***/ }),

/***/ "../web-components/dist/components/icon-pause.js":
/*!*******************************************************!*\
  !*** ../web-components/dist/components/icon-pause.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IconPause: () => (/* binding */ IconPause),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _icon_pause2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./icon-pause2.js */ "../web-components/dist/components/icon-pause2.js");

const IconPause = _icon_pause2_js__WEBPACK_IMPORTED_MODULE_0__.I;
const defineCustomElement = _icon_pause2_js__WEBPACK_IMPORTED_MODULE_0__.d;


/***/ }),

/***/ "../web-components/dist/components/icon-pause2.js":
/*!********************************************************!*\
  !*** ../web-components/dist/components/icon-pause2.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I: () => (/* binding */ IconPause),
/* harmony export */   d: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "../web-components/dist/components/index2.js");
/* harmony import */ var _lucide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lucide.js */ "../web-components/dist/components/lucide.js");
/* harmony import */ var _index4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index4.js */ "../web-components/dist/components/index4.js");



const iconCss = ".lucide-icon {\n  display: inline-grid;\n  place-items: center;\n  aspect-ratio: 1;\n\n  svg {\n    width: 100%;\n    height: auto;\n  }\n}\n";
const IconPause = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.p)(class IconPause extends _index2_js__WEBPACK_IMPORTED_MODULE_0__.H {
  constructor() {
    super();
    Object.defineProperty(this, "alignmentBaseline", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "baselineShift", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "clipPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "clipRule", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "color", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "colorInterpolation", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "colorInterpolationFilters", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "colorRendering", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cursor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cx", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cy", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "d", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "direction", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "display", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "dominantBaseline", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fill", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fillOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fillRule", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "filter", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "floodColor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "floodOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "font", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontFamily", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontKerning", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontSizeAdjust", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontStretch", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontStyle", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontVariant", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontWeight", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "height", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "imageRendering", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "isolation", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "letterSpacing", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "lightingColor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "marker", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "markerEnd", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "markerMid", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "markerStart", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "mask", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskClip", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskComposite", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskImage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskMode", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskOrigin", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskPosition", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskRepeat", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "opacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "overflow", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "pointerEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "r", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "rx", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "ry", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shapeRendering", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "stopColor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "stopOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "stroke", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeDasharray", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeDashoffset", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeLinecap", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeLinejoin", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeMiterlimit", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeWidth", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textAnchor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textDecoration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textOrientation", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textRendering", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "transform", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "transformBox", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "transformOrigin", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "unicodeBidi", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "visibility", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "width", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "wordSpacing", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "writingMode", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "x", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "y", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.__registerHost();
  }
  get el() {
    return this;
  }
  render() {
    const inner = (0,_lucide_js__WEBPACK_IMPORTED_MODULE_1__.c)(_lucide_js__WEBPACK_IMPORTED_MODULE_1__.P);
    Object.entries(Object.assign({}, (0,_index4_js__WEBPACK_IMPORTED_MODULE_2__.a)(this.el), this.getProps())).forEach(([name, value]) => inner.setAttribute(name, value));
    return (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index2_js__WEBPACK_IMPORTED_MODULE_0__.d, {
      key: '4051d51f8862753660c10f1f491eb1dbf6a1dc09',
      innerHTML: inner.outerHTML,
      class: "lucide-icon"
    });
  }
  getProps() {
    const props = ['color', 'cursor', 'cx', 'cy', 'd', 'direction', 'display', 'fill', 'filter', 'font', 'height', 'isolation', 'marker', 'mask', 'opacity', 'overflow', 'r', 'rx', 'ry', 'stroke', 'transform', 'visibility', 'width', 'x', 'y'];
    return props.reduce((acc, prop) => {
      if (this[prop] !== undefined && this[prop] !== null) {
        acc[prop] = this[prop];
      }
      return acc;
    }, {});
  }
  static get style() {
    return iconCss;
  }
}, [0, "icon-pause", {
  "alignmentBaseline": [8, "alignment-baseline"],
  "baselineShift": [8, "baseline-shift"],
  "clipPath": [8, "clip-path"],
  "clipRule": [8, "clip-rule"],
  "color": [8],
  "colorInterpolation": [8, "color-interpolation"],
  "colorInterpolationFilters": [8, "color-interpolation-filters"],
  "colorRendering": [8, "color-rendering"],
  "cursor": [8],
  "cx": [8],
  "cy": [8],
  "d": [8],
  "direction": [8],
  "display": [8],
  "dominantBaseline": [8, "dominant-baseline"],
  "fill": [8],
  "fillOpacity": [8, "fill-opacity"],
  "fillRule": [8, "fill-rule"],
  "filter": [8],
  "floodColor": [8, "flood-color"],
  "floodOpacity": [8, "flood-opacity"],
  "font": [8],
  "fontFamily": [8, "font-family"],
  "fontKerning": [8, "font-kerning"],
  "fontSize": [8, "font-size"],
  "fontSizeAdjust": [8, "font-size-adjust"],
  "fontStretch": [8, "font-stretch"],
  "fontStyle": [8, "font-style"],
  "fontVariant": [8, "font-variant"],
  "fontWeight": [8, "font-weight"],
  "height": [8],
  "imageRendering": [8, "image-rendering"],
  "isolation": [8],
  "letterSpacing": [8, "letter-spacing"],
  "lightingColor": [8, "lighting-color"],
  "marker": [8],
  "markerEnd": [8, "marker-end"],
  "markerMid": [8, "marker-mid"],
  "markerStart": [8, "marker-start"],
  "mask": [8],
  "maskClip": [8, "mask-clip"],
  "maskComposite": [8, "mask-composite"],
  "maskImage": [8, "mask-image"],
  "maskMode": [8, "mask-mode"],
  "maskOrigin": [8, "mask-origin"],
  "maskPosition": [8, "mask-position"],
  "maskRepeat": [8, "mask-repeat"],
  "maskSize": [8, "mask-size"],
  "maskType": [8, "mask-type"],
  "opacity": [8],
  "overflow": [8],
  "pointerEvents": [8, "pointer-events"],
  "r": [8],
  "rx": [8],
  "ry": [8],
  "shapeRendering": [8, "shape-rendering"],
  "stopColor": [8, "stop-color"],
  "stopOpacity": [8, "stop-opacity"],
  "stroke": [8],
  "strokeDasharray": [8, "stroke-dasharray"],
  "strokeDashoffset": [8, "stroke-dashoffset"],
  "strokeLinecap": [8, "stroke-linecap"],
  "strokeLinejoin": [8, "stroke-linejoin"],
  "strokeMiterlimit": [8, "stroke-miterlimit"],
  "strokeOpacity": [8, "stroke-opacity"],
  "strokeWidth": [8, "stroke-width"],
  "textAnchor": [8, "text-anchor"],
  "textDecoration": [8, "text-decoration"],
  "textOrientation": [8, "text-orientation"],
  "textRendering": [8, "text-rendering"],
  "transform": [8],
  "transformBox": [8, "transform-box"],
  "transformOrigin": [8, "transform-origin"],
  "unicodeBidi": [8, "unicode-bidi"],
  "visibility": [8],
  "width": [8],
  "wordSpacing": [8, "word-spacing"],
  "writingMode": [8, "writing-mode"],
  "x": [8],
  "y": [8]
}]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["icon-pause"];
  components.forEach(tagName => {
    switch (tagName) {
      case "icon-pause":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, IconPause);
        }
        break;
    }
  });
}
defineCustomElement(IconPause);


/***/ }),

/***/ "../web-components/dist/components/icon-play.js":
/*!******************************************************!*\
  !*** ../web-components/dist/components/icon-play.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IconPlay: () => (/* binding */ IconPlay),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _icon_play2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./icon-play2.js */ "../web-components/dist/components/icon-play2.js");

const IconPlay = _icon_play2_js__WEBPACK_IMPORTED_MODULE_0__.I;
const defineCustomElement = _icon_play2_js__WEBPACK_IMPORTED_MODULE_0__.d;


/***/ }),

/***/ "../web-components/dist/components/icon-play2.js":
/*!*******************************************************!*\
  !*** ../web-components/dist/components/icon-play2.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I: () => (/* binding */ IconPlay),
/* harmony export */   d: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "../web-components/dist/components/index2.js");
/* harmony import */ var _lucide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lucide.js */ "../web-components/dist/components/lucide.js");
/* harmony import */ var _index4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index4.js */ "../web-components/dist/components/index4.js");



const iconCss = ".lucide-icon {\n  display: inline-grid;\n  place-items: center;\n  aspect-ratio: 1;\n\n  svg {\n    width: 100%;\n    height: auto;\n  }\n}\n";
const IconPlay = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.p)(class IconPlay extends _index2_js__WEBPACK_IMPORTED_MODULE_0__.H {
  constructor() {
    super();
    Object.defineProperty(this, "alignmentBaseline", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "baselineShift", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "clipPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "clipRule", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "color", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "colorInterpolation", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "colorInterpolationFilters", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "colorRendering", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cursor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cx", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cy", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "d", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "direction", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "display", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "dominantBaseline", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fill", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fillOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fillRule", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "filter", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "floodColor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "floodOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "font", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontFamily", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontKerning", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontSizeAdjust", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontStretch", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontStyle", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontVariant", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontWeight", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "height", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "imageRendering", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "isolation", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "letterSpacing", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "lightingColor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "marker", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "markerEnd", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "markerMid", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "markerStart", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "mask", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskClip", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskComposite", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskImage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskMode", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskOrigin", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskPosition", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskRepeat", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "opacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "overflow", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "pointerEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "r", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "rx", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "ry", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shapeRendering", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "stopColor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "stopOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "stroke", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeDasharray", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeDashoffset", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeLinecap", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeLinejoin", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeMiterlimit", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeWidth", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textAnchor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textDecoration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textOrientation", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textRendering", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "transform", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "transformBox", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "transformOrigin", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "unicodeBidi", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "visibility", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "width", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "wordSpacing", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "writingMode", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "x", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "y", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.__registerHost();
  }
  get el() {
    return this;
  }
  render() {
    const inner = (0,_lucide_js__WEBPACK_IMPORTED_MODULE_1__.c)(_lucide_js__WEBPACK_IMPORTED_MODULE_1__.a);
    Object.entries(Object.assign({}, (0,_index4_js__WEBPACK_IMPORTED_MODULE_2__.a)(this.el), this.getProps())).forEach(([name, value]) => inner.setAttribute(name, value));
    return (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index2_js__WEBPACK_IMPORTED_MODULE_0__.d, {
      key: '06b02e3b078345ac5e695be9eece4b7165954c23',
      innerHTML: inner.outerHTML,
      class: "lucide-icon"
    });
  }
  getProps() {
    const props = ['color', 'cursor', 'cx', 'cy', 'd', 'direction', 'display', 'fill', 'filter', 'font', 'height', 'isolation', 'marker', 'mask', 'opacity', 'overflow', 'r', 'rx', 'ry', 'stroke', 'transform', 'visibility', 'width', 'x', 'y'];
    return props.reduce((acc, prop) => {
      if (this[prop] !== undefined && this[prop] !== null) {
        acc[prop] = this[prop];
      }
      return acc;
    }, {});
  }
  static get style() {
    return iconCss;
  }
}, [0, "icon-play", {
  "alignmentBaseline": [8, "alignment-baseline"],
  "baselineShift": [8, "baseline-shift"],
  "clipPath": [8, "clip-path"],
  "clipRule": [8, "clip-rule"],
  "color": [8],
  "colorInterpolation": [8, "color-interpolation"],
  "colorInterpolationFilters": [8, "color-interpolation-filters"],
  "colorRendering": [8, "color-rendering"],
  "cursor": [8],
  "cx": [8],
  "cy": [8],
  "d": [8],
  "direction": [8],
  "display": [8],
  "dominantBaseline": [8, "dominant-baseline"],
  "fill": [8],
  "fillOpacity": [8, "fill-opacity"],
  "fillRule": [8, "fill-rule"],
  "filter": [8],
  "floodColor": [8, "flood-color"],
  "floodOpacity": [8, "flood-opacity"],
  "font": [8],
  "fontFamily": [8, "font-family"],
  "fontKerning": [8, "font-kerning"],
  "fontSize": [8, "font-size"],
  "fontSizeAdjust": [8, "font-size-adjust"],
  "fontStretch": [8, "font-stretch"],
  "fontStyle": [8, "font-style"],
  "fontVariant": [8, "font-variant"],
  "fontWeight": [8, "font-weight"],
  "height": [8],
  "imageRendering": [8, "image-rendering"],
  "isolation": [8],
  "letterSpacing": [8, "letter-spacing"],
  "lightingColor": [8, "lighting-color"],
  "marker": [8],
  "markerEnd": [8, "marker-end"],
  "markerMid": [8, "marker-mid"],
  "markerStart": [8, "marker-start"],
  "mask": [8],
  "maskClip": [8, "mask-clip"],
  "maskComposite": [8, "mask-composite"],
  "maskImage": [8, "mask-image"],
  "maskMode": [8, "mask-mode"],
  "maskOrigin": [8, "mask-origin"],
  "maskPosition": [8, "mask-position"],
  "maskRepeat": [8, "mask-repeat"],
  "maskSize": [8, "mask-size"],
  "maskType": [8, "mask-type"],
  "opacity": [8],
  "overflow": [8],
  "pointerEvents": [8, "pointer-events"],
  "r": [8],
  "rx": [8],
  "ry": [8],
  "shapeRendering": [8, "shape-rendering"],
  "stopColor": [8, "stop-color"],
  "stopOpacity": [8, "stop-opacity"],
  "stroke": [8],
  "strokeDasharray": [8, "stroke-dasharray"],
  "strokeDashoffset": [8, "stroke-dashoffset"],
  "strokeLinecap": [8, "stroke-linecap"],
  "strokeLinejoin": [8, "stroke-linejoin"],
  "strokeMiterlimit": [8, "stroke-miterlimit"],
  "strokeOpacity": [8, "stroke-opacity"],
  "strokeWidth": [8, "stroke-width"],
  "textAnchor": [8, "text-anchor"],
  "textDecoration": [8, "text-decoration"],
  "textOrientation": [8, "text-orientation"],
  "textRendering": [8, "text-rendering"],
  "transform": [8],
  "transformBox": [8, "transform-box"],
  "transformOrigin": [8, "transform-origin"],
  "unicodeBidi": [8, "unicode-bidi"],
  "visibility": [8],
  "width": [8],
  "wordSpacing": [8, "word-spacing"],
  "writingMode": [8, "writing-mode"],
  "x": [8],
  "y": [8]
}]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["icon-play"];
  components.forEach(tagName => {
    switch (tagName) {
      case "icon-play":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, IconPlay);
        }
        break;
    }
  });
}
defineCustomElement(IconPlay);


/***/ }),

/***/ "../web-components/dist/components/icon-volume.js":
/*!********************************************************!*\
  !*** ../web-components/dist/components/icon-volume.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IconVolume: () => (/* binding */ IconVolume),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _icon_volume2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./icon-volume2.js */ "../web-components/dist/components/icon-volume2.js");

const IconVolume = _icon_volume2_js__WEBPACK_IMPORTED_MODULE_0__.I;
const defineCustomElement = _icon_volume2_js__WEBPACK_IMPORTED_MODULE_0__.d;


/***/ }),

/***/ "../web-components/dist/components/icon-volume2.js":
/*!*********************************************************!*\
  !*** ../web-components/dist/components/icon-volume2.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I: () => (/* binding */ IconVolume),
/* harmony export */   d: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "../web-components/dist/components/index2.js");
/* harmony import */ var _lucide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lucide.js */ "../web-components/dist/components/lucide.js");
/* harmony import */ var _index4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index4.js */ "../web-components/dist/components/index4.js");



const iconCss = ".lucide-icon {\n  display: inline-grid;\n  place-items: center;\n  aspect-ratio: 1;\n\n  svg {\n    width: 100%;\n    height: auto;\n  }\n}\n";
const IconVolume = (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.p)(class IconVolume extends _index2_js__WEBPACK_IMPORTED_MODULE_0__.H {
  constructor() {
    super();
    Object.defineProperty(this, "volume", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0.8
    });
    Object.defineProperty(this, "muted", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "alignmentBaseline", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "baselineShift", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "clipPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "clipRule", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "color", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "colorInterpolation", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "colorInterpolationFilters", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "colorRendering", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cursor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cx", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cy", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "d", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "direction", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "display", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "dominantBaseline", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fill", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fillOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fillRule", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "filter", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "floodColor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "floodOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "font", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontFamily", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontKerning", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontSizeAdjust", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontStretch", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontStyle", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontVariant", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontWeight", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "height", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "imageRendering", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "isolation", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "letterSpacing", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "lightingColor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "marker", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "markerEnd", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "markerMid", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "markerStart", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "mask", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskClip", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskComposite", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskImage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskMode", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskOrigin", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskPosition", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskRepeat", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maskType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "opacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "overflow", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "pointerEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "r", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "rx", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "ry", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shapeRendering", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "stopColor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "stopOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "stroke", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeDasharray", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeDashoffset", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeLinecap", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeLinejoin", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeMiterlimit", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "strokeWidth", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textAnchor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textDecoration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textOrientation", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textRendering", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "transform", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "transformBox", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "transformOrigin", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "unicodeBidi", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "visibility", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "width", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "wordSpacing", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "writingMode", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "x", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "y", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.__registerHost();
  }
  get el() {
    return this;
  }
  render() {
    const icon = this.muted || !this.volume ? _lucide_js__WEBPACK_IMPORTED_MODULE_1__.V : this.volume >= 0.5 && _lucide_js__WEBPACK_IMPORTED_MODULE_1__.b || _lucide_js__WEBPACK_IMPORTED_MODULE_1__.d;
    const inner = (0,_lucide_js__WEBPACK_IMPORTED_MODULE_1__.c)(icon);
    Object.entries(Object.assign({}, (0,_index4_js__WEBPACK_IMPORTED_MODULE_2__.a)(this.el), this.getProps())).forEach(([name, value]) => inner.setAttribute(name, value));
    return (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index2_js__WEBPACK_IMPORTED_MODULE_0__.d, {
      key: 'a5b4a011a228e50ca80e12fb25b7ffd20bd33ae6',
      innerHTML: inner.outerHTML,
      class: "lucide-icon"
    });
  }
  getProps() {
    const props = ['color', 'cursor', 'cx', 'cy', 'd', 'direction', 'display', 'fill', 'filter', 'font', 'height', 'isolation', 'marker', 'mask', 'opacity', 'overflow', 'r', 'rx', 'ry', 'stroke', 'transform', 'visibility', 'width', 'x', 'y'];
    return props.reduce((acc, prop) => {
      if (this[prop] !== undefined && this[prop] !== null) {
        acc[prop] = this[prop];
      }
      return acc;
    }, {});
  }
  static get style() {
    return iconCss;
  }
}, [0, "icon-volume", {
  "volume": [2, "level"],
  "muted": [4],
  "alignmentBaseline": [8, "alignment-baseline"],
  "baselineShift": [8, "baseline-shift"],
  "clipPath": [8, "clip-path"],
  "clipRule": [8, "clip-rule"],
  "color": [8],
  "colorInterpolation": [8, "color-interpolation"],
  "colorInterpolationFilters": [8, "color-interpolation-filters"],
  "colorRendering": [8, "color-rendering"],
  "cursor": [8],
  "cx": [8],
  "cy": [8],
  "d": [8],
  "direction": [8],
  "display": [8],
  "dominantBaseline": [8, "dominant-baseline"],
  "fill": [8],
  "fillOpacity": [8, "fill-opacity"],
  "fillRule": [8, "fill-rule"],
  "filter": [8],
  "floodColor": [8, "flood-color"],
  "floodOpacity": [8, "flood-opacity"],
  "font": [8],
  "fontFamily": [8, "font-family"],
  "fontKerning": [8, "font-kerning"],
  "fontSize": [8, "font-size"],
  "fontSizeAdjust": [8, "font-size-adjust"],
  "fontStretch": [8, "font-stretch"],
  "fontStyle": [8, "font-style"],
  "fontVariant": [8, "font-variant"],
  "fontWeight": [8, "font-weight"],
  "height": [8],
  "imageRendering": [8, "image-rendering"],
  "isolation": [8],
  "letterSpacing": [8, "letter-spacing"],
  "lightingColor": [8, "lighting-color"],
  "marker": [8],
  "markerEnd": [8, "marker-end"],
  "markerMid": [8, "marker-mid"],
  "markerStart": [8, "marker-start"],
  "mask": [8],
  "maskClip": [8, "mask-clip"],
  "maskComposite": [8, "mask-composite"],
  "maskImage": [8, "mask-image"],
  "maskMode": [8, "mask-mode"],
  "maskOrigin": [8, "mask-origin"],
  "maskPosition": [8, "mask-position"],
  "maskRepeat": [8, "mask-repeat"],
  "maskSize": [8, "mask-size"],
  "maskType": [8, "mask-type"],
  "opacity": [8],
  "overflow": [8],
  "pointerEvents": [8, "pointer-events"],
  "r": [8],
  "rx": [8],
  "ry": [8],
  "shapeRendering": [8, "shape-rendering"],
  "stopColor": [8, "stop-color"],
  "stopOpacity": [8, "stop-opacity"],
  "stroke": [8],
  "strokeDasharray": [8, "stroke-dasharray"],
  "strokeDashoffset": [8, "stroke-dashoffset"],
  "strokeLinecap": [8, "stroke-linecap"],
  "strokeLinejoin": [8, "stroke-linejoin"],
  "strokeMiterlimit": [8, "stroke-miterlimit"],
  "strokeOpacity": [8, "stroke-opacity"],
  "strokeWidth": [8, "stroke-width"],
  "textAnchor": [8, "text-anchor"],
  "textDecoration": [8, "text-decoration"],
  "textOrientation": [8, "text-orientation"],
  "textRendering": [8, "text-rendering"],
  "transform": [8],
  "transformBox": [8, "transform-box"],
  "transformOrigin": [8, "transform-origin"],
  "unicodeBidi": [8, "unicode-bidi"],
  "visibility": [8],
  "width": [8],
  "wordSpacing": [8, "word-spacing"],
  "writingMode": [8, "writing-mode"],
  "x": [8],
  "y": [8]
}]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["icon-volume"];
  components.forEach(tagName => {
    switch (tagName) {
      case "icon-volume":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, IconVolume);
        }
        break;
    }
  });
}
defineCustomElement(IconVolume);


/***/ }),

/***/ "../web-components/dist/components/index2.js":
/*!***************************************************!*\
  !*** ../web-components/dist/components/index2.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   H: () => (/* binding */ H),
/* harmony export */   a: () => (/* binding */ setNonce),
/* harmony export */   b: () => (/* binding */ setPlatformOptions),
/* harmony export */   c: () => (/* binding */ createEvent),
/* harmony export */   d: () => (/* binding */ Host),
/* harmony export */   e: () => (/* binding */ getRenderingRef),
/* harmony export */   f: () => (/* binding */ forceUpdate),
/* harmony export */   g: () => (/* binding */ getAssetPath),
/* harmony export */   h: () => (/* binding */ h),
/* harmony export */   p: () => (/* binding */ proxyCustomElement),
/* harmony export */   s: () => (/* binding */ setAssetPath)
/* harmony export */ });
const NAMESPACE = 'dovetail-podcasts-player-web-components';
const BUILD = {
  allRenderFn: true,
  appendChildSlotFix: false,
  asyncLoading: true,
  asyncQueue: false,
  attachStyles: true,
  cloneNodeFix: false,
  constructableCSS: true,
  cssAnnotations: true,
  devTools: false,
  element: false,
  event: true,
  experimentalScopedSlotChanges: false,
  experimentalSlotFixes: false,
  formAssociated: false,
  hasRenderFn: true,
  hostListener: true,
  hostListenerTarget: false,
  hostListenerTargetBody: false,
  hostListenerTargetDocument: false,
  hostListenerTargetParent: false,
  hostListenerTargetWindow: false,
  hotModuleReplacement: false,
  hydrateClientSide: false,
  hydrateServerSide: false,
  hydratedAttribute: false,
  hydratedClass: true,
  hydratedSelectorName: "hydrated",
  invisiblePrehydration: true,
  isDebug: false,
  isDev: true,
  isTesting: false,
  lazyLoad: false,
  lifecycle: true,
  lifecycleDOMEvents: false,
  member: true,
  method: false,
  mode: false,
  modernPropertyDecls: true,
  observeAttribute: true,
  profile: true,
  prop: true,
  propBoolean: true,
  propMutable: false,
  propNumber: true,
  propString: true,
  reflect: false,
  scoped: false,
  scopedSlotTextContentFix: false,
  scriptDataOpts: false,
  shadowDelegatesFocus: false,
  shadowDom: true,
  slot: true,
  slotChildNodesFix: false,
  slotRelocation: false,
  state: true,
  style: true,
  svg: false,
  taskQueue: true,
  updatable: true,
  vdomAttribute: true,
  vdomClass: true,
  vdomFunctional: false,
  vdomKey: true,
  vdomListener: true,
  vdomPropOrAttr: true,
  vdomRef: true,
  vdomRender: true,
  vdomStyle: true,
  vdomText: true,
  vdomXlink: true,
  watchCallback: true
};
const Env = {};
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
var Build = {
  isDev: BUILD.isDev ? true : false,
  isBrowser: true,
  isServer: false,
  isTesting: BUILD.isTesting ? true : false
};
var SVG_NS = "http://www.w3.org/2000/svg";
var HTML_NS = "http://www.w3.org/1999/xhtml";
var reWireGetterSetter = (instance, hostRef) => {
  var _a;
  const cmpMeta = hostRef.$cmpMeta$;
  const members = Object.entries((_a = cmpMeta.$members$) != null ? _a : {});
  members.map(([memberName, [memberFlags]]) => {
    if ((BUILD.state || BUILD.prop) && (memberFlags & 31 || memberFlags & 32)) {
      const ogValue = instance[memberName];
      const ogDescriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(instance), memberName);
      Object.defineProperty(instance, memberName, {
        get() {
          return ogDescriptor.get.call(this);
        },
        set(newValue) {
          ogDescriptor.set.call(this, newValue);
        },
        configurable: true,
        enumerable: true
      });
      instance[memberName] = hostRef.$instanceValues$.has(memberName) ? hostRef.$instanceValues$.get(memberName) : ogValue;
    }
  });
};
var getHostRef = ref => {
  if (ref.__stencil__getHostRef) {
    return ref.__stencil__getHostRef();
  }
  return void 0;
};
var registerInstance = (lazyInstance, hostRef) => {
  lazyInstance.__stencil__getHostRef = () => hostRef;
  hostRef.$lazyInstance$ = lazyInstance;
  if (BUILD.modernPropertyDecls && (BUILD.state || BUILD.prop)) {
    reWireGetterSetter(lazyInstance, hostRef);
  }
};
var registerHost = (hostElement, cmpMeta) => {
  const hostRef = {
    $flags$: 0,
    $hostElement$: hostElement,
    $cmpMeta$: cmpMeta,
    $instanceValues$: new Map()
  };
  if (BUILD.isDev) {
    hostRef.$renderCount$ = 0;
  }
  if (BUILD.method && BUILD.lazyLoad) {
    hostRef.$onInstancePromise$ = new Promise(r => hostRef.$onInstanceResolve$ = r);
  }
  if (BUILD.asyncLoading) {
    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);
    hostElement["s-p"] = [];
    hostElement["s-rc"] = [];
  }
  const ref = hostRef;
  hostElement.__stencil__getHostRef = () => ref;
  if (!BUILD.lazyLoad && BUILD.modernPropertyDecls && (BUILD.state || BUILD.prop)) {
    reWireGetterSetter(hostElement, hostRef);
  }
  return ref;
};
var isMemberInElement = (elm, memberName) => memberName in elm;
var customError;
var consoleError = (e, el) => (customError || console.error)(e, el);
var STENCIL_DEV_MODE = BUILD.isTesting ? ["STENCIL:"] : ["%cstencil", "color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px"];
var consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);
var consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);
var consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);
var setErrorHandler = handler => customError = handler;
var cmpModules = new Map();
var MODULE_IMPORT_PREFIX = "./";
var loadModule = (cmpMeta, hostRef, hmrVersionId) => {
  const exportName = cmpMeta.$tagName$.replace(/-/g, "_");
  const bundleId = cmpMeta.$lazyBundleId$;
  if (BUILD.isDev && typeof bundleId !== "string") {
    consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode "${hostRef.$modeName$}", but it does not exist.`);
    return void 0;
  } else if (!bundleId) {
    return void 0;
  }
  const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;
  if (module) {
    return module[exportName];
  }
  return __webpack_require__("../web-components/dist/components lazy recursive ^\\.\\/.*\\.entry\\.js.*$")(`./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? "?s-hmr=" + hmrVersionId : ""}`).then(importedModule => {
    if (!BUILD.hotModuleReplacement) {
      cmpModules.set(bundleId, importedModule);
    }
    return importedModule[exportName];
  }, e => {
    consoleError(e, hostRef.$hostElement$);
  });
};
var styles = new Map();
var modeResolutionChain = [];
var CONTENT_REF_ID = "r";
var ORG_LOCATION_ID = "o";
var SLOT_NODE_ID = "s";
var TEXT_NODE_ID = "t";
var COMMENT_NODE_ID = "c";
var HYDRATE_ID = "s-id";
var HYDRATED_STYLE_ID = "sty-id";
var HYDRATE_CHILD_ID = "c-id";
var HYDRATED_CSS = "{visibility:hidden}.hydrated{visibility:inherit}";
var STENCIL_DOC_DATA = "_stencilDocData";
var DEFAULT_DOC_DATA = {
  hostIds: 0,
  rootLevelIds: 0,
  staticComponents: new Set()
};
var SLOT_FB_CSS = "slot-fb{display:contents}slot-fb[hidden]{display:none}";
var XLINK_NS = "http://www.w3.org/1999/xlink";
var FORM_ASSOCIATED_CUSTOM_ELEMENT_CALLBACKS = ["formAssociatedCallback", "formResetCallback", "formDisabledCallback", "formStateRestoreCallback"];
var win = typeof window !== "undefined" ? window : {};
var H = win.HTMLElement || class {};
var plt = {
  $flags$: 0,
  $resourcesUrl$: "",
  jmp: h2 => h2(),
  raf: h2 => requestAnimationFrame(h2),
  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),
  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),
  ce: (eventName, opts) => new CustomEvent(eventName, opts)
};
var setPlatformHelpers = helpers => {
  Object.assign(plt, helpers);
};
var supportsShadow = BUILD.shadowDom;
var supportsListenerOptions = (() => {
  var _a;
  let supportsListenerOptions2 = false;
  try {
    (_a = win.document) == null ? void 0 : _a.addEventListener("e", null, Object.defineProperty({}, "passive", {
      get() {
        supportsListenerOptions2 = true;
      }
    }));
  } catch (e) {}
  return supportsListenerOptions2;
})();
var promiseResolve = v => Promise.resolve(v);
var supportsConstructableStylesheets = BUILD.constructableCSS ? (() => {
  try {
    new CSSStyleSheet();
    return typeof new CSSStyleSheet().replaceSync === "function";
  } catch (e) {}
  return false;
})() : false;
var queueCongestion = 0;
var queuePending = false;
var queueDomReads = [];
var queueDomWrites = [];
var queueDomWritesLow = [];
var queueTask = (queue, write) => cb => {
  queue.push(cb);
  if (!queuePending) {
    queuePending = true;
    if (write && plt.$flags$ & 4) {
      nextTick(flush);
    } else {
      plt.raf(flush);
    }
  }
};
var consume = queue => {
  for (let i2 = 0; i2 < queue.length; i2++) {
    try {
      queue[i2](performance.now());
    } catch (e) {
      consoleError(e);
    }
  }
  queue.length = 0;
};
var consumeTimeout = (queue, timeout) => {
  let i2 = 0;
  let ts = 0;
  while (i2 < queue.length && (ts = performance.now()) < timeout) {
    try {
      queue[i2++](ts);
    } catch (e) {
      consoleError(e);
    }
  }
  if (i2 === queue.length) {
    queue.length = 0;
  } else if (i2 !== 0) {
    queue.splice(0, i2);
  }
};
var flush = () => {
  if (BUILD.asyncQueue) {
    queueCongestion++;
  }
  consume(queueDomReads);
  if (BUILD.asyncQueue) {
    const timeout = (plt.$flags$ & 6) === 2 ? performance.now() + 14 * Math.ceil(queueCongestion * (1 / 10)) : Infinity;
    consumeTimeout(queueDomWrites, timeout);
    consumeTimeout(queueDomWritesLow, timeout);
    if (queueDomWrites.length > 0) {
      queueDomWritesLow.push(...queueDomWrites);
      queueDomWrites.length = 0;
    }
    if (queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0) {
      plt.raf(flush);
    } else {
      queueCongestion = 0;
    }
  } else {
    consume(queueDomWrites);
    if (queuePending = queueDomReads.length > 0) {
      plt.raf(flush);
    }
  }
};
var nextTick = cb => promiseResolve().then(cb);
var readTask = queueTask(queueDomReads, false);
var writeTask = queueTask(queueDomWrites, true);
var getAssetPath = path => {
  const assetUrl = new URL(path, plt.$resourcesUrl$);
  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;
};
var setAssetPath = path => plt.$resourcesUrl$ = path;
var isDef = v => v != null && v !== void 0;
var isComplexType = o => {
  o = typeof o;
  return o === "object" || o === "function";
};
function queryNonceMetaTagContent(doc) {
  var _a, _b, _c;
  return (_c = (_b = (_a = doc.head) == null ? void 0 : _a.querySelector('meta[name="csp-nonce"]')) == null ? void 0 : _b.getAttribute("content")) != null ? _c : void 0;
}
var escapeRegExpSpecialCharacters = text => {
  return text.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
};
var result_exports = {};
__export(result_exports, {
  err: () => err,
  map: () => map,
  ok: () => ok,
  unwrap: () => unwrap,
  unwrapErr: () => unwrapErr
});
var ok = value => ({
  isOk: true,
  isErr: false,
  value
});
var err = value => ({
  isOk: false,
  isErr: true,
  value
});
function map(result, fn) {
  if (result.isOk) {
    const val = fn(result.value);
    if (val instanceof Promise) {
      return val.then(newVal => ok(newVal));
    } else {
      return ok(val);
    }
  }
  if (result.isErr) {
    const value = result.value;
    return err(value);
  }
  throw "should never get here";
}
var unwrap = result => {
  if (result.isOk) {
    return result.value;
  } else {
    throw result.value;
  }
};
var unwrapErr = result => {
  if (result.isErr) {
    return result.value;
  } else {
    throw result.value;
  }
};
var lowerPathParam = fn => p => fn(p.toLowerCase());
var isDtsFile = lowerPathParam(p => p.endsWith(".d.ts") || p.endsWith(".d.mts") || p.endsWith(".d.cts"));
var isTsFile = lowerPathParam(p => !isDtsFile(p) && (p.endsWith(".ts") || p.endsWith(".mts") || p.endsWith(".cts")));
var isTsxFile = lowerPathParam(p => p.endsWith(".tsx") || p.endsWith(".mtsx") || p.endsWith(".ctsx"));
var isJsxFile = lowerPathParam(p => p.endsWith(".jsx") || p.endsWith(".mjsx") || p.endsWith(".cjsx"));
var isJsFile = lowerPathParam(p => p.endsWith(".js") || p.endsWith(".mjs") || p.endsWith(".cjs"));
var updateFallbackSlotVisibility = elm => {
  const childNodes = internalCall(elm, "childNodes");
  if (elm.tagName && elm.tagName.includes("-") && elm["s-cr"] && elm.tagName !== "SLOT-FB") {
    getHostSlotNodes(childNodes, elm.tagName).forEach(slotNode => {
      if (slotNode.nodeType === 1 && slotNode.tagName === "SLOT-FB") {
        if (getSlotChildSiblings(slotNode, getSlotName(slotNode), false).length) {
          slotNode.hidden = true;
        } else {
          slotNode.hidden = false;
        }
      }
    });
  }
  let i2 = 0;
  for (i2 = 0; i2 < childNodes.length; i2++) {
    const childNode = childNodes[i2];
    if (childNode.nodeType === 1 && internalCall(childNode, "childNodes").length) {
      updateFallbackSlotVisibility(childNode);
    }
  }
};
var getSlottedChildNodes = childNodes => {
  const result = [];
  for (let i2 = 0; i2 < childNodes.length; i2++) {
    const slottedNode = childNodes[i2]["s-nr"] || void 0;
    if (slottedNode && slottedNode.isConnected) {
      result.push(slottedNode);
    }
  }
  return result;
};
function getHostSlotNodes(childNodes, hostName, slotName) {
  let i2 = 0;
  let slottedNodes = [];
  let childNode;
  for (; i2 < childNodes.length; i2++) {
    childNode = childNodes[i2];
    if (childNode["s-sr"] && (!hostName || childNode["s-hn"] === hostName) && (slotName === void 0 || getSlotName(childNode) === slotName)) {
      slottedNodes.push(childNode);
      if (typeof slotName !== "undefined") return slottedNodes;
    }
    slottedNodes = [...slottedNodes, ...getHostSlotNodes(childNode.childNodes, hostName, slotName)];
  }
  return slottedNodes;
}
var getSlotChildSiblings = (slot, slotName, includeSlot = true) => {
  const childNodes = [];
  if (includeSlot && slot["s-sr"] || !slot["s-sr"]) childNodes.push(slot);
  let node = slot;
  while (node = node.nextSibling) {
    if (getSlotName(node) === slotName && (includeSlot || !node["s-sr"])) childNodes.push(node);
  }
  return childNodes;
};
var isNodeLocatedInSlot = (nodeToRelocate, slotName) => {
  if (nodeToRelocate.nodeType === 1) {
    if (nodeToRelocate.getAttribute("slot") === null && slotName === "") {
      return true;
    }
    if (nodeToRelocate.getAttribute("slot") === slotName) {
      return true;
    }
    return false;
  }
  if (nodeToRelocate["s-sn"] === slotName) {
    return true;
  }
  return slotName === "";
};
var addSlotRelocateNode = (newChild, slotNode, prepend, position) => {
  if (newChild["s-ol"] && newChild["s-ol"].isConnected) {
    return;
  }
  const slottedNodeLocation = document.createTextNode("");
  slottedNodeLocation["s-nr"] = newChild;
  if (!slotNode["s-cr"] || !slotNode["s-cr"].parentNode) return;
  const parent = slotNode["s-cr"].parentNode;
  const appendMethod = prepend ? internalCall(parent, "prepend") : internalCall(parent, "appendChild");
  if (BUILD.hydrateClientSide && typeof position !== "undefined") {
    slottedNodeLocation["s-oo"] = position;
    const childNodes = internalCall(parent, "childNodes");
    const slotRelocateNodes = [slottedNodeLocation];
    childNodes.forEach(n => {
      if (n["s-nr"]) slotRelocateNodes.push(n);
    });
    slotRelocateNodes.sort((a, b) => {
      if (!a["s-oo"] || a["s-oo"] < (b["s-oo"] || 0)) return -1;else if (!b["s-oo"] || b["s-oo"] < a["s-oo"]) return 1;
      return 0;
    });
    slotRelocateNodes.forEach(n => appendMethod.call(parent, n));
  } else {
    appendMethod.call(parent, slottedNodeLocation);
  }
  newChild["s-ol"] = slottedNodeLocation;
  newChild["s-sh"] = slotNode["s-hn"];
};
var getSlotName = node => typeof node["s-sn"] === "string" ? node["s-sn"] : node.nodeType === 1 && node.getAttribute("slot") || void 0;
function patchSlotNode(node) {
  if (node.assignedElements || node.assignedNodes || !node["s-sr"]) return;
  const assignedFactory = elementsOnly => function (opts) {
    const toReturn = [];
    const slotName = this["s-sn"];
    if (opts == null ? void 0 : opts.flatten) {
      console.error(`
          Flattening is not supported for Stencil non-shadow slots. 
          You can use \`.childNodes\` to nested slot fallback content.
          If you have a particular use case, please open an issue on the Stencil repo.
        `);
    }
    const parent = this["s-cr"].parentElement;
    const slottedNodes = parent.__childNodes ? parent.childNodes : getSlottedChildNodes(parent.childNodes);
    slottedNodes.forEach(n => {
      if (slotName === getSlotName(n)) {
        toReturn.push(n);
      }
    });
    if (elementsOnly) {
      return toReturn.filter(n => n.nodeType === 1);
    }
    return toReturn;
  }.bind(node);
  node.assignedElements = assignedFactory(true);
  node.assignedNodes = assignedFactory(false);
}
function dispatchSlotChangeEvent(elm) {
  elm.dispatchEvent(new CustomEvent("slotchange", {
    bubbles: false,
    cancelable: false,
    composed: false
  }));
}
function findSlotFromSlottedNode(slottedNode, parentHost) {
  var _a;
  parentHost = parentHost || ((_a = slottedNode["s-ol"]) == null ? void 0 : _a.parentElement);
  if (!parentHost) return {
    slotNode: null,
    slotName: ""
  };
  const slotName = slottedNode["s-sn"] = getSlotName(slottedNode) || "";
  const childNodes = internalCall(parentHost, "childNodes");
  const slotNode = getHostSlotNodes(childNodes, parentHost.tagName, slotName)[0];
  return {
    slotNode,
    slotName
  };
}
var patchPseudoShadowDom = hostElementPrototype => {
  patchCloneNode(hostElementPrototype);
  patchSlotAppendChild(hostElementPrototype);
  patchSlotAppend(hostElementPrototype);
  patchSlotPrepend(hostElementPrototype);
  patchSlotInsertAdjacentElement(hostElementPrototype);
  patchSlotInsertAdjacentHTML(hostElementPrototype);
  patchSlotInsertAdjacentText(hostElementPrototype);
  patchInsertBefore(hostElementPrototype);
  patchTextContent(hostElementPrototype);
  patchChildSlotNodes(hostElementPrototype);
  patchSlotRemoveChild(hostElementPrototype);
};
var patchCloneNode = HostElementPrototype => {
  const orgCloneNode = HostElementPrototype.cloneNode;
  HostElementPrototype.cloneNode = function (deep) {
    const srcNode = this;
    const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;
    const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);
    if (BUILD.slot && !isShadowDom && deep) {
      let i2 = 0;
      let slotted, nonStencilNode;
      const stencilPrivates = ["s-id", "s-cr", "s-lr", "s-rc", "s-sc", "s-p", "s-cn", "s-sr", "s-sn", "s-hn", "s-ol", "s-nr", "s-si", "s-rf", "s-scs"];
      const childNodes = this.__childNodes || this.childNodes;
      for (; i2 < childNodes.length; i2++) {
        slotted = childNodes[i2]["s-nr"];
        nonStencilNode = stencilPrivates.every(privateField => !childNodes[i2][privateField]);
        if (slotted) {
          if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {
            clonedNode.__appendChild(slotted.cloneNode(true));
          } else {
            clonedNode.appendChild(slotted.cloneNode(true));
          }
        }
        if (nonStencilNode) {
          clonedNode.appendChild(childNodes[i2].cloneNode(true));
        }
      }
    }
    return clonedNode;
  };
};
var patchSlotAppendChild = HostElementPrototype => {
  HostElementPrototype.__appendChild = HostElementPrototype.appendChild;
  HostElementPrototype.appendChild = function (newChild) {
    const {
      slotName,
      slotNode
    } = findSlotFromSlottedNode(newChild, this);
    if (slotNode) {
      addSlotRelocateNode(newChild, slotNode);
      const slotChildNodes = getSlotChildSiblings(slotNode, slotName);
      const appendAfter = slotChildNodes[slotChildNodes.length - 1];
      const parent = internalCall(appendAfter, "parentNode");
      const insertedNode = internalCall(parent, "insertBefore")(newChild, appendAfter.nextSibling);
      dispatchSlotChangeEvent(slotNode);
      updateFallbackSlotVisibility(this);
      return insertedNode;
    }
    return this.__appendChild(newChild);
  };
};
var patchSlotRemoveChild = ElementPrototype => {
  ElementPrototype.__removeChild = ElementPrototype.removeChild;
  ElementPrototype.removeChild = function (toRemove) {
    if (toRemove && typeof toRemove["s-sn"] !== "undefined") {
      const childNodes = this.__childNodes || this.childNodes;
      const slotNode = getHostSlotNodes(childNodes, this.tagName, toRemove["s-sn"]);
      if (slotNode && toRemove.isConnected) {
        toRemove.remove();
        updateFallbackSlotVisibility(this);
        return;
      }
    }
    return this.__removeChild(toRemove);
  };
};
var patchSlotPrepend = HostElementPrototype => {
  HostElementPrototype.__prepend = HostElementPrototype.prepend;
  HostElementPrototype.prepend = function (...newChildren) {
    newChildren.forEach(newChild => {
      if (typeof newChild === "string") {
        newChild = this.ownerDocument.createTextNode(newChild);
      }
      const slotName = (newChild["s-sn"] = getSlotName(newChild)) || "";
      const childNodes = internalCall(this, "childNodes");
      const slotNode = getHostSlotNodes(childNodes, this.tagName, slotName)[0];
      if (slotNode) {
        addSlotRelocateNode(newChild, slotNode, true);
        const slotChildNodes = getSlotChildSiblings(slotNode, slotName);
        const appendAfter = slotChildNodes[0];
        const parent = internalCall(appendAfter, "parentNode");
        const toReturn = internalCall(parent, "insertBefore")(newChild, internalCall(appendAfter, "nextSibling"));
        dispatchSlotChangeEvent(slotNode);
        return toReturn;
      }
      if (newChild.nodeType === 1 && !!newChild.getAttribute("slot")) {
        newChild.hidden = true;
      }
      return HostElementPrototype.__prepend(newChild);
    });
  };
};
var patchSlotAppend = HostElementPrototype => {
  HostElementPrototype.__append = HostElementPrototype.append;
  HostElementPrototype.append = function (...newChildren) {
    newChildren.forEach(newChild => {
      if (typeof newChild === "string") {
        newChild = this.ownerDocument.createTextNode(newChild);
      }
      this.appendChild(newChild);
    });
  };
};
var patchSlotInsertAdjacentHTML = HostElementPrototype => {
  const originalInsertAdjacentHtml = HostElementPrototype.insertAdjacentHTML;
  HostElementPrototype.insertAdjacentHTML = function (position, text) {
    if (position !== "afterbegin" && position !== "beforeend") {
      return originalInsertAdjacentHtml.call(this, position, text);
    }
    const container = this.ownerDocument.createElement("_");
    let node;
    container.innerHTML = text;
    if (position === "afterbegin") {
      while (node = container.firstChild) {
        this.prepend(node);
      }
    } else if (position === "beforeend") {
      while (node = container.firstChild) {
        this.append(node);
      }
    }
  };
};
var patchSlotInsertAdjacentText = HostElementPrototype => {
  HostElementPrototype.insertAdjacentText = function (position, text) {
    this.insertAdjacentHTML(position, text);
  };
};
var patchInsertBefore = HostElementPrototype => {
  const eleProto = HostElementPrototype;
  if (eleProto.__insertBefore) return;
  eleProto.__insertBefore = HostElementPrototype.insertBefore;
  HostElementPrototype.insertBefore = function (newChild, currentChild) {
    const {
      slotName,
      slotNode
    } = findSlotFromSlottedNode(newChild, this);
    const slottedNodes = this.__childNodes ? this.childNodes : getSlottedChildNodes(this.childNodes);
    if (slotNode) {
      let found = false;
      slottedNodes.forEach(childNode => {
        if (childNode === currentChild || currentChild === null) {
          found = true;
          if (currentChild === null || slotName !== currentChild["s-sn"]) {
            this.appendChild(newChild);
            return;
          }
          if (slotName === currentChild["s-sn"]) {
            addSlotRelocateNode(newChild, slotNode);
            const parent = internalCall(currentChild, "parentNode");
            internalCall(parent, "insertBefore")(newChild, currentChild);
            dispatchSlotChangeEvent(slotNode);
          }
          return;
        }
      });
      if (found) return newChild;
    }
    const parentNode = currentChild == null ? void 0 : currentChild.__parentNode;
    if (parentNode && !this.isSameNode(parentNode)) {
      return this.appendChild(newChild);
    }
    return this.__insertBefore(newChild, currentChild);
  };
};
var patchSlotInsertAdjacentElement = HostElementPrototype => {
  const originalInsertAdjacentElement = HostElementPrototype.insertAdjacentElement;
  HostElementPrototype.insertAdjacentElement = function (position, element) {
    if (position !== "afterbegin" && position !== "beforeend") {
      return originalInsertAdjacentElement.call(this, position, element);
    }
    if (position === "afterbegin") {
      this.prepend(element);
      return element;
    } else if (position === "beforeend") {
      this.append(element);
      return element;
    }
    return element;
  };
};
var patchTextContent = hostElementPrototype => {
  patchHostOriginalAccessor("textContent", hostElementPrototype);
  Object.defineProperty(hostElementPrototype, "textContent", {
    get: function () {
      let text = "";
      const childNodes = this.__childNodes ? this.childNodes : getSlottedChildNodes(this.childNodes);
      childNodes.forEach(node => text += node.textContent || "");
      return text;
    },
    set: function (value) {
      const childNodes = this.__childNodes ? this.childNodes : getSlottedChildNodes(this.childNodes);
      childNodes.forEach(node => {
        if (node["s-ol"]) node["s-ol"].remove();
        node.remove();
      });
      this.insertAdjacentHTML("beforeend", value);
    }
  });
};
var patchChildSlotNodes = elm => {
  class FakeNodeList extends Array {
    item(n) {
      return this[n];
    }
  }
  patchHostOriginalAccessor("children", elm);
  Object.defineProperty(elm, "children", {
    get() {
      return this.childNodes.filter(n => n.nodeType === 1);
    }
  });
  Object.defineProperty(elm, "childElementCount", {
    get() {
      return this.children.length;
    }
  });
  patchHostOriginalAccessor("firstChild", elm);
  Object.defineProperty(elm, "firstChild", {
    get() {
      return this.childNodes[0];
    }
  });
  patchHostOriginalAccessor("lastChild", elm);
  Object.defineProperty(elm, "lastChild", {
    get() {
      return this.childNodes[this.childNodes.length - 1];
    }
  });
  patchHostOriginalAccessor("childNodes", elm);
  Object.defineProperty(elm, "childNodes", {
    get() {
      const result = new FakeNodeList();
      result.push(...getSlottedChildNodes(this.__childNodes));
      return result;
    }
  });
};
var patchSlottedNode = node => {
  if (!node || node.__nextSibling !== void 0 || !globalThis.Node) return;
  patchNextSibling(node);
  patchPreviousSibling(node);
  patchParentNode(node);
  if (node.nodeType === Node.ELEMENT_NODE) {
    patchNextElementSibling(node);
    patchPreviousElementSibling(node);
  }
};
var patchNextSibling = node => {
  if (!node || node.__nextSibling) return;
  patchHostOriginalAccessor("nextSibling", node);
  Object.defineProperty(node, "nextSibling", {
    get: function () {
      var _a;
      const parentNodes = (_a = this["s-ol"]) == null ? void 0 : _a.parentNode.childNodes;
      const index = parentNodes == null ? void 0 : parentNodes.indexOf(this);
      if (parentNodes && index > -1) {
        return parentNodes[index + 1];
      }
      return this.__nextSibling;
    }
  });
};
var patchNextElementSibling = element => {
  if (!element || element.__nextElementSibling) return;
  patchHostOriginalAccessor("nextElementSibling", element);
  Object.defineProperty(element, "nextElementSibling", {
    get: function () {
      var _a;
      const parentEles = (_a = this["s-ol"]) == null ? void 0 : _a.parentNode.children;
      const index = parentEles == null ? void 0 : parentEles.indexOf(this);
      if (parentEles && index > -1) {
        return parentEles[index + 1];
      }
      return this.__nextElementSibling;
    }
  });
};
var patchPreviousSibling = node => {
  if (!node || node.__previousSibling) return;
  patchHostOriginalAccessor("previousSibling", node);
  Object.defineProperty(node, "previousSibling", {
    get: function () {
      var _a;
      const parentNodes = (_a = this["s-ol"]) == null ? void 0 : _a.parentNode.childNodes;
      const index = parentNodes == null ? void 0 : parentNodes.indexOf(this);
      if (parentNodes && index > -1) {
        return parentNodes[index - 1];
      }
      return this.__previousSibling;
    }
  });
};
var patchPreviousElementSibling = element => {
  if (!element || element.__previousElementSibling) return;
  patchHostOriginalAccessor("previousElementSibling", element);
  Object.defineProperty(element, "previousElementSibling", {
    get: function () {
      var _a;
      const parentNodes = (_a = this["s-ol"]) == null ? void 0 : _a.parentNode.children;
      const index = parentNodes == null ? void 0 : parentNodes.indexOf(this);
      if (parentNodes && index > -1) {
        return parentNodes[index - 1];
      }
      return this.__previousElementSibling;
    }
  });
};
var patchParentNode = node => {
  if (!node || node.__parentNode) return;
  patchHostOriginalAccessor("parentNode", node);
  Object.defineProperty(node, "parentNode", {
    get: function () {
      var _a;
      return ((_a = this["s-ol"]) == null ? void 0 : _a.parentNode) || this.__parentNode;
    },
    set: function (value) {
      this.__parentNode = value;
    }
  });
};
var validElementPatches = ["children", "nextElementSibling", "previousElementSibling"];
var validNodesPatches = ["childNodes", "firstChild", "lastChild", "nextSibling", "previousSibling", "textContent", "parentNode"];
function patchHostOriginalAccessor(accessorName, node) {
  let accessor;
  if (validElementPatches.includes(accessorName)) {
    accessor = Object.getOwnPropertyDescriptor(Element.prototype, accessorName);
  } else if (validNodesPatches.includes(accessorName)) {
    accessor = Object.getOwnPropertyDescriptor(Node.prototype, accessorName);
  }
  if (!accessor) {
    accessor = Object.getOwnPropertyDescriptor(node, accessorName);
  }
  if (accessor) Object.defineProperty(node, "__" + accessorName, accessor);
}
function internalCall(node, method) {
  if ("__" + method in node) {
    const toReturn = node["__" + method];
    if (typeof toReturn !== "function") return toReturn;
    return toReturn.bind(node);
  } else {
    if (typeof node[method] !== "function") return node[method];
    return node[method].bind(node);
  }
}
var i = 0;
var createTime = (fnName, tagName = "") => {
  if (BUILD.profile && performance.mark) {
    const key = `st:${fnName}:${tagName}:${i++}`;
    performance.mark(key);
    return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);
  } else {
    return () => {
      return;
    };
  }
};
var uniqueTime = (key, measureText) => {
  if (BUILD.profile && performance.mark) {
    if (performance.getEntriesByName(key, "mark").length === 0) {
      performance.mark(key);
    }
    return () => {
      if (performance.getEntriesByName(measureText, "measure").length === 0) {
        performance.measure(measureText, key);
      }
    };
  } else {
    return () => {
      return;
    };
  }
};
var inspect = ref => {
  const hostRef = getHostRef(ref);
  if (!hostRef) {
    return void 0;
  }
  const flags = hostRef.$flags$;
  const hostElement = hostRef.$hostElement$;
  return {
    renderCount: hostRef.$renderCount$,
    flags: {
      hasRendered: !!(flags & 2),
      hasConnected: !!(flags & 1),
      isWaitingForChildren: !!(flags & 4),
      isConstructingInstance: !!(flags & 8),
      isQueuedForUpdate: !!(flags & 16),
      hasInitializedComponent: !!(flags & 32),
      hasLoadedComponent: !!(flags & 64),
      isWatchReady: !!(flags & 128),
      isListenReady: !!(flags & 256),
      needsRerender: !!(flags & 512)
    },
    instanceValues: hostRef.$instanceValues$,
    ancestorComponent: hostRef.$ancestorComponent$,
    hostElement,
    lazyInstance: hostRef.$lazyInstance$,
    vnode: hostRef.$vnode$,
    modeName: hostRef.$modeName$,
    onReadyPromise: hostRef.$onReadyPromise$,
    onReadyResolve: hostRef.$onReadyResolve$,
    onInstancePromise: hostRef.$onInstancePromise$,
    onInstanceResolve: hostRef.$onInstanceResolve$,
    onRenderResolve: hostRef.$onRenderResolve$,
    queuedListeners: hostRef.$queuedListeners$,
    rmListeners: hostRef.$rmListeners$,
    ["s-id"]: hostElement["s-id"],
    ["s-cr"]: hostElement["s-cr"],
    ["s-lr"]: hostElement["s-lr"],
    ["s-p"]: hostElement["s-p"],
    ["s-rc"]: hostElement["s-rc"],
    ["s-sc"]: hostElement["s-sc"]
  };
};
var installDevTools = () => {
  if (BUILD.devTools) {
    const stencil = win.stencil = win.stencil || {};
    const originalInspect = stencil.inspect;
    stencil.inspect = ref => {
      let result = inspect(ref);
      if (!result && typeof originalInspect === "function") {
        result = originalInspect(ref);
      }
      return result;
    };
  }
};
var h = (nodeName, vnodeData, ...children) => {
  let child = null;
  let key = null;
  let slotName = null;
  let simple = false;
  let lastSimple = false;
  const vNodeChildren = [];
  const walk = c => {
    for (let i2 = 0; i2 < c.length; i2++) {
      child = c[i2];
      if (Array.isArray(child)) {
        walk(child);
      } else if (child != null && typeof child !== "boolean") {
        if (simple = typeof nodeName !== "function" && !isComplexType(child)) {
          child = String(child);
        } else if (BUILD.isDev && typeof nodeName !== "function" && child.$flags$ === void 0) {
          consoleDevError(`vNode passed as children has unexpected type.
Make sure it's using the correct h() function.
Empty objects can also be the cause, look for JSX comments that became objects.`);
        }
        if (simple && lastSimple) {
          vNodeChildren[vNodeChildren.length - 1].$text$ += child;
        } else {
          vNodeChildren.push(simple ? newVNode(null, child) : child);
        }
        lastSimple = simple;
      }
    }
  };
  walk(children);
  if (vnodeData) {
    if (BUILD.isDev && nodeName === "input") {
      validateInputProperties(vnodeData);
    }
    if (BUILD.vdomKey && vnodeData.key) {
      key = vnodeData.key;
    }
    if (BUILD.slotRelocation && vnodeData.name) {
      slotName = vnodeData.name;
    }
    if (BUILD.vdomClass) {
      const classData = vnodeData.className || vnodeData.class;
      if (classData) {
        vnodeData.class = typeof classData !== "object" ? classData : Object.keys(classData).filter(k => classData[k]).join(" ");
      }
    }
  }
  if (BUILD.isDev && vNodeChildren.some(isHost)) {
    consoleDevError(`The <Host> must be the single root component. Make sure:
- You are NOT using hostData() and <Host> in the same component.
- <Host> is used once, and it's the single root component of the render() function.`);
  }
  if (BUILD.vdomFunctional && typeof nodeName === "function") {
    return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);
  }
  const vnode = newVNode(nodeName, null);
  vnode.$attrs$ = vnodeData;
  if (vNodeChildren.length > 0) {
    vnode.$children$ = vNodeChildren;
  }
  if (BUILD.vdomKey) {
    vnode.$key$ = key;
  }
  if (BUILD.slotRelocation) {
    vnode.$name$ = slotName;
  }
  return vnode;
};
var newVNode = (tag, text) => {
  const vnode = {
    $flags$: 0,
    $tag$: tag,
    $text$: text,
    $elm$: null,
    $children$: null
  };
  if (BUILD.vdomAttribute) {
    vnode.$attrs$ = null;
  }
  if (BUILD.vdomKey) {
    vnode.$key$ = null;
  }
  if (BUILD.slotRelocation) {
    vnode.$name$ = null;
  }
  return vnode;
};
var Host = {};
var isHost = node => node && node.$tag$ === Host;
var vdomFnUtils = {
  forEach: (children, cb) => children.map(convertToPublic).forEach(cb),
  map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate)
};
var convertToPublic = node => ({
  vattrs: node.$attrs$,
  vchildren: node.$children$,
  vkey: node.$key$,
  vname: node.$name$,
  vtag: node.$tag$,
  vtext: node.$text$
});
var convertToPrivate = node => {
  if (typeof node.vtag === "function") {
    const vnodeData = {
      ...node.vattrs
    };
    if (node.vkey) {
      vnodeData.key = node.vkey;
    }
    if (node.vname) {
      vnodeData.name = node.vname;
    }
    return h(node.vtag, vnodeData, ...(node.vchildren || []));
  }
  const vnode = newVNode(node.vtag, node.vtext);
  vnode.$attrs$ = node.vattrs;
  vnode.$children$ = node.vchildren;
  vnode.$key$ = node.vkey;
  vnode.$name$ = node.vname;
  return vnode;
};
var validateInputProperties = inputElm => {
  const props = Object.keys(inputElm);
  const value = props.indexOf("value");
  if (value === -1) {
    return;
  }
  const typeIndex = props.indexOf("type");
  const minIndex = props.indexOf("min");
  const maxIndex = props.indexOf("max");
  const stepIndex = props.indexOf("step");
  if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {
    consoleDevWarn(`The "value" prop of <input> should be set after "min", "max", "type" and "step"`);
  }
};
var initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {
  const endHydrate = createTime("hydrateClient", tagName);
  const shadowRoot = hostElm.shadowRoot;
  const childRenderNodes = [];
  const slotNodes = [];
  const slottedNodes = [];
  const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;
  const vnode = newVNode(tagName, null);
  vnode.$elm$ = hostElm;
  let scopeId2;
  if (BUILD.scoped) {
    const cmpMeta = hostRef.$cmpMeta$;
    if (cmpMeta && cmpMeta.$flags$ & 10 && hostElm["s-sc"]) {
      scopeId2 = hostElm["s-sc"];
      hostElm.classList.add(scopeId2 + "-h");
    } else if (hostElm["s-sc"]) {
      delete hostElm["s-sc"];
    }
  }
  if (win.document && (!plt.$orgLocNodes$ || !plt.$orgLocNodes$.size)) {
    initializeDocumentHydrate(win.document.body, plt.$orgLocNodes$ = new Map());
  }
  hostElm[HYDRATE_ID] = hostId;
  hostElm.removeAttribute(HYDRATE_ID);
  hostRef.$vnode$ = clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId, slottedNodes);
  let crIndex = 0;
  const crLength = childRenderNodes.length;
  let childRenderNode;
  for (crIndex; crIndex < crLength; crIndex++) {
    childRenderNode = childRenderNodes[crIndex];
    const orgLocationId = childRenderNode.$hostId$ + "." + childRenderNode.$nodeId$;
    const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);
    const node = childRenderNode.$elm$;
    if (!shadowRoot) {
      node["s-hn"] = tagName.toUpperCase();
      if (childRenderNode.$tag$ === "slot") {
        node["s-cr"] = hostElm["s-cr"];
      }
    }
    if (childRenderNode.$tag$ === "slot") {
      childRenderNode.$name$ = childRenderNode.$elm$["s-sn"] || childRenderNode.$elm$["name"] || null;
      if (childRenderNode.$children$) {
        childRenderNode.$flags$ |= 2;
        if (!childRenderNode.$elm$.childNodes.length) {
          childRenderNode.$children$.forEach(c => {
            childRenderNode.$elm$.appendChild(c.$elm$);
          });
        }
      } else {
        childRenderNode.$flags$ |= 1;
      }
    }
    if (orgLocationNode && orgLocationNode.isConnected) {
      if (shadowRoot && orgLocationNode["s-en"] === "") {
        orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);
      }
      orgLocationNode.parentNode.removeChild(orgLocationNode);
      if (!shadowRoot) {
        node["s-oo"] = parseInt(childRenderNode.$nodeId$);
      }
    }
    plt.$orgLocNodes$.delete(orgLocationId);
  }
  const hosts = [];
  const snLen = slottedNodes.length;
  let snIndex = 0;
  let slotGroup;
  let snGroupIdx;
  let snGroupLen;
  let slottedItem;
  for (snIndex; snIndex < snLen; snIndex++) {
    slotGroup = slottedNodes[snIndex];
    if (!slotGroup || !slotGroup.length) continue;
    snGroupLen = slotGroup.length;
    snGroupIdx = 0;
    for (snGroupIdx; snGroupIdx < snGroupLen; snGroupIdx++) {
      slottedItem = slotGroup[snGroupIdx];
      if (!hosts[slottedItem.hostId]) {
        hosts[slottedItem.hostId] = plt.$orgLocNodes$.get(slottedItem.hostId);
      }
      if (!hosts[slottedItem.hostId]) continue;
      const hostEle = hosts[slottedItem.hostId];
      if (!hostEle.shadowRoot || !shadowRoot) {
        slottedItem.slot["s-cr"] = hostEle["s-cr"];
        if (!slottedItem.slot["s-cr"] && hostEle.shadowRoot) {
          slottedItem.slot["s-cr"] = hostEle;
        } else {
          slottedItem.slot["s-cr"] = (hostEle.__childNodes || hostEle.childNodes)[0];
        }
        addSlotRelocateNode(slottedItem.node, slottedItem.slot, false, slottedItem.node["s-oo"]);
        if (BUILD.experimentalSlotFixes) {
          patchSlottedNode(slottedItem.node);
        }
      }
      if (hostEle.shadowRoot && slottedItem.node.parentElement !== hostEle) {
        hostEle.appendChild(slottedItem.node);
      }
    }
  }
  if (BUILD.scoped && scopeId2 && slotNodes.length) {
    slotNodes.forEach(slot => {
      slot.$elm$.parentElement.classList.add(scopeId2 + "-s");
    });
  }
  if (BUILD.shadowDom && shadowRoot && !shadowRoot.childNodes.length) {
    let rnIdex = 0;
    const rnLen = shadowRootNodes.length;
    if (rnLen) {
      for (rnIdex; rnIdex < rnLen; rnIdex++) {
        shadowRoot.appendChild(shadowRootNodes[rnIdex]);
      }
      Array.from(hostElm.childNodes).forEach(node => {
        if (typeof node["s-sn"] !== "string") {
          if (node.nodeType === 1 && node.slot && node.hidden) {
            node.removeAttribute("hidden");
          } else if (node.nodeType === 8 || node.nodeType === 3 && !node.wholeText.trim()) {
            node.parentNode.removeChild(node);
          }
        }
      });
    }
  }
  plt.$orgLocNodes$.delete(hostElm["s-id"]);
  hostRef.$hostElement$ = hostElm;
  endHydrate();
};
var clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId, slottedNodes = []) => {
  let childNodeType;
  let childIdSplt;
  let childVNode;
  let i2;
  const scopeId2 = hostElm["s-sc"];
  if (node.nodeType === 1) {
    childNodeType = node.getAttribute(HYDRATE_CHILD_ID);
    if (childNodeType) {
      childIdSplt = childNodeType.split(".");
      if (childIdSplt[0] === hostId || childIdSplt[0] === "0") {
        childVNode = createSimpleVNode({
          $flags$: 0,
          $hostId$: childIdSplt[0],
          $nodeId$: childIdSplt[1],
          $depth$: childIdSplt[2],
          $index$: childIdSplt[3],
          $tag$: node.tagName.toLowerCase(),
          $elm$: node,
          $attrs$: {
            class: node.className || ""
          }
        });
        childRenderNodes.push(childVNode);
        node.removeAttribute(HYDRATE_CHILD_ID);
        if (!parentVNode.$children$) {
          parentVNode.$children$ = [];
        }
        if (BUILD.scoped && scopeId2) {
          node["s-si"] = scopeId2;
          childVNode.$attrs$.class += " " + scopeId2;
        }
        const slotName = childVNode.$elm$.getAttribute("s-sn");
        if (typeof slotName === "string") {
          if (childVNode.$tag$ === "slot-fb") {
            addSlot(slotName, childIdSplt[2], childVNode, node, parentVNode, childRenderNodes, slotNodes, shadowRootNodes, slottedNodes);
            if (BUILD.scoped && scopeId2) {
              node.classList.add(scopeId2);
            }
          }
          childVNode.$elm$["s-sn"] = slotName;
          childVNode.$elm$.removeAttribute("s-sn");
        }
        if (childVNode.$index$ !== void 0) {
          parentVNode.$children$[childVNode.$index$] = childVNode;
        }
        parentVNode = childVNode;
        if (shadowRootNodes && childVNode.$depth$ === "0") {
          shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
        }
      }
    }
    if (node.shadowRoot) {
      for (i2 = node.shadowRoot.childNodes.length - 1; i2 >= 0; i2--) {
        clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i2], hostId, slottedNodes);
      }
    }
    const nonShadowNodes = node.__childNodes || node.childNodes;
    for (i2 = nonShadowNodes.length - 1; i2 >= 0; i2--) {
      clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, nonShadowNodes[i2], hostId, slottedNodes);
    }
  } else if (node.nodeType === 8) {
    childIdSplt = node.nodeValue.split(".");
    if (childIdSplt[1] === hostId || childIdSplt[1] === "0") {
      childNodeType = childIdSplt[0];
      childVNode = createSimpleVNode({
        $hostId$: childIdSplt[1],
        $nodeId$: childIdSplt[2],
        $depth$: childIdSplt[3],
        $index$: childIdSplt[4] || "0",
        $elm$: node,
        $attrs$: null,
        $children$: null,
        $key$: null,
        $name$: null,
        $tag$: null,
        $text$: null
      });
      if (childNodeType === TEXT_NODE_ID) {
        childVNode.$elm$ = findCorrespondingNode(node, 3);
        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3) {
          childVNode.$text$ = childVNode.$elm$.textContent;
          childRenderNodes.push(childVNode);
          node.remove();
          if (hostId === childVNode.$hostId$) {
            if (!parentVNode.$children$) {
              parentVNode.$children$ = [];
            }
            parentVNode.$children$[childVNode.$index$] = childVNode;
          }
          if (shadowRootNodes && childVNode.$depth$ === "0") {
            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
          }
        }
      } else if (childNodeType === COMMENT_NODE_ID) {
        childVNode.$elm$ = findCorrespondingNode(node, 8);
        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 8) {
          childRenderNodes.push(childVNode);
          node.remove();
        }
      } else if (childVNode.$hostId$ === hostId) {
        if (childNodeType === SLOT_NODE_ID) {
          const slotName = node["s-sn"] = childIdSplt[5] || "";
          addSlot(slotName, childIdSplt[2], childVNode, node, parentVNode, childRenderNodes, slotNodes, shadowRootNodes, slottedNodes);
        } else if (childNodeType === CONTENT_REF_ID) {
          if (BUILD.shadowDom && shadowRootNodes) {
            node.remove();
          } else if (BUILD.slotRelocation) {
            hostElm["s-cr"] = node;
            node["s-cn"] = true;
          }
        }
      }
    }
  } else if (parentVNode && parentVNode.$tag$ === "style") {
    const vnode = newVNode(null, node.textContent);
    vnode.$elm$ = node;
    vnode.$index$ = "0";
    parentVNode.$children$ = [vnode];
  } else {
    if (node.nodeType === 3 && !node.wholeText.trim()) {
      node.remove();
    }
  }
  return parentVNode;
};
var initializeDocumentHydrate = (node, orgLocNodes) => {
  if (node.nodeType === 1) {
    const componentId = node[HYDRATE_ID] || node.getAttribute(HYDRATE_ID);
    if (componentId) {
      orgLocNodes.set(componentId, node);
    }
    let i2 = 0;
    if (node.shadowRoot) {
      for (; i2 < node.shadowRoot.childNodes.length; i2++) {
        initializeDocumentHydrate(node.shadowRoot.childNodes[i2], orgLocNodes);
      }
    }
    const nonShadowNodes = node.__childNodes || node.childNodes;
    for (i2 = 0; i2 < nonShadowNodes.length; i2++) {
      initializeDocumentHydrate(nonShadowNodes[i2], orgLocNodes);
    }
  } else if (node.nodeType === 8) {
    const childIdSplt = node.nodeValue.split(".");
    if (childIdSplt[0] === ORG_LOCATION_ID) {
      orgLocNodes.set(childIdSplt[1] + "." + childIdSplt[2], node);
      node.nodeValue = "";
      node["s-en"] = childIdSplt[3];
    }
  }
};
var createSimpleVNode = vnode => {
  const defaultVNode = {
    $flags$: 0,
    $hostId$: null,
    $nodeId$: null,
    $depth$: null,
    $index$: "0",
    $elm$: null,
    $attrs$: null,
    $children$: null,
    $key$: null,
    $name$: null,
    $tag$: null,
    $text$: null
  };
  return {
    ...defaultVNode,
    ...vnode
  };
};
function addSlot(slotName, slotId, childVNode, node, parentVNode, childRenderNodes, slotNodes, shadowRootNodes, slottedNodes) {
  node["s-sr"] = true;
  childVNode.$name$ = slotName || null;
  childVNode.$tag$ = "slot";
  const parentNodeId = (parentVNode == null ? void 0 : parentVNode.$elm$) ? parentVNode.$elm$["s-id"] || parentVNode.$elm$.getAttribute("s-id") : "";
  if (BUILD.shadowDom && shadowRootNodes && win.document) {
    const slot = childVNode.$elm$ = win.document.createElement(childVNode.$tag$);
    if (childVNode.$name$) {
      childVNode.$elm$.setAttribute("name", slotName);
    }
    if (parentNodeId && parentNodeId !== childVNode.$hostId$) {
      parentVNode.$elm$.insertBefore(slot, parentVNode.$elm$.children[0]);
    } else {
      node.parentNode.insertBefore(childVNode.$elm$, node);
    }
    addSlottedNodes(slottedNodes, slotId, slotName, node, childVNode.$hostId$);
    node.remove();
    if (childVNode.$depth$ === "0") {
      shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
    }
  } else {
    const slot = childVNode.$elm$;
    const shouldMove = parentNodeId && parentNodeId !== childVNode.$hostId$ && parentVNode.$elm$.shadowRoot;
    addSlottedNodes(slottedNodes, slotId, slotName, node, shouldMove ? parentNodeId : childVNode.$hostId$);
    patchSlotNode(node);
    if (shouldMove) {
      parentVNode.$elm$.insertBefore(slot, parentVNode.$elm$.children[0]);
    }
    childRenderNodes.push(childVNode);
  }
  slotNodes.push(childVNode);
  if (!parentVNode.$children$) {
    parentVNode.$children$ = [];
  }
  parentVNode.$children$[childVNode.$index$] = childVNode;
}
var addSlottedNodes = (slottedNodes, slotNodeId, slotName, slotNode, hostId) => {
  let slottedNode = slotNode.nextSibling;
  slottedNodes[slotNodeId] = slottedNodes[slotNodeId] || [];
  while (slottedNode && ((slottedNode["getAttribute"] && slottedNode.getAttribute("slot") || slottedNode["s-sn"]) === slotName || slotName === "" && !slottedNode["s-sn"] && (slottedNode.nodeType === 8 && slottedNode.nodeValue.indexOf(".") !== 1 || slottedNode.nodeType === 3))) {
    slottedNode["s-sn"] = slotName;
    slottedNodes[slotNodeId].push({
      slot: slotNode,
      node: slottedNode,
      hostId
    });
    slottedNode = slottedNode.nextSibling;
  }
};
var findCorrespondingNode = (node, type) => {
  let sibling = node;
  do {
    sibling = sibling.nextSibling;
  } while (sibling && (sibling.nodeType !== type || !sibling.nodeValue));
  return sibling;
};
var safeSelector = selector => {
  const placeholders = [];
  let index = 0;
  selector = selector.replace(/(\[[^\]]*\])/g, (_, keep) => {
    const replaceBy = `__ph-${index}__`;
    placeholders.push(keep);
    index++;
    return replaceBy;
  });
  const content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, (_, pseudo, exp) => {
    const replaceBy = `__ph-${index}__`;
    placeholders.push(exp);
    index++;
    return pseudo + replaceBy;
  });
  const ss = {
    content,
    placeholders
  };
  return ss;
};
var restoreSafeSelector = (placeholders, content) => {
  return content.replace(/__ph-(\d+)__/g, (_, index) => placeholders[+index]);
};
var _polyfillHost = "-shadowcsshost";
var _polyfillSlotted = "-shadowcssslotted";
var _polyfillHostContext = "-shadowcsscontext";
var _parenSuffix = ")(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))?([^,{]*)";
var _cssColonHostRe = new RegExp("(" + _polyfillHost + _parenSuffix, "gim");
var _cssColonHostContextRe = new RegExp("(" + _polyfillHostContext + _parenSuffix, "gim");
var _cssColonSlottedRe = new RegExp("(" + _polyfillSlotted + _parenSuffix, "gim");
var _polyfillHostNoCombinator = _polyfillHost + "-no-combinator";
var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
var _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];
var _selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$";
var _polyfillHostRe = /-shadowcsshost/gim;
var createSupportsRuleRe = selector => new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${selector}\\b)`, "gim");
var _colonSlottedRe = createSupportsRuleRe("::slotted");
var _colonHostRe = createSupportsRuleRe(":host");
var _colonHostContextRe = createSupportsRuleRe(":host-context");
var _commentRe = /\/\*\s*[\s\S]*?\*\//g;
var stripComments = input => {
  return input.replace(_commentRe, "");
};
var _commentWithHashRe = /\/\*\s*#\s*source(Mapping)?URL=[\s\S]+?\*\//g;
var extractCommentsWithHash = input => {
  return input.match(_commentWithHashRe) || [];
};
var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
var _curlyRe = /([{}])/g;
var _selectorPartsRe = /(^.*?[^\\])??((:+)(.*)|$)/;
var OPEN_CURLY = "{";
var CLOSE_CURLY = "}";
var BLOCK_PLACEHOLDER = "%BLOCK%";
var processRules = (input, ruleCallback) => {
  const inputWithEscapedBlocks = escapeBlocks(input);
  let nextBlockIndex = 0;
  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {
    const selector = m[2];
    let content = "";
    let suffix = m[4];
    let contentPrefix = "";
    if (suffix && suffix.startsWith("{" + BLOCK_PLACEHOLDER)) {
      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
      contentPrefix = "{";
    }
    const cssRule = {
      selector,
      content
    };
    const rule = ruleCallback(cssRule);
    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;
  });
};
var escapeBlocks = input => {
  const inputParts = input.split(_curlyRe);
  const resultParts = [];
  const escapedBlocks = [];
  let bracketCount = 0;
  let currentBlockParts = [];
  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {
    const part = inputParts[partIndex];
    if (part === CLOSE_CURLY) {
      bracketCount--;
    }
    if (bracketCount > 0) {
      currentBlockParts.push(part);
    } else {
      if (currentBlockParts.length > 0) {
        escapedBlocks.push(currentBlockParts.join(""));
        resultParts.push(BLOCK_PLACEHOLDER);
        currentBlockParts = [];
      }
      resultParts.push(part);
    }
    if (part === OPEN_CURLY) {
      bracketCount++;
    }
  }
  if (currentBlockParts.length > 0) {
    escapedBlocks.push(currentBlockParts.join(""));
    resultParts.push(BLOCK_PLACEHOLDER);
  }
  const strEscapedBlocks = {
    escapedString: resultParts.join(""),
    blocks: escapedBlocks
  };
  return strEscapedBlocks;
};
var insertPolyfillHostInCssText = cssText => {
  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);
  return cssText;
};
var convertColonRule = (cssText, regExp, partReplacer) => {
  return cssText.replace(regExp, (...m) => {
    if (m[2]) {
      const parts = m[2].split(",");
      const r = [];
      for (let i2 = 0; i2 < parts.length; i2++) {
        const p = parts[i2].trim();
        if (!p) break;
        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
      }
      return r.join(",");
    } else {
      return _polyfillHostNoCombinator + m[3];
    }
  });
};
var colonHostPartReplacer = (host, part, suffix) => {
  return host + part.replace(_polyfillHost, "") + suffix;
};
var convertColonHost = cssText => {
  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);
};
var colonHostContextPartReplacer = (host, part, suffix) => {
  if (part.indexOf(_polyfillHost) > -1) {
    return colonHostPartReplacer(host, part, suffix);
  } else {
    return host + part + suffix + ", " + part + " " + host + suffix;
  }
};
var convertColonSlotted = (cssText, slotScopeId) => {
  const slotClass = "." + slotScopeId + " > ";
  const selectors = [];
  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {
    if (m[2]) {
      const compound = m[2].trim();
      const suffix = m[3];
      const slottedSelector = slotClass + compound + suffix;
      let prefixSelector = "";
      for (let i2 = m[4] - 1; i2 >= 0; i2--) {
        const char = m[5][i2];
        if (char === "}" || char === ",") {
          break;
        }
        prefixSelector = char + prefixSelector;
      }
      const orgSelector = (prefixSelector + slottedSelector).trim();
      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();
      if (orgSelector !== addedSelector) {
        const updatedSelector = `${addedSelector}, ${orgSelector}`;
        selectors.push({
          orgSelector,
          updatedSelector
        });
      }
      return slottedSelector;
    } else {
      return _polyfillHostNoCombinator + m[3];
    }
  });
  return {
    selectors,
    cssText
  };
};
var convertColonHostContext = cssText => {
  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);
};
var convertShadowDOMSelectors = cssText => {
  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, " "), cssText);
};
var makeScopeMatcher = scopeSelector2 => {
  const lre = /\[/g;
  const rre = /\]/g;
  scopeSelector2 = scopeSelector2.replace(lre, "\\[").replace(rre, "\\]");
  return new RegExp("^(" + scopeSelector2 + ")" + _selectorReSuffix, "m");
};
var selectorNeedsScoping = (selector, scopeSelector2) => {
  const re = makeScopeMatcher(scopeSelector2);
  return !re.test(selector);
};
var injectScopingSelector = (selector, scopingSelector) => {
  return selector.replace(_selectorPartsRe, (_, before = "", _colonGroup, colon = "", after = "") => {
    return before + scopingSelector + colon + after;
  });
};
var applySimpleSelectorScope = (selector, scopeSelector2, hostSelector) => {
  _polyfillHostRe.lastIndex = 0;
  if (_polyfillHostRe.test(selector)) {
    const replaceBy = `.${hostSelector}`;
    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector2) => injectScopingSelector(selector2, replaceBy)).replace(_polyfillHostRe, replaceBy + " ");
  }
  return scopeSelector2 + " " + selector;
};
var applyStrictSelectorScope = (selector, scopeSelector2, hostSelector) => {
  const isRe = /\[is=([^\]]*)\]/g;
  scopeSelector2 = scopeSelector2.replace(isRe, (_, ...parts) => parts[0]);
  const className = "." + scopeSelector2;
  const _scopeSelectorPart = p => {
    let scopedP = p.trim();
    if (!scopedP) {
      return "";
    }
    if (p.indexOf(_polyfillHostNoCombinator) > -1) {
      scopedP = applySimpleSelectorScope(p, scopeSelector2, hostSelector);
    } else {
      const t = p.replace(_polyfillHostRe, "");
      if (t.length > 0) {
        scopedP = injectScopingSelector(t, className);
      }
    }
    return scopedP;
  };
  const safeContent = safeSelector(selector);
  selector = safeContent.content;
  let scopedSelector = "";
  let startIndex = 0;
  let res;
  const sep = /( |>|\+|~(?!=))\s*/g;
  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;
  let shouldScope = !hasHost;
  while ((res = sep.exec(selector)) !== null) {
    const separator = res[1];
    const part2 = selector.slice(startIndex, res.index).trim();
    shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;
    const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;
    scopedSelector += `${scopedPart} ${separator} `;
    startIndex = sep.lastIndex;
  }
  const part = selector.substring(startIndex);
  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;
  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;
  return restoreSafeSelector(safeContent.placeholders, scopedSelector);
};
var scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {
  return selector.split(",").map(shallowPart => {
    if (slotSelector && shallowPart.indexOf("." + slotSelector) > -1) {
      return shallowPart.trim();
    }
    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {
      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();
    } else {
      return shallowPart.trim();
    }
  }).join(", ");
};
var scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {
  return processRules(cssText, rule => {
    let selector = rule.selector;
    let content = rule.content;
    if (rule.selector[0] !== "@") {
      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);
    } else if (rule.selector.startsWith("@media") || rule.selector.startsWith("@supports") || rule.selector.startsWith("@page") || rule.selector.startsWith("@document")) {
      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector);
    }
    const cssRule = {
      selector: selector.replace(/\s{2,}/g, " ").trim(),
      content
    };
    return cssRule;
  });
};
var scopeCssText = (cssText, scopeId2, hostScopeId, slotScopeId, commentOriginalSelector) => {
  cssText = insertPolyfillHostInCssText(cssText);
  cssText = convertColonHost(cssText);
  cssText = convertColonHostContext(cssText);
  const slotted = convertColonSlotted(cssText, slotScopeId);
  cssText = slotted.cssText;
  cssText = convertShadowDOMSelectors(cssText);
  if (scopeId2) {
    cssText = scopeSelectors(cssText, scopeId2, hostScopeId, slotScopeId, commentOriginalSelector);
  }
  cssText = replaceShadowCssHost(cssText, hostScopeId);
  cssText = cssText.replace(/>\s*\*\s+([^{, ]+)/gm, " $1 ");
  return {
    cssText: cssText.trim(),
    slottedSelectors: slotted.selectors.map(ref => ({
      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),
      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)
    }))
  };
};
var replaceShadowCssHost = (cssText, hostScopeId) => {
  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);
};
var scopeCss = (cssText, scopeId2, commentOriginalSelector) => {
  const hostScopeId = scopeId2 + "-h";
  const slotScopeId = scopeId2 + "-s";
  const commentsWithHash = extractCommentsWithHash(cssText);
  cssText = stripComments(cssText);
  const orgSelectors = [];
  if (commentOriginalSelector) {
    const processCommentedSelector = rule => {
      const placeholder = `/*!@___${orgSelectors.length}___*/`;
      const comment = `/*!@${rule.selector}*/`;
      orgSelectors.push({
        placeholder,
        comment
      });
      rule.selector = placeholder + rule.selector;
      return rule;
    };
    cssText = processRules(cssText, rule => {
      if (rule.selector[0] !== "@") {
        return processCommentedSelector(rule);
      } else if (rule.selector.startsWith("@media") || rule.selector.startsWith("@supports") || rule.selector.startsWith("@page") || rule.selector.startsWith("@document")) {
        rule.content = processRules(rule.content, processCommentedSelector);
        return rule;
      }
      return rule;
    });
  }
  const scoped = scopeCssText(cssText, scopeId2, hostScopeId, slotScopeId, commentOriginalSelector);
  cssText = [scoped.cssText, ...commentsWithHash].join("\n");
  if (commentOriginalSelector) {
    orgSelectors.forEach(({
      placeholder,
      comment
    }) => {
      cssText = cssText.replace(placeholder, comment);
    });
  }
  scoped.slottedSelectors.forEach(slottedSelector => {
    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), "g");
    cssText = cssText.replace(regex, slottedSelector.updatedSelector);
  });
  return cssText;
};
var computeMode = elm => modeResolutionChain.map(h2 => h2(elm)).find(m => !!m);
var setMode = handler => modeResolutionChain.push(handler);
var getMode = ref => getHostRef(ref).$modeName$;
var parsePropertyValue = (propValue, propType) => {
  if (propValue != null && !isComplexType(propValue)) {
    if (BUILD.propBoolean && propType & 4) {
      return propValue === "false" ? false : propValue === "" || !!propValue;
    }
    if (BUILD.propNumber && propType & 2) {
      return parseFloat(propValue);
    }
    if (BUILD.propString && propType & 1) {
      return String(propValue);
    }
    return propValue;
  }
  return propValue;
};
var getElement = ref => BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref;
var createEvent = (ref, name, flags) => {
  const elm = getElement(ref);
  return {
    emit: detail => {
      if (BUILD.isDev && !elm.isConnected) {
        consoleDevWarn(`The "${name}" event was emitted, but the dispatcher node is no longer connected to the dom.`);
      }
      return emitEvent(elm, name, {
        bubbles: !!(flags & 4),
        composed: !!(flags & 2),
        cancelable: !!(flags & 1),
        detail
      });
    }
  };
};
var emitEvent = (elm, name, opts) => {
  const ev = plt.ce(name, opts);
  elm.dispatchEvent(ev);
  return ev;
};
var rootAppliedStyles = new WeakMap();
var registerStyle = (scopeId2, cssText, allowCS) => {
  let style = styles.get(scopeId2);
  if (supportsConstructableStylesheets && allowCS) {
    style = style || new CSSStyleSheet();
    if (typeof style === "string") {
      style = cssText;
    } else {
      style.replaceSync(cssText);
    }
  } else {
    style = cssText;
  }
  styles.set(scopeId2, style);
};
var addStyle = (styleContainerNode, cmpMeta, mode) => {
  var _a;
  const scopeId2 = getScopeId(cmpMeta, mode);
  const style = styles.get(scopeId2);
  if (!BUILD.attachStyles || !win.document) {
    return scopeId2;
  }
  styleContainerNode = styleContainerNode.nodeType === 11 ? styleContainerNode : win.document;
  if (style) {
    if (typeof style === "string") {
      styleContainerNode = styleContainerNode.head || styleContainerNode;
      let appliedStyles = rootAppliedStyles.get(styleContainerNode);
      let styleElm;
      if (!appliedStyles) {
        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());
      }
      if (!appliedStyles.has(scopeId2)) {
        if (BUILD.hydrateClientSide && styleContainerNode.host && (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}="${scopeId2}"]`))) {
          styleElm.innerHTML = style;
        } else {
          styleElm = document.querySelector(`[${HYDRATED_STYLE_ID}="${scopeId2}"]`) || win.document.createElement("style");
          styleElm.innerHTML = style;
          const nonce = (_a = plt.$nonce$) != null ? _a : queryNonceMetaTagContent(win.document);
          if (nonce != null) {
            styleElm.setAttribute("nonce", nonce);
          }
          if ((BUILD.hydrateServerSide || BUILD.hotModuleReplacement) && (cmpMeta.$flags$ & 2 || cmpMeta.$flags$ & 128)) {
            styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId2);
          }
          if (!(cmpMeta.$flags$ & 1)) {
            if (styleContainerNode.nodeName === "HEAD") {
              const preconnectLinks = styleContainerNode.querySelectorAll("link[rel=preconnect]");
              const referenceNode2 = preconnectLinks.length > 0 ? preconnectLinks[preconnectLinks.length - 1].nextSibling : styleContainerNode.querySelector("style");
              styleContainerNode.insertBefore(styleElm, (referenceNode2 == null ? void 0 : referenceNode2.parentNode) === styleContainerNode ? referenceNode2 : null);
            } else if ("host" in styleContainerNode) {
              if (supportsConstructableStylesheets) {
                const stylesheet = new CSSStyleSheet();
                stylesheet.replaceSync(style);
                styleContainerNode.adoptedStyleSheets = [stylesheet, ...styleContainerNode.adoptedStyleSheets];
              } else {
                const existingStyleContainer = styleContainerNode.querySelector("style");
                if (existingStyleContainer) {
                  existingStyleContainer.innerHTML = style + existingStyleContainer.innerHTML;
                } else {
                  styleContainerNode.prepend(styleElm);
                }
              }
            } else {
              styleContainerNode.append(styleElm);
            }
          }
          if (cmpMeta.$flags$ & 1) {
            styleContainerNode.insertBefore(styleElm, null);
          }
        }
        if (cmpMeta.$flags$ & 4) {
          styleElm.innerHTML += SLOT_FB_CSS;
        }
        if (appliedStyles) {
          appliedStyles.add(scopeId2);
        }
      }
    } else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {
      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];
    }
  }
  return scopeId2;
};
var attachStyles = hostRef => {
  const cmpMeta = hostRef.$cmpMeta$;
  const elm = hostRef.$hostElement$;
  const flags = cmpMeta.$flags$;
  const endAttachStyles = createTime("attachStyles", cmpMeta.$tagName$);
  const scopeId2 = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$);
  if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && (flags & 10 && flags & 2 || flags & 128)) {
    elm["s-sc"] = scopeId2;
    elm.classList.add(scopeId2 + "-h");
  }
  endAttachStyles();
};
var getScopeId = (cmp, mode) => "sc-" + (BUILD.mode && mode && cmp.$flags$ & 32 ? cmp.$tagName$ + "-" + mode : cmp.$tagName$);
var convertScopedToShadow = css => css.replace(/\/\*!@([^\/]+)\*\/[^\{]+\{/g, "$1{");
var hydrateScopedToShadow = () => {
  if (!win.document) {
    return;
  }
  const styles2 = win.document.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);
  let i2 = 0;
  for (; i2 < styles2.length; i2++) {
    registerStyle(styles2[i2].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles2[i2].innerHTML), true);
  }
};
var setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags, initialRender) => {
  if (oldValue === newValue) {
    return;
  }
  let isProp = isMemberInElement(elm, memberName);
  let ln = memberName.toLowerCase();
  if (BUILD.vdomClass && memberName === "class") {
    const classList = elm.classList;
    const oldClasses = parseClassList(oldValue);
    let newClasses = parseClassList(newValue);
    if (BUILD.hydrateClientSide && elm["s-si"] && initialRender) {
      newClasses.push(elm["s-si"]);
      oldClasses.forEach(c => {
        if (c.startsWith(elm["s-si"])) newClasses.push(c);
      });
      newClasses = [...new Set(newClasses)];
      classList.add(...newClasses);
    } else {
      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));
      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));
    }
  } else if (BUILD.vdomStyle && memberName === "style") {
    if (BUILD.updatable) {
      for (const prop in oldValue) {
        if (!newValue || newValue[prop] == null) {
          if (!BUILD.hydrateServerSide && prop.includes("-")) {
            elm.style.removeProperty(prop);
          } else {
            elm.style[prop] = "";
          }
        }
      }
    }
    for (const prop in newValue) {
      if (!oldValue || newValue[prop] !== oldValue[prop]) {
        if (!BUILD.hydrateServerSide && prop.includes("-")) {
          elm.style.setProperty(prop, newValue[prop]);
        } else {
          elm.style[prop] = newValue[prop];
        }
      }
    }
  } else if (BUILD.vdomKey && memberName === "key") {} else if (BUILD.vdomRef && memberName === "ref") {
    if (newValue) {
      newValue(elm);
    }
  } else if (BUILD.vdomListener && (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) && memberName[0] === "o" && memberName[1] === "n") {
    if (memberName[2] === "-") {
      memberName = memberName.slice(3);
    } else if (isMemberInElement(win, ln)) {
      memberName = ln.slice(2);
    } else {
      memberName = ln[2] + memberName.slice(3);
    }
    if (oldValue || newValue) {
      const capture = memberName.endsWith(CAPTURE_EVENT_SUFFIX);
      memberName = memberName.replace(CAPTURE_EVENT_REGEX, "");
      if (oldValue) {
        plt.rel(elm, memberName, oldValue, capture);
      }
      if (newValue) {
        plt.ael(elm, memberName, newValue, capture);
      }
    }
  } else if (BUILD.vdomPropOrAttr) {
    const isComplex = isComplexType(newValue);
    if ((isProp || isComplex && newValue !== null) && !isSvg) {
      try {
        if (!elm.tagName.includes("-")) {
          const n = newValue == null ? "" : newValue;
          if (memberName === "list") {
            isProp = false;
          } else if (oldValue == null || elm[memberName] != n) {
            if (typeof elm.__lookupSetter__(memberName) === "function") {
              elm[memberName] = n;
            } else {
              elm.setAttribute(memberName, n);
            }
          }
        } else if (elm[memberName] !== newValue) {
          elm[memberName] = newValue;
        }
      } catch (e) {}
    }
    let xlink = false;
    if (BUILD.vdomXlink) {
      if (ln !== (ln = ln.replace(/^xlink\:?/, ""))) {
        memberName = ln;
        xlink = true;
      }
    }
    if (newValue == null || newValue === false) {
      if (newValue !== false || elm.getAttribute(memberName) === "") {
        if (BUILD.vdomXlink && xlink) {
          elm.removeAttributeNS(XLINK_NS, memberName);
        } else {
          elm.removeAttribute(memberName);
        }
      }
    } else if ((!isProp || flags & 4 || isSvg) && !isComplex && elm.nodeType === 1) {
      newValue = newValue === true ? "" : newValue;
      if (BUILD.vdomXlink && xlink) {
        elm.setAttributeNS(XLINK_NS, memberName, newValue);
      } else {
        elm.setAttribute(memberName, newValue);
      }
    }
  }
};
var parseClassListRegex = /\s/;
var parseClassList = value => {
  if (typeof value === "object" && value && "baseVal" in value) {
    value = value.baseVal;
  }
  if (!value || typeof value !== "string") {
    return [];
  }
  return value.split(parseClassListRegex);
};
var CAPTURE_EVENT_SUFFIX = "Capture";
var CAPTURE_EVENT_REGEX = new RegExp(CAPTURE_EVENT_SUFFIX + "$");
var updateElement = (oldVnode, newVnode, isSvgMode2, isInitialRender) => {
  const elm = newVnode.$elm$.nodeType === 11 && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;
  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || {};
  const newVnodeAttrs = newVnode.$attrs$ || {};
  if (BUILD.updatable) {
    for (const memberName of sortedAttrNames(Object.keys(oldVnodeAttrs))) {
      if (!(memberName in newVnodeAttrs)) {
        setAccessor(elm, memberName, oldVnodeAttrs[memberName], void 0, isSvgMode2, newVnode.$flags$, isInitialRender);
      }
    }
  }
  for (const memberName of sortedAttrNames(Object.keys(newVnodeAttrs))) {
    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode2, newVnode.$flags$, isInitialRender);
  }
};
function sortedAttrNames(attrNames) {
  return attrNames.includes("ref") ? [...attrNames.filter(attr => attr !== "ref"), "ref"] : attrNames;
}
var scopeId;
var contentRef;
var hostTagName;
var useNativeShadowDom = false;
var checkSlotFallbackVisibility = false;
var checkSlotRelocate = false;
var isSvgMode = false;
var createElm = (oldParentVNode, newParentVNode, childIndex) => {
  var _a;
  const newVNode2 = newParentVNode.$children$[childIndex];
  let i2 = 0;
  let elm;
  let childNode;
  let oldVNode;
  if (BUILD.slotRelocation && !useNativeShadowDom) {
    checkSlotRelocate = true;
    if (newVNode2.$tag$ === "slot") {
      newVNode2.$flags$ |= newVNode2.$children$ ? 2 : 1;
    }
  }
  if (BUILD.isDev && newVNode2.$elm$) {
    consoleDevError(`The JSX ${newVNode2.$text$ !== null ? `"${newVNode2.$text$}" text` : `"${newVNode2.$tag$}" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);
  }
  if (BUILD.vdomText && newVNode2.$text$ !== null) {
    elm = newVNode2.$elm$ = win.document.createTextNode(newVNode2.$text$);
  } else if (BUILD.slotRelocation && newVNode2.$flags$ & 1) {
    elm = newVNode2.$elm$ = BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode2) : win.document.createTextNode("");
    if (BUILD.vdomAttribute) {
      updateElement(null, newVNode2, isSvgMode);
    }
  } else {
    if (BUILD.svg && !isSvgMode) {
      isSvgMode = newVNode2.$tag$ === "svg";
    }
    if (!win.document) {
      throw new Error("You are trying to render a Stencil component in an environment that doesn't support the DOM. Make sure to populate the [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window/window) object before rendering a component.");
    }
    elm = newVNode2.$elm$ = BUILD.svg ? win.document.createElementNS(isSvgMode ? SVG_NS : HTML_NS, !useNativeShadowDom && BUILD.slotRelocation && newVNode2.$flags$ & 2 ? "slot-fb" : newVNode2.$tag$) : win.document.createElement(!useNativeShadowDom && BUILD.slotRelocation && newVNode2.$flags$ & 2 ? "slot-fb" : newVNode2.$tag$);
    if (BUILD.svg && isSvgMode && newVNode2.$tag$ === "foreignObject") {
      isSvgMode = false;
    }
    if (BUILD.vdomAttribute) {
      updateElement(null, newVNode2, isSvgMode);
    }
    if (BUILD.scoped && isDef(scopeId) && elm["s-si"] !== scopeId) {
      elm.classList.add(elm["s-si"] = scopeId);
    }
    if (newVNode2.$children$) {
      for (i2 = 0; i2 < newVNode2.$children$.length; ++i2) {
        childNode = createElm(oldParentVNode, newVNode2, i2);
        if (childNode) {
          elm.appendChild(childNode);
        }
      }
    }
    if (BUILD.svg) {
      if (newVNode2.$tag$ === "svg") {
        isSvgMode = false;
      } else if (elm.tagName === "foreignObject") {
        isSvgMode = true;
      }
    }
  }
  elm["s-hn"] = hostTagName;
  if (BUILD.slotRelocation) {
    if (newVNode2.$flags$ & (2 | 1)) {
      elm["s-sr"] = true;
      elm["s-cr"] = contentRef;
      elm["s-sn"] = newVNode2.$name$ || "";
      elm["s-rf"] = (_a = newVNode2.$attrs$) == null ? void 0 : _a.ref;
      patchSlotNode(elm);
      oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];
      if (oldVNode && oldVNode.$tag$ === newVNode2.$tag$ && oldParentVNode.$elm$) {
        if (BUILD.experimentalSlotFixes) {
          relocateToHostRoot(oldParentVNode.$elm$);
        } else {
          putBackInOriginalLocation(oldParentVNode.$elm$, false);
        }
      }
      if (BUILD.scoped) {
        addRemoveSlotScopedClass(contentRef, elm, newParentVNode.$elm$, oldParentVNode == null ? void 0 : oldParentVNode.$elm$);
      }
    }
  }
  return elm;
};
var relocateToHostRoot = parentElm => {
  plt.$flags$ |= 1;
  const host = parentElm.closest(hostTagName.toLowerCase());
  if (host != null) {
    const contentRefNode = Array.from(host.__childNodes || host.childNodes).find(ref => ref["s-cr"]);
    const childNodeArray = Array.from(parentElm.__childNodes || parentElm.childNodes);
    for (const childNode of contentRefNode ? childNodeArray.reverse() : childNodeArray) {
      if (childNode["s-sh"] != null) {
        insertBefore(host, childNode, contentRefNode != null ? contentRefNode : null);
        childNode["s-sh"] = void 0;
        checkSlotRelocate = true;
      }
    }
  }
  plt.$flags$ &= ~1;
};
var putBackInOriginalLocation = (parentElm, recursive) => {
  plt.$flags$ |= 1;
  const oldSlotChildNodes = Array.from(parentElm.__childNodes || parentElm.childNodes);
  if (parentElm["s-sr"] && BUILD.experimentalSlotFixes) {
    let node = parentElm;
    while (node = node.nextSibling) {
      if (node && node["s-sn"] === parentElm["s-sn"] && node["s-sh"] === hostTagName) {
        oldSlotChildNodes.push(node);
      }
    }
  }
  for (let i2 = oldSlotChildNodes.length - 1; i2 >= 0; i2--) {
    const childNode = oldSlotChildNodes[i2];
    if (childNode["s-hn"] !== hostTagName && childNode["s-ol"]) {
      insertBefore(referenceNode(childNode).parentNode, childNode, referenceNode(childNode));
      childNode["s-ol"].remove();
      childNode["s-ol"] = void 0;
      childNode["s-sh"] = void 0;
      checkSlotRelocate = true;
    }
    if (recursive) {
      putBackInOriginalLocation(childNode, recursive);
    }
  }
  plt.$flags$ &= ~1;
};
var addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {
  let containerElm = BUILD.slotRelocation && parentElm["s-cr"] && parentElm["s-cr"].parentNode || parentElm;
  let childNode;
  if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {
    containerElm = containerElm.shadowRoot;
  }
  for (; startIdx <= endIdx; ++startIdx) {
    if (vnodes[startIdx]) {
      childNode = createElm(null, parentVNode, startIdx);
      if (childNode) {
        vnodes[startIdx].$elm$ = childNode;
        insertBefore(containerElm, childNode, BUILD.slotRelocation ? referenceNode(before) : before);
      }
    }
  }
};
var removeVnodes = (vnodes, startIdx, endIdx) => {
  for (let index = startIdx; index <= endIdx; ++index) {
    const vnode = vnodes[index];
    if (vnode) {
      const elm = vnode.$elm$;
      nullifyVNodeRefs(vnode);
      if (elm) {
        if (BUILD.slotRelocation) {
          checkSlotFallbackVisibility = true;
          if (elm["s-ol"]) {
            elm["s-ol"].remove();
          } else {
            putBackInOriginalLocation(elm, true);
          }
        }
        elm.remove();
      }
    }
  }
};
var updateChildren = (parentElm, oldCh, newVNode2, newCh, isInitialRender = false) => {
  let oldStartIdx = 0;
  let newStartIdx = 0;
  let idxInOld = 0;
  let i2 = 0;
  let oldEndIdx = oldCh.length - 1;
  let oldStartVnode = oldCh[0];
  let oldEndVnode = oldCh[oldEndIdx];
  let newEndIdx = newCh.length - 1;
  let newStartVnode = newCh[0];
  let newEndVnode = newCh[newEndIdx];
  let node;
  let elmToMove;
  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
    if (oldStartVnode == null) {
      oldStartVnode = oldCh[++oldStartIdx];
    } else if (oldEndVnode == null) {
      oldEndVnode = oldCh[--oldEndIdx];
    } else if (newStartVnode == null) {
      newStartVnode = newCh[++newStartIdx];
    } else if (newEndVnode == null) {
      newEndVnode = newCh[--newEndIdx];
    } else if (isSameVnode(oldStartVnode, newStartVnode, isInitialRender)) {
      patch(oldStartVnode, newStartVnode, isInitialRender);
      oldStartVnode = oldCh[++oldStartIdx];
      newStartVnode = newCh[++newStartIdx];
    } else if (isSameVnode(oldEndVnode, newEndVnode, isInitialRender)) {
      patch(oldEndVnode, newEndVnode, isInitialRender);
      oldEndVnode = oldCh[--oldEndIdx];
      newEndVnode = newCh[--newEndIdx];
    } else if (isSameVnode(oldStartVnode, newEndVnode, isInitialRender)) {
      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === "slot" || newEndVnode.$tag$ === "slot")) {
        putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);
      }
      patch(oldStartVnode, newEndVnode, isInitialRender);
      insertBefore(parentElm, oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);
      oldStartVnode = oldCh[++oldStartIdx];
      newEndVnode = newCh[--newEndIdx];
    } else if (isSameVnode(oldEndVnode, newStartVnode, isInitialRender)) {
      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === "slot" || newEndVnode.$tag$ === "slot")) {
        putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);
      }
      patch(oldEndVnode, newStartVnode, isInitialRender);
      insertBefore(parentElm, oldEndVnode.$elm$, oldStartVnode.$elm$);
      oldEndVnode = oldCh[--oldEndIdx];
      newStartVnode = newCh[++newStartIdx];
    } else {
      idxInOld = -1;
      if (BUILD.vdomKey) {
        for (i2 = oldStartIdx; i2 <= oldEndIdx; ++i2) {
          if (oldCh[i2] && oldCh[i2].$key$ !== null && oldCh[i2].$key$ === newStartVnode.$key$) {
            idxInOld = i2;
            break;
          }
        }
      }
      if (BUILD.vdomKey && idxInOld >= 0) {
        elmToMove = oldCh[idxInOld];
        if (elmToMove.$tag$ !== newStartVnode.$tag$) {
          node = createElm(oldCh && oldCh[newStartIdx], newVNode2, idxInOld);
        } else {
          patch(elmToMove, newStartVnode, isInitialRender);
          oldCh[idxInOld] = void 0;
          node = elmToMove.$elm$;
        }
        newStartVnode = newCh[++newStartIdx];
      } else {
        node = createElm(oldCh && oldCh[newStartIdx], newVNode2, newStartIdx);
        newStartVnode = newCh[++newStartIdx];
      }
      if (node) {
        if (BUILD.slotRelocation) {
          insertBefore(referenceNode(oldStartVnode.$elm$).parentNode, node, referenceNode(oldStartVnode.$elm$));
        } else {
          insertBefore(oldStartVnode.$elm$.parentNode, node, oldStartVnode.$elm$);
        }
      }
    }
  }
  if (oldStartIdx > oldEndIdx) {
    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode2, newCh, newStartIdx, newEndIdx);
  } else if (BUILD.updatable && newStartIdx > newEndIdx) {
    removeVnodes(oldCh, oldStartIdx, oldEndIdx);
  }
};
var isSameVnode = (leftVNode, rightVNode, isInitialRender = false) => {
  if (leftVNode.$tag$ === rightVNode.$tag$) {
    if (BUILD.slotRelocation && leftVNode.$tag$ === "slot") {
      return leftVNode.$name$ === rightVNode.$name$;
    }
    if (BUILD.vdomKey && !isInitialRender) {
      return leftVNode.$key$ === rightVNode.$key$;
    }
    if (isInitialRender && !leftVNode.$key$ && rightVNode.$key$) {
      leftVNode.$key$ = rightVNode.$key$;
    }
    return true;
  }
  return false;
};
var referenceNode = node => node && node["s-ol"] || node;
var patch = (oldVNode, newVNode2, isInitialRender = false) => {
  const elm = newVNode2.$elm$ = oldVNode.$elm$;
  const oldChildren = oldVNode.$children$;
  const newChildren = newVNode2.$children$;
  const tag = newVNode2.$tag$;
  const text = newVNode2.$text$;
  let defaultHolder;
  if (!BUILD.vdomText || text === null) {
    if (BUILD.svg) {
      isSvgMode = tag === "svg" ? true : tag === "foreignObject" ? false : isSvgMode;
    }
    if (BUILD.vdomAttribute || BUILD.reflect) {
      if (BUILD.slot && tag === "slot" && !useNativeShadowDom) {
        if (BUILD.experimentalSlotFixes && oldVNode.$name$ !== newVNode2.$name$) {
          newVNode2.$elm$["s-sn"] = newVNode2.$name$ || "";
          relocateToHostRoot(newVNode2.$elm$.parentElement);
        }
      }
      updateElement(oldVNode, newVNode2, isSvgMode, isInitialRender);
    }
    if (BUILD.updatable && oldChildren !== null && newChildren !== null) {
      updateChildren(elm, oldChildren, newVNode2, newChildren, isInitialRender);
    } else if (newChildren !== null) {
      if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {
        elm.textContent = "";
      }
      addVnodes(elm, null, newVNode2, newChildren, 0, newChildren.length - 1);
    } else if (!isInitialRender && BUILD.updatable && oldChildren !== null) {
      removeVnodes(oldChildren, 0, oldChildren.length - 1);
    }
    if (BUILD.svg && isSvgMode && tag === "svg") {
      isSvgMode = false;
    }
  } else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm["s-cr"])) {
    defaultHolder.parentNode.textContent = text;
  } else if (BUILD.vdomText && oldVNode.$text$ !== text) {
    elm.data = text;
  }
};
var relocateNodes = [];
var markSlotContentForRelocation = elm => {
  let node;
  let hostContentNodes;
  let j;
  const children = elm.__childNodes || elm.childNodes;
  for (const childNode of children) {
    if (childNode["s-sr"] && (node = childNode["s-cr"]) && node.parentNode) {
      hostContentNodes = node.parentNode.__childNodes || node.parentNode.childNodes;
      const slotName = childNode["s-sn"];
      for (j = hostContentNodes.length - 1; j >= 0; j--) {
        node = hostContentNodes[j];
        if (!node["s-cn"] && !node["s-nr"] && node["s-hn"] !== childNode["s-hn"] && (!BUILD.experimentalSlotFixes || !node["s-sh"] || node["s-sh"] !== childNode["s-hn"])) {
          if (isNodeLocatedInSlot(node, slotName)) {
            let relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);
            checkSlotFallbackVisibility = true;
            node["s-sn"] = node["s-sn"] || slotName;
            if (relocateNodeData) {
              relocateNodeData.$nodeToRelocate$["s-sh"] = childNode["s-hn"];
              relocateNodeData.$slotRefNode$ = childNode;
            } else {
              node["s-sh"] = childNode["s-hn"];
              relocateNodes.push({
                $slotRefNode$: childNode,
                $nodeToRelocate$: node
              });
            }
            if (node["s-sr"]) {
              relocateNodes.map(relocateNode => {
                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node["s-sn"])) {
                  relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);
                  if (relocateNodeData && !relocateNode.$slotRefNode$) {
                    relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;
                  }
                }
              });
            }
          } else if (!relocateNodes.some(r => r.$nodeToRelocate$ === node)) {
            relocateNodes.push({
              $nodeToRelocate$: node
            });
          }
        }
      }
    }
    if (childNode.nodeType === 1) {
      markSlotContentForRelocation(childNode);
    }
  }
};
var nullifyVNodeRefs = vNode => {
  if (BUILD.vdomRef) {
    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);
    vNode.$children$ && vNode.$children$.map(nullifyVNodeRefs);
  }
};
var insertBefore = (parent, newNode, reference) => {
  if (BUILD.scoped && typeof newNode["s-sn"] === "string" && !!newNode["s-sr"] && !!newNode["s-cr"]) {
    addRemoveSlotScopedClass(newNode["s-cr"], newNode, parent, newNode.parentElement);
  } else if (BUILD.experimentalSlotFixes && typeof newNode["s-sn"] === "string") {
    if (parent.getRootNode().nodeType !== 11) {
      patchParentNode(newNode);
    }
    parent.insertBefore(newNode, reference);
    const {
      slotNode
    } = findSlotFromSlottedNode(newNode);
    if (slotNode) dispatchSlotChangeEvent(slotNode);
    return newNode;
  }
  if (BUILD.experimentalSlotFixes && parent.__insertBefore) {
    return parent.__insertBefore(newNode, reference);
  } else {
    return parent == null ? void 0 : parent.insertBefore(newNode, reference);
  }
};
function addRemoveSlotScopedClass(reference, slotNode, newParent, oldParent) {
  var _a, _b;
  let scopeId2;
  if (reference && typeof slotNode["s-sn"] === "string" && !!slotNode["s-sr"] && reference.parentNode && reference.parentNode["s-sc"] && (scopeId2 = slotNode["s-si"] || reference.parentNode["s-sc"])) {
    const scopeName = slotNode["s-sn"];
    const hostName = slotNode["s-hn"];
    (_a = newParent.classList) == null ? void 0 : _a.add(scopeId2 + "-s");
    if (oldParent && ((_b = oldParent.classList) == null ? void 0 : _b.contains(scopeId2 + "-s"))) {
      let child = (oldParent.__childNodes || oldParent.childNodes)[0];
      let found = false;
      while (child) {
        if (child["s-sn"] !== scopeName && child["s-hn"] === hostName && !!child["s-sr"]) {
          found = true;
          break;
        }
        child = child.nextSibling;
      }
      if (!found) oldParent.classList.remove(scopeId2 + "-s");
    }
  }
}
var renderVdom = (hostRef, renderFnResults, isInitialLoad = false) => {
  var _a, _b, _c, _d, _e;
  const hostElm = hostRef.$hostElement$;
  const cmpMeta = hostRef.$cmpMeta$;
  const oldVNode = hostRef.$vnode$ || newVNode(null, null);
  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);
  hostTagName = hostElm.tagName;
  if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {
    throw new Error(`The <Host> must be the single root component.
Looks like the render() function of "${hostTagName.toLowerCase()}" is returning an array that contains the <Host>.

The render() function should look like this instead:

render() {
  // Do not return an array
  return (
    <Host>{content}</Host>
  );
}
  `);
  }
  if (BUILD.reflect && cmpMeta.$attrsToReflect$) {
    rootVnode.$attrs$ = rootVnode.$attrs$ || {};
    cmpMeta.$attrsToReflect$.map(([propName, attribute]) => rootVnode.$attrs$[attribute] = hostElm[propName]);
  }
  if (isInitialLoad && rootVnode.$attrs$) {
    for (const key of Object.keys(rootVnode.$attrs$)) {
      if (hostElm.hasAttribute(key) && !["key", "ref", "style", "class"].includes(key)) {
        rootVnode.$attrs$[key] = hostElm[key];
      }
    }
  }
  rootVnode.$tag$ = null;
  rootVnode.$flags$ |= 4;
  hostRef.$vnode$ = rootVnode;
  rootVnode.$elm$ = oldVNode.$elm$ = BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm;
  if (BUILD.scoped || BUILD.shadowDom) {
    scopeId = hostElm["s-sc"];
  }
  useNativeShadowDom = supportsShadow && !!(cmpMeta.$flags$ & 1) && !(cmpMeta.$flags$ & 128);
  if (BUILD.slotRelocation) {
    contentRef = hostElm["s-cr"];
    checkSlotFallbackVisibility = false;
  }
  patch(oldVNode, rootVnode, isInitialLoad);
  if (BUILD.slotRelocation) {
    plt.$flags$ |= 1;
    if (checkSlotRelocate) {
      markSlotContentForRelocation(rootVnode.$elm$);
      for (const relocateData of relocateNodes) {
        const nodeToRelocate = relocateData.$nodeToRelocate$;
        if (!nodeToRelocate["s-ol"] && win.document) {
          const orgLocationNode = BUILD.isDebug || BUILD.hydrateServerSide ? originalLocationDebugNode(nodeToRelocate) : win.document.createTextNode("");
          orgLocationNode["s-nr"] = nodeToRelocate;
          insertBefore(nodeToRelocate.parentNode, nodeToRelocate["s-ol"] = orgLocationNode, nodeToRelocate);
        }
      }
      for (const relocateData of relocateNodes) {
        const nodeToRelocate = relocateData.$nodeToRelocate$;
        const slotRefNode = relocateData.$slotRefNode$;
        if (slotRefNode) {
          const parentNodeRef = slotRefNode.parentNode;
          let insertBeforeNode = slotRefNode.nextSibling;
          if (!BUILD.hydrateServerSide && (!BUILD.experimentalSlotFixes || insertBeforeNode && insertBeforeNode.nodeType === 1)) {
            let orgLocationNode = (_a = nodeToRelocate["s-ol"]) == null ? void 0 : _a.previousSibling;
            while (orgLocationNode) {
              let refNode = (_b = orgLocationNode["s-nr"]) != null ? _b : null;
              if (refNode && refNode["s-sn"] === nodeToRelocate["s-sn"] && parentNodeRef === (refNode.__parentNode || refNode.parentNode)) {
                refNode = refNode.nextSibling;
                while (refNode === nodeToRelocate || (refNode == null ? void 0 : refNode["s-sr"])) {
                  refNode = refNode == null ? void 0 : refNode.nextSibling;
                }
                if (!refNode || !refNode["s-nr"]) {
                  insertBeforeNode = refNode;
                  break;
                }
              }
              orgLocationNode = orgLocationNode.previousSibling;
            }
          }
          const parent = nodeToRelocate.__parentNode || nodeToRelocate.parentNode;
          const nextSibling = nodeToRelocate.__nextSibling || nodeToRelocate.nextSibling;
          if (!insertBeforeNode && parentNodeRef !== parent || nextSibling !== insertBeforeNode) {
            if (nodeToRelocate !== insertBeforeNode) {
              if (!BUILD.experimentalSlotFixes && !nodeToRelocate["s-hn"] && nodeToRelocate["s-ol"]) {
                nodeToRelocate["s-hn"] = nodeToRelocate["s-ol"].parentNode.nodeName;
              }
              insertBefore(parentNodeRef, nodeToRelocate, insertBeforeNode);
              if (nodeToRelocate.nodeType === 1 && nodeToRelocate.tagName !== "SLOT-FB") {
                nodeToRelocate.hidden = (_c = nodeToRelocate["s-ih"]) != null ? _c : false;
              }
            }
          }
          nodeToRelocate && typeof slotRefNode["s-rf"] === "function" && slotRefNode["s-rf"](slotRefNode);
        } else {
          if (nodeToRelocate.nodeType === 1) {
            if (isInitialLoad) {
              nodeToRelocate["s-ih"] = (_d = nodeToRelocate.hidden) != null ? _d : false;
            }
            nodeToRelocate.hidden = true;
          }
        }
      }
    }
    if (checkSlotFallbackVisibility) {
      updateFallbackSlotVisibility(rootVnode.$elm$);
    }
    plt.$flags$ &= ~1;
    relocateNodes.length = 0;
  }
  if (BUILD.experimentalScopedSlotChanges && cmpMeta.$flags$ & 2) {
    const children = rootVnode.$elm$.__childNodes || rootVnode.$elm$.childNodes;
    for (const childNode of children) {
      if (childNode["s-hn"] !== hostTagName && !childNode["s-sh"]) {
        if (isInitialLoad && childNode["s-ih"] == null) {
          childNode["s-ih"] = (_e = childNode.hidden) != null ? _e : false;
        }
        childNode.hidden = true;
      }
    }
  }
  contentRef = void 0;
};
var slotReferenceDebugNode = slotVNode => {
  var _a;
  return (_a = win.document) == null ? void 0 : _a.createComment(`<slot${slotVNode.$name$ ? ' name="' + slotVNode.$name$ + '"' : ""}> (host=${hostTagName.toLowerCase()})`);
};
var originalLocationDebugNode = nodeToRelocate => {
  var _a;
  return (_a = win.document) == null ? void 0 : _a.createComment(`org-location for ` + (nodeToRelocate.localName ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate["s-hn"]})` : `[${nodeToRelocate.textContent}]`));
};
var attachToAncestor = (hostRef, ancestorComponent) => {
  if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent["s-p"]) {
    const index = ancestorComponent["s-p"].push(new Promise(r => hostRef.$onRenderResolve$ = () => {
      ancestorComponent["s-p"].splice(index - 1, 1);
      r();
    }));
  }
};
var scheduleUpdate = (hostRef, isInitialLoad) => {
  if (BUILD.taskQueue && BUILD.updatable) {
    hostRef.$flags$ |= 16;
  }
  if (BUILD.asyncLoading && hostRef.$flags$ & 4) {
    hostRef.$flags$ |= 512;
    return;
  }
  attachToAncestor(hostRef, hostRef.$ancestorComponent$);
  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);
  return BUILD.taskQueue ? writeTask(dispatch) : dispatch();
};
var dispatchHooks = (hostRef, isInitialLoad) => {
  const elm = hostRef.$hostElement$;
  const endSchedule = createTime("scheduleUpdate", hostRef.$cmpMeta$.$tagName$);
  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;
  if (!instance) {
    throw new Error(`Can't render component <${elm.tagName.toLowerCase()} /> with invalid Stencil runtime! Make sure this imported component is compiled with a \`externalRuntime: true\` flag. For more information, please refer to https://stenciljs.com/docs/custom-elements#externalruntime`);
  }
  let maybePromise;
  if (isInitialLoad) {
    if (BUILD.lazyLoad && BUILD.hostListener) {
      hostRef.$flags$ |= 256;
      if (hostRef.$queuedListeners$) {
        hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event, elm));
        hostRef.$queuedListeners$ = void 0;
      }
    }
    emitLifecycleEvent(elm, "componentWillLoad");
    maybePromise = safeCall(instance, "componentWillLoad", void 0, elm);
  } else {
    emitLifecycleEvent(elm, "componentWillUpdate");
    maybePromise = safeCall(instance, "componentWillUpdate", void 0, elm);
  }
  emitLifecycleEvent(elm, "componentWillRender");
  maybePromise = enqueue(maybePromise, () => safeCall(instance, "componentWillRender", void 0, elm));
  endSchedule();
  return enqueue(maybePromise, () => updateComponent(hostRef, instance, isInitialLoad));
};
var enqueue = (maybePromise, fn) => isPromisey(maybePromise) ? maybePromise.then(fn).catch(err2 => {
  console.error(err2);
  fn();
}) : fn();
var isPromisey = maybePromise => maybePromise instanceof Promise || maybePromise && maybePromise.then && typeof maybePromise.then === "function";
var updateComponent = async (hostRef, instance, isInitialLoad) => {
  var _a;
  const elm = hostRef.$hostElement$;
  const endUpdate = createTime("update", hostRef.$cmpMeta$.$tagName$);
  const rc = elm["s-rc"];
  if (BUILD.style && isInitialLoad) {
    attachStyles(hostRef);
  }
  const endRender = createTime("render", hostRef.$cmpMeta$.$tagName$);
  if (BUILD.isDev) {
    hostRef.$flags$ |= 1024;
  }
  if (BUILD.hydrateServerSide) {
    await callRender(hostRef, instance, elm, isInitialLoad);
  } else {
    callRender(hostRef, instance, elm, isInitialLoad);
  }
  if (BUILD.isDev) {
    hostRef.$renderCount$ = hostRef.$renderCount$ === void 0 ? 1 : hostRef.$renderCount$ + 1;
    hostRef.$flags$ &= ~1024;
  }
  if (BUILD.hydrateServerSide) {
    try {
      serverSideConnected(elm);
      if (isInitialLoad) {
        if (hostRef.$cmpMeta$.$flags$ & 1) {
          elm["s-en"] = "";
        } else if (hostRef.$cmpMeta$.$flags$ & 2) {
          elm["s-en"] = "c";
        }
      }
    } catch (e) {
      consoleError(e, elm);
    }
  }
  if (BUILD.asyncLoading && rc) {
    rc.map(cb => cb());
    elm["s-rc"] = void 0;
  }
  endRender();
  endUpdate();
  if (BUILD.asyncLoading) {
    const childrenPromises = (_a = elm["s-p"]) != null ? _a : [];
    const postUpdate = () => postUpdateComponent(hostRef);
    if (childrenPromises.length === 0) {
      postUpdate();
    } else {
      Promise.all(childrenPromises).then(postUpdate);
      hostRef.$flags$ |= 4;
      childrenPromises.length = 0;
    }
  } else {
    postUpdateComponent(hostRef);
  }
};
var renderingRef = null;
var callRender = (hostRef, instance, elm, isInitialLoad) => {
  const allRenderFn = BUILD.allRenderFn ? true : false;
  const lazyLoad = BUILD.lazyLoad ? true : false;
  const taskQueue = BUILD.taskQueue ? true : false;
  const updatable = BUILD.updatable ? true : false;
  try {
    renderingRef = instance;
    instance = allRenderFn ? instance.render() : instance.render && instance.render();
    if (updatable && taskQueue) {
      hostRef.$flags$ &= ~16;
    }
    if (updatable || lazyLoad) {
      hostRef.$flags$ |= 2;
    }
    if (BUILD.hasRenderFn || BUILD.reflect) {
      if (BUILD.vdomRender || BUILD.reflect) {
        if (BUILD.hydrateServerSide) {
          return Promise.resolve(instance).then(value => renderVdom(hostRef, value, isInitialLoad));
        } else {
          renderVdom(hostRef, instance, isInitialLoad);
        }
      } else {
        const shadowRoot = elm.shadowRoot;
        if (hostRef.$cmpMeta$.$flags$ & 1) {
          shadowRoot.textContent = instance;
        } else {
          elm.textContent = instance;
        }
      }
    }
  } catch (e) {
    consoleError(e, hostRef.$hostElement$);
  }
  renderingRef = null;
  return null;
};
var getRenderingRef = () => renderingRef;
var postUpdateComponent = hostRef => {
  const tagName = hostRef.$cmpMeta$.$tagName$;
  const elm = hostRef.$hostElement$;
  const endPostUpdate = createTime("postUpdate", tagName);
  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;
  const ancestorComponent = hostRef.$ancestorComponent$;
  if (BUILD.isDev) {
    hostRef.$flags$ |= 1024;
  }
  safeCall(instance, "componentDidRender", void 0, elm);
  if (BUILD.isDev) {
    hostRef.$flags$ &= ~1024;
  }
  emitLifecycleEvent(elm, "componentDidRender");
  if (!(hostRef.$flags$ & 64)) {
    hostRef.$flags$ |= 64;
    if (BUILD.asyncLoading && BUILD.cssAnnotations) {
      addHydratedFlag(elm);
    }
    if (BUILD.isDev) {
      hostRef.$flags$ |= 2048;
    }
    safeCall(instance, "componentDidLoad", void 0, elm);
    if (BUILD.isDev) {
      hostRef.$flags$ &= ~2048;
    }
    emitLifecycleEvent(elm, "componentDidLoad");
    endPostUpdate();
    if (BUILD.asyncLoading) {
      hostRef.$onReadyResolve$(elm);
      if (!ancestorComponent) {
        appDidLoad(tagName);
      }
    }
  } else {
    if (BUILD.isDev) {
      hostRef.$flags$ |= 1024;
    }
    safeCall(instance, "componentDidUpdate", void 0, elm);
    if (BUILD.isDev) {
      hostRef.$flags$ &= ~1024;
    }
    emitLifecycleEvent(elm, "componentDidUpdate");
    endPostUpdate();
  }
  if (BUILD.method && BUILD.lazyLoad) {
    hostRef.$onInstanceResolve$(elm);
  }
  if (BUILD.asyncLoading) {
    if (hostRef.$onRenderResolve$) {
      hostRef.$onRenderResolve$();
      hostRef.$onRenderResolve$ = void 0;
    }
    if (hostRef.$flags$ & 512) {
      nextTick(() => scheduleUpdate(hostRef, false));
    }
    hostRef.$flags$ &= ~(4 | 512);
  }
};
var forceUpdate = ref => {
  if (BUILD.updatable && (Build.isBrowser || Build.isTesting)) {
    const hostRef = getHostRef(ref);
    const isConnected = hostRef.$hostElement$.isConnected;
    if (isConnected && (hostRef.$flags$ & (2 | 16)) === 2) {
      scheduleUpdate(hostRef, false);
    }
    return isConnected;
  }
  return false;
};
var appDidLoad = who => {
  if (BUILD.asyncQueue) {
    plt.$flags$ |= 2;
  }
  nextTick(() => emitEvent(win, "appload", {
    detail: {
      namespace: NAMESPACE
    }
  }));
  if (BUILD.profile && performance.measure) {
    performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, "st:app:start");
  }
};
var safeCall = (instance, method, arg, elm) => {
  if (instance && instance[method]) {
    try {
      return instance[method](arg);
    } catch (e) {
      consoleError(e, elm);
    }
  }
  return void 0;
};
var emitLifecycleEvent = (elm, lifecycleName) => {
  if (BUILD.lifecycleDOMEvents) {
    emitEvent(elm, "stencil_" + lifecycleName, {
      bubbles: true,
      composed: true,
      detail: {
        namespace: NAMESPACE
      }
    });
  }
};
var addHydratedFlag = elm => {
  var _a, _b;
  return BUILD.hydratedClass ? elm.classList.add((_a = BUILD.hydratedSelectorName) != null ? _a : "hydrated") : BUILD.hydratedAttribute ? elm.setAttribute((_b = BUILD.hydratedSelectorName) != null ? _b : "hydrated", "") : void 0;
};
var serverSideConnected = elm => {
  const children = elm.children;
  if (children != null) {
    for (let i2 = 0, ii = children.length; i2 < ii; i2++) {
      const childElm = children[i2];
      if (typeof childElm.connectedCallback === "function") {
        childElm.connectedCallback();
      }
      serverSideConnected(childElm);
    }
  }
};
var getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);
var setValue = (ref, propName, newVal, cmpMeta) => {
  const hostRef = getHostRef(ref);
  if (BUILD.lazyLoad && !hostRef) {
    throw new Error(`Couldn't find host element for "${cmpMeta.$tagName$}" as it is unknown to this Stencil runtime. This usually happens when integrating a 3rd party Stencil component with another Stencil component or application. Please reach out to the maintainers of the 3rd party Stencil component or report this on the Stencil Discord server (https://chat.stenciljs.com) or comment on this similar [GitHub issue](https://github.com/stenciljs/core/issues/5457).`);
  }
  const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;
  const oldVal = hostRef.$instanceValues$.get(propName);
  const flags = hostRef.$flags$;
  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;
  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);
  const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);
  const didValueChange = newVal !== oldVal && !areBothNaN;
  if ((!BUILD.lazyLoad || !(flags & 8) || oldVal === void 0) && didValueChange) {
    hostRef.$instanceValues$.set(propName, newVal);
    if (BUILD.isDev) {
      if (hostRef.$flags$ & 1024) {
        consoleDevWarn(`The state/prop "${propName}" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, "\nElement", elm, "\nNew value", newVal, "\nOld value", oldVal);
      } else if (hostRef.$flags$ & 2048) {
        consoleDevWarn(`The state/prop "${propName}" changed during "componentDidLoad()", this triggers extra re-renders, try to setup on "componentWillLoad()"`, "\nElement", elm, "\nNew value", newVal, "\nOld value", oldVal);
      }
    }
    if (!BUILD.lazyLoad || instance) {
      if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128) {
        const watchMethods = cmpMeta.$watchers$[propName];
        if (watchMethods) {
          watchMethods.map(watchMethodName => {
            try {
              instance[watchMethodName](newVal, oldVal, propName);
            } catch (e) {
              consoleError(e, elm);
            }
          });
        }
      }
      if (BUILD.updatable && (flags & (2 | 16)) === 2) {
        if (instance.componentShouldUpdate) {
          if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {
            return;
          }
        }
        scheduleUpdate(hostRef, false);
      }
    }
  }
};
var proxyComponent = (Cstr, cmpMeta, flags) => {
  var _a, _b;
  const prototype = Cstr.prototype;
  if (BUILD.isTesting) {
    if (prototype.__stencilAugmented) {
      return;
    }
    prototype.__stencilAugmented = true;
  }
  if (BUILD.formAssociated && cmpMeta.$flags$ & 64 && flags & 1) {
    FORM_ASSOCIATED_CUSTOM_ELEMENT_CALLBACKS.forEach(cbName => {
      const originalFormAssociatedCallback = prototype[cbName];
      Object.defineProperty(prototype, cbName, {
        value(...args) {
          const hostRef = getHostRef(this);
          const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : this;
          if (!instance) {
            hostRef.$onReadyPromise$.then(asyncInstance => {
              const cb = asyncInstance[cbName];
              typeof cb === "function" && cb.call(asyncInstance, ...args);
            });
          } else {
            const cb = BUILD.lazyLoad ? instance[cbName] : originalFormAssociatedCallback;
            typeof cb === "function" && cb.call(instance, ...args);
          }
        }
      });
    });
  }
  if (BUILD.member && cmpMeta.$members$ || BUILD.watchCallback && (cmpMeta.$watchers$ || Cstr.watchers)) {
    if (BUILD.watchCallback && Cstr.watchers && !cmpMeta.$watchers$) {
      cmpMeta.$watchers$ = Cstr.watchers;
    }
    const members = Object.entries((_a = cmpMeta.$members$) != null ? _a : {});
    members.map(([memberName, [memberFlags]]) => {
      if ((BUILD.prop || BUILD.state) && (memberFlags & 31 || (!BUILD.lazyLoad || flags & 2) && memberFlags & 32)) {
        const {
          get: origGetter,
          set: origSetter
        } = Object.getOwnPropertyDescriptor(prototype, memberName) || {};
        if (origGetter) cmpMeta.$members$[memberName][0] |= 2048;
        if (origSetter) cmpMeta.$members$[memberName][0] |= 4096;
        if (flags & 1 || !origGetter) {
          Object.defineProperty(prototype, memberName, {
            get() {
              if (BUILD.lazyLoad) {
                if ((cmpMeta.$members$[memberName][0] & 2048) === 0) {
                  return getValue(this, memberName);
                }
                const ref = getHostRef(this);
                const instance = ref ? ref.$lazyInstance$ : prototype;
                if (!instance) return;
                return instance[memberName];
              }
              if (!BUILD.lazyLoad) {
                return origGetter ? origGetter.apply(this) : getValue(this, memberName);
              }
            },
            configurable: true,
            enumerable: true
          });
        }
        Object.defineProperty(prototype, memberName, {
          set(newValue) {
            const ref = getHostRef(this);
            if (BUILD.isDev) {
              if ((flags & 1) === 0 && (cmpMeta.$members$[memberName][0] & 4096) === 0 && (ref && ref.$flags$ & 8) === 0 && (memberFlags & 31) !== 0 && (memberFlags & 1024) === 0) {
                consoleDevWarn(`@Prop() "${memberName}" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.
More information: https://stenciljs.com/docs/properties#prop-mutability`);
              }
            }
            if (origSetter) {
              const currentValue = memberFlags & 32 ? this[memberName] : ref.$hostElement$[memberName];
              if (typeof currentValue === "undefined" && ref.$instanceValues$.get(memberName)) {
                newValue = ref.$instanceValues$.get(memberName);
              } else if (!ref.$instanceValues$.get(memberName) && currentValue) {
                ref.$instanceValues$.set(memberName, currentValue);
              }
              origSetter.apply(this, [parsePropertyValue(newValue, memberFlags)]);
              newValue = memberFlags & 32 ? this[memberName] : ref.$hostElement$[memberName];
              setValue(this, memberName, newValue, cmpMeta);
              return;
            }
            if (!BUILD.lazyLoad) {
              setValue(this, memberName, newValue, cmpMeta);
              return;
            }
            if (BUILD.lazyLoad) {
              if ((flags & 1) === 0 || (cmpMeta.$members$[memberName][0] & 4096) === 0) {
                setValue(this, memberName, newValue, cmpMeta);
                if (flags & 1 && !ref.$lazyInstance$) {
                  ref.$onReadyPromise$.then(() => {
                    if (cmpMeta.$members$[memberName][0] & 4096 && ref.$lazyInstance$[memberName] !== ref.$instanceValues$.get(memberName)) {
                      ref.$lazyInstance$[memberName] = newValue;
                    }
                  });
                }
                return;
              }
              const setterSetVal = () => {
                const currentValue = ref.$lazyInstance$[memberName];
                if (!ref.$instanceValues$.get(memberName) && currentValue) {
                  ref.$instanceValues$.set(memberName, currentValue);
                }
                ref.$lazyInstance$[memberName] = parsePropertyValue(newValue, memberFlags);
                setValue(this, memberName, ref.$lazyInstance$[memberName], cmpMeta);
              };
              if (ref.$lazyInstance$) {
                setterSetVal();
              } else {
                ref.$onReadyPromise$.then(() => setterSetVal());
              }
            }
          }
        });
      } else if (BUILD.lazyLoad && BUILD.method && flags & 1 && memberFlags & 64) {
        Object.defineProperty(prototype, memberName, {
          value(...args) {
            var _a2;
            const ref = getHostRef(this);
            return (_a2 = ref == null ? void 0 : ref.$onInstancePromise$) == null ? void 0 : _a2.then(() => {
              var _a3;
              return (_a3 = ref.$lazyInstance$) == null ? void 0 : _a3[memberName](...args);
            });
          }
        });
      }
    });
    if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1)) {
      const attrNameToPropName = new Map();
      prototype.attributeChangedCallback = function (attrName, oldValue, newValue) {
        plt.jmp(() => {
          var _a2;
          const propName = attrNameToPropName.get(attrName);
          if (this.hasOwnProperty(propName) && BUILD.lazyLoad) {
            newValue = this[propName];
            delete this[propName];
          } else if (prototype.hasOwnProperty(propName) && typeof this[propName] === "number" && this[propName] == newValue) {
            return;
          } else if (propName == null) {
            const hostRef = getHostRef(this);
            const flags2 = hostRef == null ? void 0 : hostRef.$flags$;
            if (flags2 && !(flags2 & 8) && flags2 & 128 && newValue !== oldValue) {
              const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : this;
              const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;
              const entry = (_a2 = cmpMeta.$watchers$) == null ? void 0 : _a2[attrName];
              entry == null ? void 0 : entry.forEach(callbackName => {
                if (instance[callbackName] != null) {
                  instance[callbackName].call(instance, newValue, oldValue, attrName);
                }
              });
            }
            return;
          }
          const propDesc = Object.getOwnPropertyDescriptor(prototype, propName);
          newValue = newValue === null && typeof this[propName] === "boolean" ? false : newValue;
          if (newValue !== this[propName] && (!propDesc.get || !!propDesc.set)) {
            this[propName] = newValue;
          }
        });
      };
      Cstr.observedAttributes = Array.from(new Set([...Object.keys((_b = cmpMeta.$watchers$) != null ? _b : {}), ...members.filter(([_, m]) => m[0] & 15).map(([propName, m]) => {
        var _a2;
        const attrName = m[1] || propName;
        attrNameToPropName.set(attrName, propName);
        if (BUILD.reflect && m[0] & 512) {
          (_a2 = cmpMeta.$attrsToReflect$) == null ? void 0 : _a2.push([propName, attrName]);
        }
        return attrName;
      })]));
    }
  }
  return Cstr;
};
var initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId) => {
  let Cstr;
  if ((hostRef.$flags$ & 32) === 0) {
    hostRef.$flags$ |= 32;
    const bundleId = cmpMeta.$lazyBundleId$;
    if (BUILD.lazyLoad && bundleId) {
      const CstrImport = loadModule(cmpMeta, hostRef, hmrVersionId);
      if (CstrImport && "then" in CstrImport) {
        const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);
        Cstr = await CstrImport;
        endLoad();
      } else {
        Cstr = CstrImport;
      }
      if (!Cstr) {
        throw new Error(`Constructor for "${cmpMeta.$tagName$}#${hostRef.$modeName$}" was not found`);
      }
      if (BUILD.member && !Cstr.isProxied) {
        if (BUILD.watchCallback) {
          cmpMeta.$watchers$ = Cstr.watchers;
        }
        proxyComponent(Cstr, cmpMeta, 2);
        Cstr.isProxied = true;
      }
      const endNewInstance = createTime("createInstance", cmpMeta.$tagName$);
      if (BUILD.member) {
        hostRef.$flags$ |= 8;
      }
      try {
        new Cstr(hostRef);
      } catch (e) {
        consoleError(e, elm);
      }
      if (BUILD.member) {
        hostRef.$flags$ &= ~8;
      }
      if (BUILD.watchCallback) {
        hostRef.$flags$ |= 128;
      }
      endNewInstance();
      fireConnectedCallback(hostRef.$lazyInstance$, elm);
    } else {
      Cstr = elm.constructor;
      const cmpTag = elm.localName;
      customElements.whenDefined(cmpTag).then(() => hostRef.$flags$ |= 128);
    }
    if (BUILD.style && Cstr && Cstr.style) {
      let style;
      if (typeof Cstr.style === "string") {
        style = Cstr.style;
      } else if (BUILD.mode && typeof Cstr.style !== "string") {
        hostRef.$modeName$ = computeMode(elm);
        if (hostRef.$modeName$) {
          style = Cstr.style[hostRef.$modeName$];
        }
        if (BUILD.hydrateServerSide && hostRef.$modeName$) {
          elm.setAttribute("s-mode", hostRef.$modeName$);
        }
      }
      const scopeId2 = getScopeId(cmpMeta, hostRef.$modeName$);
      if (!styles.has(scopeId2)) {
        const endRegisterStyles = createTime("registerStyles", cmpMeta.$tagName$);
        if (BUILD.hydrateServerSide && BUILD.shadowDom && cmpMeta.$flags$ & 128) {
          style = scopeCss(style, scopeId2, true);
        }
        registerStyle(scopeId2, style, !!(cmpMeta.$flags$ & 1));
        endRegisterStyles();
      }
    }
  }
  const ancestorComponent = hostRef.$ancestorComponent$;
  const schedule = () => scheduleUpdate(hostRef, true);
  if (BUILD.asyncLoading && ancestorComponent && ancestorComponent["s-rc"]) {
    ancestorComponent["s-rc"].push(schedule);
  } else {
    schedule();
  }
};
var fireConnectedCallback = (instance, elm) => {
  if (BUILD.lazyLoad) {
    safeCall(instance, "connectedCallback", void 0, elm);
  }
};
var connectedCallback = elm => {
  if ((plt.$flags$ & 1) === 0) {
    const hostRef = getHostRef(elm);
    const cmpMeta = hostRef.$cmpMeta$;
    const endConnected = createTime("connectedCallback", cmpMeta.$tagName$);
    if (BUILD.hostListenerTargetParent) {
      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);
    }
    if (!(hostRef.$flags$ & 1)) {
      hostRef.$flags$ |= 1;
      let hostId;
      if (BUILD.hydrateClientSide) {
        hostId = elm.getAttribute(HYDRATE_ID);
        if (hostId) {
          if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1) {
            const scopeId2 = BUILD.mode ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute("s-mode")) : addStyle(elm.shadowRoot, cmpMeta);
            elm.classList.remove(scopeId2 + "-h", scopeId2 + "-s");
          } else if (BUILD.scoped && cmpMeta.$flags$ & 2) {
            const scopeId2 = getScopeId(cmpMeta, BUILD.mode ? elm.getAttribute("s-mode") : void 0);
            elm["s-sc"] = scopeId2;
          }
          initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);
        }
      }
      if (BUILD.slotRelocation && !hostId) {
        if (BUILD.hydrateServerSide || (BUILD.slot || BUILD.shadowDom) && cmpMeta.$flags$ & (4 | 8)) {
          setContentReference(elm);
        }
      }
      if (BUILD.asyncLoading) {
        let ancestorComponent = elm;
        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {
          if (BUILD.hydrateClientSide && ancestorComponent.nodeType === 1 && ancestorComponent.hasAttribute("s-id") && ancestorComponent["s-p"] || ancestorComponent["s-p"]) {
            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);
            break;
          }
        }
      }
      if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {
        Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {
          if (memberFlags & 31 && elm.hasOwnProperty(memberName)) {
            const value = elm[memberName];
            delete elm[memberName];
            elm[memberName] = value;
          }
        });
      }
      if (BUILD.initializeNextTick) {
        nextTick(() => initializeComponent(elm, hostRef, cmpMeta));
      } else {
        initializeComponent(elm, hostRef, cmpMeta);
      }
    } else {
      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);
      if (hostRef == null ? void 0 : hostRef.$lazyInstance$) {
        fireConnectedCallback(hostRef.$lazyInstance$, elm);
      } else if (hostRef == null ? void 0 : hostRef.$onReadyPromise$) {
        hostRef.$onReadyPromise$.then(() => fireConnectedCallback(hostRef.$lazyInstance$, elm));
      }
    }
    endConnected();
  }
};
var setContentReference = elm => {
  if (!win.document) {
    return;
  }
  const contentRefElm = elm["s-cr"] = win.document.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : "");
  contentRefElm["s-cn"] = true;
  insertBefore(elm, contentRefElm, elm.firstChild);
};
var disconnectInstance = (instance, elm) => {
  if (BUILD.lazyLoad) {
    safeCall(instance, "disconnectedCallback", void 0, elm || instance);
  }
};
var disconnectedCallback = async elm => {
  if ((plt.$flags$ & 1) === 0) {
    const hostRef = getHostRef(elm);
    if (BUILD.hostListener) {
      if (hostRef.$rmListeners$) {
        hostRef.$rmListeners$.map(rmListener => rmListener());
        hostRef.$rmListeners$ = void 0;
      }
    }
    if (!BUILD.lazyLoad) {
      disconnectInstance(elm);
    } else if (hostRef == null ? void 0 : hostRef.$lazyInstance$) {
      disconnectInstance(hostRef.$lazyInstance$, elm);
    } else if (hostRef == null ? void 0 : hostRef.$onReadyPromise$) {
      hostRef.$onReadyPromise$.then(() => disconnectInstance(hostRef.$lazyInstance$, elm));
    }
  }
  if (rootAppliedStyles.has(elm)) {
    rootAppliedStyles.delete(elm);
  }
  if (elm.shadowRoot && rootAppliedStyles.has(elm.shadowRoot)) {
    rootAppliedStyles.delete(elm.shadowRoot);
  }
};
var defineCustomElement = (Cstr, compactMeta) => {
  customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));
};
var proxyCustomElement = (Cstr, compactMeta) => {
  const cmpMeta = {
    $flags$: compactMeta[0],
    $tagName$: compactMeta[1]
  };
  if (BUILD.member) {
    cmpMeta.$members$ = compactMeta[2];
  }
  if (BUILD.hostListener) {
    cmpMeta.$listeners$ = compactMeta[3];
  }
  if (BUILD.watchCallback) {
    cmpMeta.$watchers$ = Cstr.$watchers$;
  }
  if (BUILD.reflect) {
    cmpMeta.$attrsToReflect$ = [];
  }
  if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1) {
    cmpMeta.$flags$ |= 8;
  }
  if (BUILD.experimentalSlotFixes) {
    if (BUILD.scoped && cmpMeta.$flags$ & 2) {
      patchPseudoShadowDom(Cstr.prototype);
    }
  } else {
    if (BUILD.slotChildNodesFix) {
      patchChildSlotNodes(Cstr.prototype);
    }
    if (BUILD.cloneNodeFix) {
      patchCloneNode(Cstr.prototype);
    }
    if (BUILD.appendChildSlotFix) {
      patchSlotAppendChild(Cstr.prototype);
    }
    if (BUILD.scopedSlotTextContentFix && cmpMeta.$flags$ & 2) {
      patchTextContent(Cstr.prototype);
    }
  }
  if (BUILD.hydrateClientSide && BUILD.shadowDom) {
    hydrateScopedToShadow();
  }
  const originalConnectedCallback = Cstr.prototype.connectedCallback;
  const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;
  Object.assign(Cstr.prototype, {
    __hasHostListenerAttached: false,
    __registerHost() {
      registerHost(this, cmpMeta);
    },
    connectedCallback() {
      if (!this.__hasHostListenerAttached) {
        const hostRef = getHostRef(this);
        addHostEventListeners(this, hostRef, cmpMeta.$listeners$, false);
        this.__hasHostListenerAttached = true;
      }
      connectedCallback(this);
      if (originalConnectedCallback) {
        originalConnectedCallback.call(this);
      }
    },
    disconnectedCallback() {
      disconnectedCallback(this);
      if (originalDisconnectedCallback) {
        originalDisconnectedCallback.call(this);
      }
    },
    __attachShadow() {
      if (supportsShadow) {
        if (!this.shadowRoot) {
          if (BUILD.shadowDelegatesFocus) {
            this.attachShadow({
              mode: "open",
              delegatesFocus: !!(cmpMeta.$flags$ & 16)
            });
          } else {
            this.attachShadow({
              mode: "open"
            });
          }
        } else {
          if (this.shadowRoot.mode !== "open") {
            throw new Error(`Unable to re-use existing shadow root for ${cmpMeta.$tagName$}! Mode is set to ${this.shadowRoot.mode} but Stencil only supports open shadow roots.`);
          }
        }
      } else {
        this.shadowRoot = this;
      }
    }
  });
  Cstr.is = cmpMeta.$tagName$;
  return proxyComponent(Cstr, cmpMeta, 1 | 2);
};
var forceModeUpdate = elm => {
  if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {
    const mode = computeMode(elm);
    const hostRef = getHostRef(elm);
    if (hostRef.$modeName$ !== mode) {
      const cmpMeta = hostRef.$cmpMeta$;
      const oldScopeId = elm["s-sc"];
      const scopeId2 = getScopeId(cmpMeta, mode);
      const style = elm.constructor.style[mode];
      const flags = cmpMeta.$flags$;
      if (style) {
        if (!styles.has(scopeId2)) {
          registerStyle(scopeId2, style, !!(flags & 1));
        }
        hostRef.$modeName$ = mode;
        elm.classList.remove(oldScopeId + "-h", oldScopeId + "-s");
        attachStyles(hostRef);
        forceUpdate(elm);
      }
    }
  }
};
var hmrStart = (hostElement, cmpMeta, hmrVersionId) => {
  const hostRef = getHostRef(hostElement);
  hostRef.$flags$ = 1;
  initializeComponent(hostElement, hostRef, cmpMeta, hmrVersionId);
};
var bootstrapLazy = (lazyBundles, options = {}) => {
  var _a;
  if (BUILD.profile && performance.mark) {
    performance.mark("st:app:start");
  }
  installDevTools();
  if (!win.document) {
    console.warn("Stencil: No document found. Skipping bootstrapping lazy components.");
    return;
  }
  const endBootstrap = createTime("bootstrapLazy");
  const cmpTags = [];
  const exclude = options.exclude || [];
  const customElements2 = win.customElements;
  const head = win.document.head;
  const metaCharset = head.querySelector("meta[charset]");
  const dataStyles = win.document.createElement("style");
  const deferredConnectedCallbacks = [];
  let appLoadFallback;
  let isBootstrapping = true;
  Object.assign(plt, options);
  plt.$resourcesUrl$ = new URL(options.resourcesUrl || "./", win.document.baseURI).href;
  if (BUILD.asyncQueue) {
    if (options.syncQueue) {
      plt.$flags$ |= 4;
    }
  }
  if (BUILD.hydrateClientSide) {
    plt.$flags$ |= 2;
  }
  if (BUILD.hydrateClientSide && BUILD.shadowDom) {
    hydrateScopedToShadow();
  }
  let hasSlotRelocation = false;
  lazyBundles.map(lazyBundle => {
    lazyBundle[1].map(compactMeta => {
      var _a2;
      const cmpMeta = {
        $flags$: compactMeta[0],
        $tagName$: compactMeta[1],
        $members$: compactMeta[2],
        $listeners$: compactMeta[3]
      };
      if (cmpMeta.$flags$ & 4) {
        hasSlotRelocation = true;
      }
      if (BUILD.member) {
        cmpMeta.$members$ = compactMeta[2];
      }
      if (BUILD.hostListener) {
        cmpMeta.$listeners$ = compactMeta[3];
      }
      if (BUILD.reflect) {
        cmpMeta.$attrsToReflect$ = [];
      }
      if (BUILD.watchCallback) {
        cmpMeta.$watchers$ = (_a2 = compactMeta[4]) != null ? _a2 : {};
      }
      if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1) {
        cmpMeta.$flags$ |= 8;
      }
      const tagName = BUILD.transformTagName && options.transformTagName ? options.transformTagName(cmpMeta.$tagName$) : cmpMeta.$tagName$;
      const HostElement = class extends HTMLElement {
        constructor(self) {
          super(self);
          this.hasRegisteredEventListeners = false;
          self = this;
          registerHost(self, cmpMeta);
          if (BUILD.shadowDom && cmpMeta.$flags$ & 1) {
            if (supportsShadow) {
              if (!self.shadowRoot) {
                if (BUILD.shadowDelegatesFocus) {
                  self.attachShadow({
                    mode: "open",
                    delegatesFocus: !!(cmpMeta.$flags$ & 16)
                  });
                } else {
                  self.attachShadow({
                    mode: "open"
                  });
                }
              } else {
                if (self.shadowRoot.mode !== "open") {
                  throw new Error(`Unable to re-use existing shadow root for ${cmpMeta.$tagName$}! Mode is set to ${self.shadowRoot.mode} but Stencil only supports open shadow roots.`);
                }
              }
            } else if (!BUILD.hydrateServerSide && !("shadowRoot" in self)) {
              self.shadowRoot = self;
            }
          }
        }
        connectedCallback() {
          const hostRef = getHostRef(this);
          if (!this.hasRegisteredEventListeners) {
            this.hasRegisteredEventListeners = true;
            addHostEventListeners(this, hostRef, cmpMeta.$listeners$, false);
          }
          if (appLoadFallback) {
            clearTimeout(appLoadFallback);
            appLoadFallback = null;
          }
          if (isBootstrapping) {
            deferredConnectedCallbacks.push(this);
          } else {
            plt.jmp(() => connectedCallback(this));
          }
        }
        disconnectedCallback() {
          plt.jmp(() => disconnectedCallback(this));
          plt.raf(() => {
            var _a3;
            const hostRef = getHostRef(this);
            const i2 = deferredConnectedCallbacks.findIndex(host => host === this);
            if (i2 > -1) {
              deferredConnectedCallbacks.splice(i2, 1);
            }
            if (((_a3 = hostRef == null ? void 0 : hostRef.$vnode$) == null ? void 0 : _a3.$elm$) instanceof Node && !hostRef.$vnode$.$elm$.isConnected) {
              delete hostRef.$vnode$.$elm$;
            }
          });
        }
        componentOnReady() {
          return getHostRef(this).$onReadyPromise$;
        }
      };
      if (BUILD.experimentalSlotFixes) {
        if (BUILD.scoped && cmpMeta.$flags$ & 2) {
          patchPseudoShadowDom(HostElement.prototype);
        }
      } else {
        if (BUILD.slotChildNodesFix) {
          patchChildSlotNodes(HostElement.prototype);
        }
        if (BUILD.cloneNodeFix) {
          patchCloneNode(HostElement.prototype);
        }
        if (BUILD.appendChildSlotFix) {
          patchSlotAppendChild(HostElement.prototype);
        }
        if (BUILD.scopedSlotTextContentFix && cmpMeta.$flags$ & 2) {
          patchTextContent(HostElement.prototype);
        }
      }
      if (BUILD.formAssociated && cmpMeta.$flags$ & 64) {
        HostElement.formAssociated = true;
      }
      if (BUILD.hotModuleReplacement) {
        HostElement.prototype["s-hmr"] = function (hmrVersionId) {
          hmrStart(this, cmpMeta, hmrVersionId);
        };
      }
      cmpMeta.$lazyBundleId$ = lazyBundle[0];
      if (!exclude.includes(tagName) && !customElements2.get(tagName)) {
        cmpTags.push(tagName);
        customElements2.define(tagName, proxyComponent(HostElement, cmpMeta, 1));
      }
    });
  });
  if (cmpTags.length > 0) {
    if (hasSlotRelocation) {
      dataStyles.textContent += SLOT_FB_CSS;
    }
    if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {
      dataStyles.textContent += cmpTags.sort() + HYDRATED_CSS;
    }
    if (dataStyles.innerHTML.length) {
      dataStyles.setAttribute("data-styles", "");
      const nonce = (_a = plt.$nonce$) != null ? _a : queryNonceMetaTagContent(win.document);
      if (nonce != null) {
        dataStyles.setAttribute("nonce", nonce);
      }
      head.insertBefore(dataStyles, metaCharset ? metaCharset.nextSibling : head.firstChild);
    }
  }
  isBootstrapping = false;
  if (deferredConnectedCallbacks.length) {
    deferredConnectedCallbacks.map(host => host.connectedCallback());
  } else {
    if (BUILD.profile) {
      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30, "timeout"));
    } else {
      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));
    }
  }
  endBootstrap();
};
var Fragment = (_, children) => children;
var addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {
  if (BUILD.hostListener && listeners && win.document) {
    if (BUILD.hostListenerTargetParent) {
      if (attachParentListeners) {
        listeners = listeners.filter(([flags]) => flags & 32);
      } else {
        listeners = listeners.filter(([flags]) => !(flags & 32));
      }
    }
    listeners.map(([flags, name, method]) => {
      const target = BUILD.hostListenerTarget ? getHostListenerTarget(win.document, elm, flags) : elm;
      const handler = hostListenerProxy(hostRef, method);
      const opts = hostListenerOpts(flags);
      plt.ael(target, name, handler, opts);
      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));
    });
  }
};
var hostListenerProxy = (hostRef, methodName) => ev => {
  var _a;
  try {
    if (BUILD.lazyLoad) {
      if (hostRef.$flags$ & 256) {
        (_a = hostRef.$lazyInstance$) == null ? void 0 : _a[methodName](ev);
      } else {
        (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);
      }
    } else {
      hostRef.$hostElement$[methodName](ev);
    }
  } catch (e) {
    consoleError(e, hostRef.$hostElement$);
  }
};
var getHostListenerTarget = (doc, elm, flags) => {
  if (BUILD.hostListenerTargetDocument && flags & 4) {
    return doc;
  }
  if (BUILD.hostListenerTargetWindow && flags & 8) {
    return win;
  }
  if (BUILD.hostListenerTargetBody && flags & 16) {
    return doc.body;
  }
  if (BUILD.hostListenerTargetParent && flags & 32 && elm.parentElement) {
    return elm.parentElement;
  }
  return elm;
};
var hostListenerOpts = flags => supportsListenerOptions ? {
  passive: (flags & 1) !== 0,
  capture: (flags & 2) !== 0
} : (flags & 2) !== 0;
var setNonce = nonce => plt.$nonce$ = nonce;
var setPlatformOptions = opts => Object.assign(plt, opts);
var insertVdomAnnotations = (doc, staticComponents) => {
  if (doc != null) {
    const docData = STENCIL_DOC_DATA in doc ? doc[STENCIL_DOC_DATA] : {
      ...DEFAULT_DOC_DATA
    };
    docData.staticComponents = new Set(staticComponents);
    const orgLocationNodes = [];
    parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);
    orgLocationNodes.forEach(orgLocationNode => {
      var _a;
      if (orgLocationNode != null && orgLocationNode["s-nr"]) {
        const nodeRef = orgLocationNode["s-nr"];
        let hostId = nodeRef["s-host-id"];
        let nodeId = nodeRef["s-node-id"];
        let childId = `${hostId}.${nodeId}`;
        if (hostId == null) {
          hostId = 0;
          docData.rootLevelIds++;
          nodeId = docData.rootLevelIds;
          childId = `${hostId}.${nodeId}`;
          if (nodeRef.nodeType === 1) {
            nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);
            if (typeof nodeRef["s-sn"] === "string" && !nodeRef.getAttribute("slot")) {
              nodeRef.setAttribute("s-sn", nodeRef["s-sn"]);
            }
          } else if (nodeRef.nodeType === 3) {
            if (hostId === 0) {
              const textContent = (_a = nodeRef.nodeValue) == null ? void 0 : _a.trim();
              if (textContent === "") {
                orgLocationNode.remove();
                return;
              }
            }
            const commentBeforeTextNode = doc.createComment(childId);
            commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;
            insertBefore(nodeRef.parentNode, commentBeforeTextNode, nodeRef);
          } else if (nodeRef.nodeType === 8) {
            const commentBeforeTextNode = doc.createComment(childId);
            commentBeforeTextNode.nodeValue = `${COMMENT_NODE_ID}.${childId}`;
            nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);
          }
        }
        let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;
        const orgLocationParentNode = orgLocationNode.parentElement;
        if (orgLocationParentNode) {
          if (orgLocationParentNode["s-en"] === "") {
            orgLocationNodeId += `.`;
          } else if (orgLocationParentNode["s-en"] === "c") {
            orgLocationNodeId += `.c`;
          }
        }
        orgLocationNode.nodeValue = orgLocationNodeId;
      }
    });
  }
};
var parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {
  var _a;
  if (node == null) {
    return;
  }
  if (node["s-nr"] != null) {
    orgLocationNodes.push(node);
  }
  if (node.nodeType === 1) {
    const childNodes = [...Array.from(node.childNodes), ...Array.from(((_a = node.shadowRoot) == null ? void 0 : _a.childNodes) || [])];
    childNodes.forEach(childNode => {
      const hostRef = getHostRef(childNode);
      if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {
        const cmpData = {
          nodeIds: 0
        };
        insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);
      }
      parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);
    });
  }
};
var insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {
  if (vnode != null) {
    const hostId = ++docData.hostIds;
    hostElm.setAttribute(HYDRATE_ID, hostId);
    if (hostElm["s-cr"] != null) {
      hostElm["s-cr"].nodeValue = `${CONTENT_REF_ID}.${hostId}`;
    }
    if (vnode.$children$ != null) {
      const depth = 0;
      vnode.$children$.forEach((vnodeChild, index) => {
        insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);
      });
    }
    if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute(HYDRATE_CHILD_ID)) {
      const parent = hostElm.parentElement;
      if (parent && parent.childNodes) {
        const parentChildNodes = Array.from(parent.childNodes);
        const comment = parentChildNodes.find(node => node.nodeType === 8 && node["s-sr"]);
        if (comment) {
          const index = parentChildNodes.indexOf(hostElm) - 1;
          vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment["s-host-id"]}.${comment["s-node-id"]}.0.${index}`);
        }
      }
    }
  }
};
var insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {
  const childElm = vnodeChild.$elm$;
  if (childElm == null) {
    return;
  }
  const nodeId = cmpData.nodeIds++;
  const childId = `${hostId}.${nodeId}.${depth}.${index}`;
  childElm["s-host-id"] = hostId;
  childElm["s-node-id"] = nodeId;
  if (childElm.nodeType === 1) {
    childElm.setAttribute(HYDRATE_CHILD_ID, childId);
    if (typeof childElm["s-sn"] === "string" && !childElm.getAttribute("slot")) {
      childElm.setAttribute("s-sn", childElm["s-sn"]);
    }
  } else if (childElm.nodeType === 3) {
    const parentNode = childElm.parentNode;
    const nodeName = parentNode == null ? void 0 : parentNode.nodeName;
    if (nodeName !== "STYLE" && nodeName !== "SCRIPT") {
      const textNodeId = `${TEXT_NODE_ID}.${childId}`;
      const commentBeforeTextNode = doc.createComment(textNodeId);
      insertBefore(parentNode, commentBeforeTextNode, childElm);
    }
  } else if (childElm.nodeType === 8) {
    if (childElm["s-sr"]) {
      const slotName = childElm["s-sn"] || "";
      const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;
      childElm.nodeValue = slotNodeId;
    }
  }
  if (vnodeChild.$children$ != null) {
    const childDepth = depth + 1;
    vnodeChild.$children$.forEach((vnode, index2) => {
      insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index2);
    });
  }
};


/***/ }),

/***/ "../web-components/dist/components/index3.js":
/*!***************************************************!*\
  !*** ../web-components/dist/components/index3.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ convertStringToInteger),
/* harmony export */   b: () => (/* binding */ cn),
/* harmony export */   c: () => (/* binding */ convertDurationStringToIntegerArray),
/* harmony export */   f: () => (/* binding */ formatDuration)
/* harmony export */ });
/* harmony import */ var _index4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index4.js */ "../web-components/dist/components/index4.js");

const convertStringToInteger = str => parseInt(str, 10) || 0;
const convertDurationStringToIntegerArray = duration => duration?.split(':').map(v => convertStringToInteger(v)).reduce((a, c) => [c, ...a], []) || [0];
function r(e) {
  var t,
    f,
    n = "";
  if ("string" == typeof e || "number" == typeof e) n += e;else if ("object" == typeof e) if (Array.isArray(e)) {
    var o = e.length;
    for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
  } else for (f in e) e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++) (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
function cn(...inputs) {
  return clsx(inputs);
}
const formatDuration = inputSeconds => {
  let duration = '00:00';
  if (typeof inputSeconds === 'string' && inputSeconds.indexOf(':') > -1) {
    return inputSeconds;
  }
  const totalSeconds = typeof inputSeconds === 'string' ? parseInt(inputSeconds, 10) : inputSeconds;
  if (typeof totalSeconds === 'number' && totalSeconds > 0) {
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor(totalSeconds % 3600 / 60);
    const seconds = Math.round(totalSeconds % 60);
    duration = [...(hours ? [hours] : []), String(minutes).padStart(2, '0'), String(seconds).padStart(2, '0')].join(':');
  }
  return duration;
};


/***/ }),

/***/ "../web-components/dist/components/index4.js":
/*!***************************************************!*\
  !*** ../web-components/dist/components/index4.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ attributesToObject)
/* harmony export */ });
function attributesToObject(el) {
  let result = {};
  for (let i = 0; i < el.attributes.length; i++) {
    result[el.attributes[i].name] = el.attributes[i].value;
  }
  return result;
}


/***/ }),

/***/ "../web-components/dist/components/index5.js":
/*!***************************************************!*\
  !*** ../web-components/dist/components/index5.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _: () => (/* binding */ __)
/* harmony export */ });
function memize(fn, options) {
  var size = 0;
  var head;
  var tail;
  options = options || {};
  function memoized() {
    var node = head,
      len = arguments.length,
      args,
      i;
    searchCache: while (node) {
      if (node.args.length !== arguments.length) {
        node = node.next;
        continue;
      }
      for (i = 0; i < len; i++) {
        if (node.args[i] !== arguments[i]) {
          node = node.next;
          continue searchCache;
        }
      }
      if (node !== head) {
        if (node === tail) {
          tail = node.prev;
        }
        node.prev.next = node.next;
        if (node.next) {
          node.next.prev = node.prev;
        }
        node.next = head;
        node.prev = null;
        head.prev = node;
        head = node;
      }
      return node.val;
    }
    args = new Array(len);
    for (i = 0; i < len; i++) {
      args[i] = arguments[i];
    }
    node = {
      args: args,
      val: fn.apply(null, args)
    };
    if (head) {
      head.prev = node;
      node.next = head;
    } else {
      tail = node;
    }
    if (size === options.maxSize) {
      tail = tail.prev;
      tail.next = null;
    } else {
      size++;
    }
    head = node;
    return node.val;
  }
  memoized.clear = function () {
    head = null;
    tail = null;
    size = 0;
  };
  return memoized;
}
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}
function getDefaultExportFromNamespaceIfPresent(n) {
  return n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;
}
function getDefaultExportFromNamespaceIfNotNamed(n) {
  return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
}
function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
  if (typeof f == "function") {
    var a = function a() {
      if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
      }
      return f.apply(this, arguments);
    };
    a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {
    value: true
  });
  Object.keys(n).forEach(function (k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function () {
        return n[k];
      }
    });
  });
  return a;
}
var sprintf$1 = {};
var hasRequiredSprintf;
function requireSprintf() {
  if (hasRequiredSprintf) return sprintf$1;
  hasRequiredSprintf = 1;
  (function (exports) {
    !function () {
      'use strict';

      var re = {
        not_string: /[^s]/,
        not_bool: /[^t]/,
        not_type: /[^T]/,
        not_primitive: /[^v]/,
        number: /[diefg]/,
        numeric_arg: /[bcdiefguxX]/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[+-]/
      };
      function sprintf(key) {
        return sprintf_format(sprintf_parse(key), arguments);
      }
      function vsprintf(fmt, argv) {
        return sprintf.apply(null, [fmt].concat(argv || []));
      }
      function sprintf_format(parse_tree, argv) {
        var cursor = 1,
          tree_length = parse_tree.length,
          arg,
          output = '',
          i,
          k,
          ph,
          pad,
          pad_character,
          pad_length,
          is_positive,
          sign;
        for (i = 0; i < tree_length; i++) {
          if (typeof parse_tree[i] === 'string') {
            output += parse_tree[i];
          } else if (typeof parse_tree[i] === 'object') {
            ph = parse_tree[i];
            if (ph.keys) {
              arg = argv[cursor];
              for (k = 0; k < ph.keys.length; k++) {
                if (arg == undefined) {
                  throw new Error(sprintf('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k], ph.keys[k - 1]));
                }
                arg = arg[ph.keys[k]];
              }
            } else if (ph.param_no) {
              arg = argv[ph.param_no];
            } else {
              arg = argv[cursor++];
            }
            if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {
              arg = arg();
            }
            if (re.numeric_arg.test(ph.type) && typeof arg !== 'number' && isNaN(arg)) {
              throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg));
            }
            if (re.number.test(ph.type)) {
              is_positive = arg >= 0;
            }
            switch (ph.type) {
              case 'b':
                arg = parseInt(arg, 10).toString(2);
                break;
              case 'c':
                arg = String.fromCharCode(parseInt(arg, 10));
                break;
              case 'd':
              case 'i':
                arg = parseInt(arg, 10);
                break;
              case 'j':
                arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);
                break;
              case 'e':
                arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();
                break;
              case 'f':
                arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);
                break;
              case 'g':
                arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);
                break;
              case 'o':
                arg = (parseInt(arg, 10) >>> 0).toString(8);
                break;
              case 's':
                arg = String(arg);
                arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                break;
              case 't':
                arg = String(!!arg);
                arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                break;
              case 'T':
                arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();
                arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                break;
              case 'u':
                arg = parseInt(arg, 10) >>> 0;
                break;
              case 'v':
                arg = arg.valueOf();
                arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                break;
              case 'x':
                arg = (parseInt(arg, 10) >>> 0).toString(16);
                break;
              case 'X':
                arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();
                break;
            }
            if (re.json.test(ph.type)) {
              output += arg;
            } else {
              if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
                sign = is_positive ? '+' : '-';
                arg = arg.toString().replace(re.sign, '');
              } else {
                sign = '';
              }
              pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' ';
              pad_length = ph.width - (sign + arg).length;
              pad = ph.width ? pad_length > 0 ? pad_character.repeat(pad_length) : '' : '';
              output += ph.align ? sign + arg + pad : pad_character === '0' ? sign + pad + arg : pad + sign + arg;
            }
          }
        }
        return output;
      }
      var sprintf_cache = Object.create(null);
      function sprintf_parse(fmt) {
        if (sprintf_cache[fmt]) {
          return sprintf_cache[fmt];
        }
        var _fmt = fmt,
          match,
          parse_tree = [],
          arg_names = 0;
        while (_fmt) {
          if ((match = re.text.exec(_fmt)) !== null) {
            parse_tree.push(match[0]);
          } else if ((match = re.modulo.exec(_fmt)) !== null) {
            parse_tree.push('%');
          } else if ((match = re.placeholder.exec(_fmt)) !== null) {
            if (match[2]) {
              arg_names |= 1;
              var field_list = [],
                replacement_field = match[2],
                field_match = [];
              if ((field_match = re.key.exec(replacement_field)) !== null) {
                field_list.push(field_match[1]);
                while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                  if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                    field_list.push(field_match[1]);
                  } else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                    field_list.push(field_match[1]);
                  } else {
                    throw new SyntaxError('[sprintf] failed to parse named argument key');
                  }
                }
              } else {
                throw new SyntaxError('[sprintf] failed to parse named argument key');
              }
              match[2] = field_list;
            } else {
              arg_names |= 2;
            }
            if (arg_names === 3) {
              throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported');
            }
            parse_tree.push({
              placeholder: match[0],
              param_no: match[1],
              keys: match[2],
              sign: match[3],
              pad_char: match[4],
              align: match[5],
              width: match[6],
              precision: match[7],
              type: match[8]
            });
          } else {
            throw new SyntaxError('[sprintf] unexpected placeholder');
          }
          _fmt = _fmt.substring(match[0].length);
        }
        return sprintf_cache[fmt] = parse_tree;
      }
      if (true) {
        exports['sprintf'] = sprintf;
        exports['vsprintf'] = vsprintf;
      }
      if (typeof window !== 'undefined') {
        window['sprintf'] = sprintf;
        window['vsprintf'] = vsprintf;
        if (false) {}
      }
    }();
  })(sprintf$1);
  return sprintf$1;
}
var sprintfExports = requireSprintf();
var sprintfjs = getDefaultExportFromCjs(sprintfExports);
const logErrorOnce = memize(console.error);
function sprintf(format, ...args) {
  try {
    return sprintfjs.sprintf(format, ...args);
  } catch (error) {
    if (error instanceof Error) {
      logErrorOnce('sprintf error: \n\n' + error.toString());
    }
    return format;
  }
}
var PRECEDENCE, OPENERS, TERMINATORS, PATTERN;
PRECEDENCE = {
  '(': 9,
  '!': 8,
  '*': 7,
  '/': 7,
  '%': 7,
  '+': 6,
  '-': 6,
  '<': 5,
  '<=': 5,
  '>': 5,
  '>=': 5,
  '==': 4,
  '!=': 4,
  '&&': 3,
  '||': 2,
  '?': 1,
  '?:': 1
};
OPENERS = ['(', '?'];
TERMINATORS = {
  ')': ['('],
  ':': ['?', '?:']
};
PATTERN = /<=|>=|==|!=|&&|\|\||\?:|\(|!|\*|\/|%|\+|-|<|>|\?|\)|:/;
function postfix(expression) {
  var terms = [],
    stack = [],
    match,
    operator,
    term,
    element;
  while (match = expression.match(PATTERN)) {
    operator = match[0];
    term = expression.substr(0, match.index).trim();
    if (term) {
      terms.push(term);
    }
    while (element = stack.pop()) {
      if (TERMINATORS[operator]) {
        if (TERMINATORS[operator][0] === element) {
          operator = TERMINATORS[operator][1] || operator;
          break;
        }
      } else if (OPENERS.indexOf(element) >= 0 || PRECEDENCE[element] < PRECEDENCE[operator]) {
        stack.push(element);
        break;
      }
      terms.push(element);
    }
    if (!TERMINATORS[operator]) {
      stack.push(operator);
    }
    expression = expression.substr(match.index + operator.length);
  }
  expression = expression.trim();
  if (expression) {
    terms.push(expression);
  }
  return terms.concat(stack.reverse());
}
var OPERATORS = {
  '!': function (a) {
    return !a;
  },
  '*': function (a, b) {
    return a * b;
  },
  '/': function (a, b) {
    return a / b;
  },
  '%': function (a, b) {
    return a % b;
  },
  '+': function (a, b) {
    return a + b;
  },
  '-': function (a, b) {
    return a - b;
  },
  '<': function (a, b) {
    return a < b;
  },
  '<=': function (a, b) {
    return a <= b;
  },
  '>': function (a, b) {
    return a > b;
  },
  '>=': function (a, b) {
    return a >= b;
  },
  '==': function (a, b) {
    return a === b;
  },
  '!=': function (a, b) {
    return a !== b;
  },
  '&&': function (a, b) {
    return a && b;
  },
  '||': function (a, b) {
    return a || b;
  },
  '?:': function (a, b, c) {
    if (a) {
      throw b;
    }
    return c;
  }
};
function evaluate(postfix, variables) {
  var stack = [],
    i,
    j,
    args,
    getOperatorResult,
    term,
    value;
  for (i = 0; i < postfix.length; i++) {
    term = postfix[i];
    getOperatorResult = OPERATORS[term];
    if (getOperatorResult) {
      j = getOperatorResult.length;
      args = Array(j);
      while (j--) {
        args[j] = stack.pop();
      }
      try {
        value = getOperatorResult.apply(null, args);
      } catch (earlyReturn) {
        return earlyReturn;
      }
    } else if (variables.hasOwnProperty(term)) {
      value = variables[term];
    } else {
      value = +term;
    }
    stack.push(value);
  }
  return stack[0];
}
function compile(expression) {
  var terms = postfix(expression);
  return function (variables) {
    return evaluate(terms, variables);
  };
}
function pluralForms(expression) {
  var evaluate = compile(expression);
  return function (n) {
    return +evaluate({
      n: n
    });
  };
}
var DEFAULT_OPTIONS = {
  contextDelimiter: '\u0004',
  onMissingKey: null
};
function getPluralExpression(pf) {
  var parts, i, part;
  parts = pf.split(';');
  for (i = 0; i < parts.length; i++) {
    part = parts[i].trim();
    if (part.indexOf('plural=') === 0) {
      return part.substr(7);
    }
  }
}
function Tannin(data, options) {
  var key;
  this.data = data;
  this.pluralForms = {};
  this.options = {};
  for (key in DEFAULT_OPTIONS) {
    this.options[key] = options !== undefined && key in options ? options[key] : DEFAULT_OPTIONS[key];
  }
}
Tannin.prototype.getPluralForm = function (domain, n) {
  var getPluralForm = this.pluralForms[domain],
    config,
    plural,
    pf;
  if (!getPluralForm) {
    config = this.data[domain][''];
    pf = config['Plural-Forms'] || config['plural-forms'] || config.plural_forms;
    if (typeof pf !== 'function') {
      plural = getPluralExpression(config['Plural-Forms'] || config['plural-forms'] || config.plural_forms);
      pf = pluralForms(plural);
    }
    getPluralForm = this.pluralForms[domain] = pf;
  }
  return getPluralForm(n);
};
Tannin.prototype.dcnpgettext = function (domain, context, singular, plural, n) {
  var index, key, entry;
  if (n === undefined) {
    index = 0;
  } else {
    index = this.getPluralForm(domain, n);
  }
  key = singular;
  if (context) {
    key = context + this.options.contextDelimiter + singular;
  }
  entry = this.data[domain][key];
  if (entry && entry[index]) {
    return entry[index];
  }
  if (this.options.onMissingKey) {
    this.options.onMissingKey(singular, domain);
  }
  return index === 0 ? singular : plural;
};
const DEFAULT_LOCALE_DATA = {
  '': {
    plural_forms(n) {
      return n === 1 ? 0 : 1;
    }
  }
};
const I18N_HOOK_REGEXP = /^i18n\.(n?gettext|has_translation)(_|$)/;
const createI18n = (initialData, initialDomain, hooks) => {
  const tannin = new Tannin({});
  const listeners = new Set();
  const notifyListeners = () => {
    listeners.forEach(listener => listener());
  };
  const subscribe = callback => {
    listeners.add(callback);
    return () => listeners.delete(callback);
  };
  const getLocaleData = (domain = 'default') => tannin.data[domain];
  const doSetLocaleData = (data, domain = 'default') => {
    tannin.data[domain] = {
      ...tannin.data[domain],
      ...data
    };
    tannin.data[domain][''] = {
      ...DEFAULT_LOCALE_DATA[''],
      ...tannin.data[domain]?.['']
    };
    delete tannin.pluralForms[domain];
  };
  const setLocaleData = (data, domain) => {
    doSetLocaleData(data, domain);
    notifyListeners();
  };
  const addLocaleData = (data, domain = 'default') => {
    tannin.data[domain] = {
      ...tannin.data[domain],
      ...data,
      '': {
        ...DEFAULT_LOCALE_DATA[''],
        ...tannin.data[domain]?.[''],
        ...data?.['']
      }
    };
    delete tannin.pluralForms[domain];
    notifyListeners();
  };
  const resetLocaleData = (data, domain) => {
    tannin.data = {};
    tannin.pluralForms = {};
    setLocaleData(data, domain);
  };
  const dcnpgettext = (domain = 'default', context, single, plural, number) => {
    if (!tannin.data[domain]) {
      doSetLocaleData(undefined, domain);
    }
    return tannin.dcnpgettext(domain, context, single, plural, number);
  };
  const getFilterDomain = (domain = 'default') => domain;
  const __ = (text, domain) => {
    let translation = dcnpgettext(domain, undefined, text);
    if (!hooks) {
      return translation;
    }
    translation = hooks.applyFilters('i18n.gettext', translation, text, domain);
    return hooks.applyFilters('i18n.gettext_' + getFilterDomain(domain), translation, text, domain);
  };
  const _x = (text, context, domain) => {
    let translation = dcnpgettext(domain, context, text);
    if (!hooks) {
      return translation;
    }
    translation = hooks.applyFilters('i18n.gettext_with_context', translation, text, context, domain);
    return hooks.applyFilters('i18n.gettext_with_context_' + getFilterDomain(domain), translation, text, context, domain);
  };
  const _n = (single, plural, number, domain) => {
    let translation = dcnpgettext(domain, undefined, single, plural, number);
    if (!hooks) {
      return translation;
    }
    translation = hooks.applyFilters('i18n.ngettext', translation, single, plural, number, domain);
    return hooks.applyFilters('i18n.ngettext_' + getFilterDomain(domain), translation, single, plural, number, domain);
  };
  const _nx = (single, plural, number, context, domain) => {
    let translation = dcnpgettext(domain, context, single, plural, number);
    if (!hooks) {
      return translation;
    }
    translation = hooks.applyFilters('i18n.ngettext_with_context', translation, single, plural, number, context, domain);
    return hooks.applyFilters('i18n.ngettext_with_context_' + getFilterDomain(domain), translation, single, plural, number, context, domain);
  };
  const isRTL = () => {
    return 'rtl' === _x('ltr', 'text direction');
  };
  const hasTranslation = (single, context, domain) => {
    const key = context ? context + '\u0004' + single : single;
    let result = !!tannin.data?.[domain !== null && domain !== void 0 ? domain : 'default']?.[key];
    if (hooks) {
      result = hooks.applyFilters('i18n.has_translation', result, single, context, domain);
      result = hooks.applyFilters('i18n.has_translation_' + getFilterDomain(domain), result, single, context, domain);
    }
    return result;
  };
  if (initialData) {
    setLocaleData(initialData, initialDomain);
  }
  if (hooks) {
    const onHookAddedOrRemoved = hookName => {
      if (I18N_HOOK_REGEXP.test(hookName)) {
        notifyListeners();
      }
    };
    hooks.addAction('hookAdded', 'core/i18n', onHookAddedOrRemoved);
    hooks.addAction('hookRemoved', 'core/i18n', onHookAddedOrRemoved);
  }
  return {
    getLocaleData,
    setLocaleData,
    addLocaleData,
    resetLocaleData,
    subscribe,
    __,
    _x,
    _n,
    _nx,
    isRTL,
    hasTranslation
  };
};
function validateNamespace(namespace) {
  if ('string' !== typeof namespace || '' === namespace) {
    console.error('The namespace must be a non-empty string.');
    return false;
  }
  if (!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(namespace)) {
    console.error('The namespace can only contain numbers, letters, dashes, periods, underscores and slashes.');
    return false;
  }
  return true;
}
function validateHookName(hookName) {
  if ('string' !== typeof hookName || '' === hookName) {
    console.error('The hook name must be a non-empty string.');
    return false;
  }
  if (/^__/.test(hookName)) {
    console.error('The hook name cannot begin with `__`.');
    return false;
  }
  if (!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(hookName)) {
    console.error('The hook name can only contain numbers, letters, dashes, periods and underscores.');
    return false;
  }
  return true;
}
function createAddHook(hooks, storeKey) {
  return function addHook(hookName, namespace, callback, priority = 10) {
    const hooksStore = hooks[storeKey];
    if (!validateHookName(hookName)) {
      return;
    }
    if (!validateNamespace(namespace)) {
      return;
    }
    if ('function' !== typeof callback) {
      console.error('The hook callback must be a function.');
      return;
    }
    if ('number' !== typeof priority) {
      console.error('If specified, the hook priority must be a number.');
      return;
    }
    const handler = {
      callback,
      priority,
      namespace
    };
    if (hooksStore[hookName]) {
      const handlers = hooksStore[hookName].handlers;
      let i;
      for (i = handlers.length; i > 0; i--) {
        if (priority >= handlers[i - 1].priority) {
          break;
        }
      }
      if (i === handlers.length) {
        handlers[i] = handler;
      } else {
        handlers.splice(i, 0, handler);
      }
      hooksStore.__current.forEach(hookInfo => {
        if (hookInfo.name === hookName && hookInfo.currentIndex >= i) {
          hookInfo.currentIndex++;
        }
      });
    } else {
      hooksStore[hookName] = {
        handlers: [handler],
        runs: 0
      };
    }
    if (hookName !== 'hookAdded') {
      hooks.doAction('hookAdded', hookName, namespace, callback, priority);
    }
  };
}
function createRemoveHook(hooks, storeKey, removeAll = false) {
  return function removeHook(hookName, namespace) {
    const hooksStore = hooks[storeKey];
    if (!validateHookName(hookName)) {
      return;
    }
    if (!removeAll && !validateNamespace(namespace)) {
      return;
    }
    if (!hooksStore[hookName]) {
      return 0;
    }
    let handlersRemoved = 0;
    if (removeAll) {
      handlersRemoved = hooksStore[hookName].handlers.length;
      hooksStore[hookName] = {
        runs: hooksStore[hookName].runs,
        handlers: []
      };
    } else {
      const handlers = hooksStore[hookName].handlers;
      for (let i = handlers.length - 1; i >= 0; i--) {
        if (handlers[i].namespace === namespace) {
          handlers.splice(i, 1);
          handlersRemoved++;
          hooksStore.__current.forEach(hookInfo => {
            if (hookInfo.name === hookName && hookInfo.currentIndex >= i) {
              hookInfo.currentIndex--;
            }
          });
        }
      }
    }
    if (hookName !== 'hookRemoved') {
      hooks.doAction('hookRemoved', hookName, namespace);
    }
    return handlersRemoved;
  };
}
function createHasHook(hooks, storeKey) {
  return function hasHook(hookName, namespace) {
    const hooksStore = hooks[storeKey];
    if ('undefined' !== typeof namespace) {
      return hookName in hooksStore && hooksStore[hookName].handlers.some(hook => hook.namespace === namespace);
    }
    return hookName in hooksStore;
  };
}
function createRunHook(hooks, storeKey, returnFirstArg, async) {
  return function runHook(hookName, ...args) {
    const hooksStore = hooks[storeKey];
    if (!hooksStore[hookName]) {
      hooksStore[hookName] = {
        handlers: [],
        runs: 0
      };
    }
    hooksStore[hookName].runs++;
    const handlers = hooksStore[hookName].handlers;
    if (true) {
      if ('hookAdded' !== hookName && hooksStore.all) {
        handlers.push(...hooksStore.all.handlers);
      }
    }
    if (!handlers || !handlers.length) {
      return returnFirstArg ? args[0] : undefined;
    }
    const hookInfo = {
      name: hookName,
      currentIndex: 0
    };
    async function asyncRunner() {
      try {
        hooksStore.__current.add(hookInfo);
        let result = returnFirstArg ? args[0] : undefined;
        while (hookInfo.currentIndex < handlers.length) {
          const handler = handlers[hookInfo.currentIndex];
          result = await handler.callback.apply(null, args);
          if (returnFirstArg) {
            args[0] = result;
          }
          hookInfo.currentIndex++;
        }
        return returnFirstArg ? result : undefined;
      } finally {
        hooksStore.__current.delete(hookInfo);
      }
    }
    function syncRunner() {
      try {
        hooksStore.__current.add(hookInfo);
        let result = returnFirstArg ? args[0] : undefined;
        while (hookInfo.currentIndex < handlers.length) {
          const handler = handlers[hookInfo.currentIndex];
          result = handler.callback.apply(null, args);
          if (returnFirstArg) {
            args[0] = result;
          }
          hookInfo.currentIndex++;
        }
        return returnFirstArg ? result : undefined;
      } finally {
        hooksStore.__current.delete(hookInfo);
      }
    }
    return (async ? asyncRunner : syncRunner)();
  };
}
function createCurrentHook(hooks, storeKey) {
  return function currentHook() {
    var _currentArray$at$name;
    const hooksStore = hooks[storeKey];
    const currentArray = Array.from(hooksStore.__current);
    return (_currentArray$at$name = currentArray.at(-1)?.name) !== null && _currentArray$at$name !== void 0 ? _currentArray$at$name : null;
  };
}
function createDoingHook(hooks, storeKey) {
  return function doingHook(hookName) {
    const hooksStore = hooks[storeKey];
    if ('undefined' === typeof hookName) {
      return hooksStore.__current.size > 0;
    }
    return Array.from(hooksStore.__current).some(hook => hook.name === hookName);
  };
}
function createDidHook(hooks, storeKey) {
  return function didHook(hookName) {
    const hooksStore = hooks[storeKey];
    if (!validateHookName(hookName)) {
      return;
    }
    return hooksStore[hookName] && hooksStore[hookName].runs ? hooksStore[hookName].runs : 0;
  };
}
class _Hooks {
  constructor() {
    this.actions = Object.create(null);
    this.actions.__current = new Set();
    this.filters = Object.create(null);
    this.filters.__current = new Set();
    this.addAction = createAddHook(this, 'actions');
    this.addFilter = createAddHook(this, 'filters');
    this.removeAction = createRemoveHook(this, 'actions');
    this.removeFilter = createRemoveHook(this, 'filters');
    this.hasAction = createHasHook(this, 'actions');
    this.hasFilter = createHasHook(this, 'filters');
    this.removeAllActions = createRemoveHook(this, 'actions', true);
    this.removeAllFilters = createRemoveHook(this, 'filters', true);
    this.doAction = createRunHook(this, 'actions', false, false);
    this.doActionAsync = createRunHook(this, 'actions', false, true);
    this.applyFilters = createRunHook(this, 'filters', true, false);
    this.applyFiltersAsync = createRunHook(this, 'filters', true, true);
    this.currentAction = createCurrentHook(this, 'actions');
    this.currentFilter = createCurrentHook(this, 'filters');
    this.doingAction = createDoingHook(this, 'actions');
    this.doingFilter = createDoingHook(this, 'filters');
    this.didAction = createDidHook(this, 'actions');
    this.didFilter = createDidHook(this, 'filters');
  }
}
function createHooks() {
  return new _Hooks();
}
const defaultHooks = createHooks();
const {
  addAction,
  addFilter,
  removeAction,
  removeFilter,
  hasAction,
  hasFilter,
  removeAllActions,
  removeAllFilters,
  doAction,
  doActionAsync,
  applyFilters,
  applyFiltersAsync,
  currentAction,
  currentFilter,
  doingAction,
  doingFilter,
  didAction,
  didFilter,
  actions,
  filters
} = defaultHooks;
const i18n = createI18n(undefined, undefined, defaultHooks);
const getLocaleData = i18n.getLocaleData.bind(i18n);
const setLocaleData = i18n.setLocaleData.bind(i18n);
const resetLocaleData = i18n.resetLocaleData.bind(i18n);
const subscribe = i18n.subscribe.bind(i18n);
const __ = i18n.__.bind(i18n);
const _x = i18n._x.bind(i18n);
const _n = i18n._n.bind(i18n);
const _nx = i18n._nx.bind(i18n);
const isRTL = i18n.isRTL.bind(i18n);
const hasTranslation = i18n.hasTranslation.bind(i18n);


/***/ }),

/***/ "../web-components/dist/components/lucide.js":
/*!***************************************************!*\
  !*** ../web-components/dist/components/lucide.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ Pause),
/* harmony export */   V: () => (/* binding */ VolumeOff),
/* harmony export */   a: () => (/* binding */ Play),
/* harmony export */   b: () => (/* binding */ Volume2),
/* harmony export */   c: () => (/* binding */ createElement),
/* harmony export */   d: () => (/* binding */ Volume1)
/* harmony export */ });
const defaultAttributes = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": 2,
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
const createSVGElement = ([tag, attrs, children]) => {
  const element = document.createElementNS("http://www.w3.org/2000/svg", tag);
  Object.keys(attrs).forEach(name => {
    element.setAttribute(name, String(attrs[name]));
  });
  if (children?.length) {
    children.forEach(child => {
      const childElement = createSVGElement(child);
      element.appendChild(childElement);
    });
  }
  return element;
};
const createElement = (iconNode, customAttrs = {}) => {
  const tag = "svg";
  const attrs = {
    ...defaultAttributes,
    ...customAttrs
  };
  return createSVGElement([tag, attrs, iconNode]);
};
const getAttrs = element => Array.from(element.attributes).reduce((attrs, attr) => {
  attrs[attr.name] = attr.value;
  return attrs;
}, {});
const getClassNames = attrs => {
  if (typeof attrs === "string") return attrs;
  if (!attrs || !attrs.class) return "";
  if (attrs.class && typeof attrs.class === "string") {
    return attrs.class.split(" ");
  }
  if (attrs.class && Array.isArray(attrs.class)) {
    return attrs.class;
  }
  return "";
};
const combineClassNames = arrayOfClassnames => {
  const classNameArray = arrayOfClassnames.flatMap(getClassNames);
  return classNameArray.map(classItem => classItem.trim()).filter(Boolean).filter((value, index, self) => self.indexOf(value) === index).join(" ");
};
const toPascalCase = string => string.replace(/(\w)(\w*)(_|-|\s*)/g, (g0, g1, g2) => g1.toUpperCase() + g2.toLowerCase());
const replaceElement = (element, {
  nameAttr,
  icons,
  attrs
}) => {
  const iconName = element.getAttribute(nameAttr);
  if (iconName == null) return;
  const ComponentName = toPascalCase(iconName);
  const iconNode = icons[ComponentName];
  if (!iconNode) {
    return console.warn(`${element.outerHTML} icon name was not found in the provided icons object.`);
  }
  const elementAttrs = getAttrs(element);
  const iconAttrs = {
    ...defaultAttributes,
    "data-lucide": iconName,
    ...attrs,
    ...elementAttrs
  };
  const classNames = combineClassNames(["lucide", `lucide-${iconName}`, elementAttrs, attrs]);
  if (classNames) {
    Object.assign(iconAttrs, {
      class: classNames
    });
  }
  const svgElement = createElement(iconNode, iconAttrs);
  return element.parentNode?.replaceChild(svgElement, element);
};
const AArrowDown = [["path", {
  d: "M3.5 13h6"
}], ["path", {
  d: "m2 16 4.5-9 4.5 9"
}], ["path", {
  d: "M18 7v9"
}], ["path", {
  d: "m14 12 4 4 4-4"
}]];
const AArrowUp = [["path", {
  d: "M3.5 13h6"
}], ["path", {
  d: "m2 16 4.5-9 4.5 9"
}], ["path", {
  d: "M18 16V7"
}], ["path", {
  d: "m14 11 4-4 4 4"
}]];
const ALargeSmall = [["path", {
  d: "M21 14h-5"
}], ["path", {
  d: "M16 16v-3.5a2.5 2.5 0 0 1 5 0V16"
}], ["path", {
  d: "M4.5 13h6"
}], ["path", {
  d: "m3 16 4.5-9 4.5 9"
}]];
const Accessibility = [["circle", {
  cx: "16",
  cy: "4",
  r: "1"
}], ["path", {
  d: "m18 19 1-7-6 1"
}], ["path", {
  d: "m5 8 3-3 5.5 3-2.36 3.5"
}], ["path", {
  d: "M4.24 14.5a5 5 0 0 0 6.88 6"
}], ["path", {
  d: "M13.76 17.5a5 5 0 0 0-6.88-6"
}]];
const Activity = [["path", {
  d: "M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2"
}]];
const AirVent = [["path", {
  d: "M6 12H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M6 8h12"
}], ["path", {
  d: "M18.3 17.7a2.5 2.5 0 0 1-3.16 3.83 2.53 2.53 0 0 1-1.14-2V12"
}], ["path", {
  d: "M6.6 15.6A2 2 0 1 0 10 17v-5"
}]];
const Airplay = [["path", {
  d: "M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"
}], ["path", {
  d: "m12 15 5 6H7Z"
}]];
const AlarmClockCheck = [["circle", {
  cx: "12",
  cy: "13",
  r: "8"
}], ["path", {
  d: "M5 3 2 6"
}], ["path", {
  d: "m22 6-3-3"
}], ["path", {
  d: "M6.38 18.7 4 21"
}], ["path", {
  d: "M17.64 18.67 20 21"
}], ["path", {
  d: "m9 13 2 2 4-4"
}]];
const AlarmClockMinus = [["circle", {
  cx: "12",
  cy: "13",
  r: "8"
}], ["path", {
  d: "M5 3 2 6"
}], ["path", {
  d: "m22 6-3-3"
}], ["path", {
  d: "M6.38 18.7 4 21"
}], ["path", {
  d: "M17.64 18.67 20 21"
}], ["path", {
  d: "M9 13h6"
}]];
const AlarmClockOff = [["path", {
  d: "M6.87 6.87a8 8 0 1 0 11.26 11.26"
}], ["path", {
  d: "M19.9 14.25a8 8 0 0 0-9.15-9.15"
}], ["path", {
  d: "m22 6-3-3"
}], ["path", {
  d: "M6.26 18.67 4 21"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M4 4 2 6"
}]];
const AlarmClockPlus = [["circle", {
  cx: "12",
  cy: "13",
  r: "8"
}], ["path", {
  d: "M5 3 2 6"
}], ["path", {
  d: "m22 6-3-3"
}], ["path", {
  d: "M6.38 18.7 4 21"
}], ["path", {
  d: "M17.64 18.67 20 21"
}], ["path", {
  d: "M12 10v6"
}], ["path", {
  d: "M9 13h6"
}]];
const AlarmClock = [["circle", {
  cx: "12",
  cy: "13",
  r: "8"
}], ["path", {
  d: "M12 9v4l2 2"
}], ["path", {
  d: "M5 3 2 6"
}], ["path", {
  d: "m22 6-3-3"
}], ["path", {
  d: "M6.38 18.7 4 21"
}], ["path", {
  d: "M17.64 18.67 20 21"
}]];
const AlarmSmoke = [["path", {
  d: "M11 21c0-2.5 2-2.5 2-5"
}], ["path", {
  d: "M16 21c0-2.5 2-2.5 2-5"
}], ["path", {
  d: "m19 8-.8 3a1.25 1.25 0 0 1-1.2 1H7a1.25 1.25 0 0 1-1.2-1L5 8"
}], ["path", {
  d: "M21 3a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a1 1 0 0 1 1-1z"
}], ["path", {
  d: "M6 21c0-2.5 2-2.5 2-5"
}]];
const Album = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}], ["polyline", {
  points: "11 3 11 11 14 8 17 11 17 3"
}]];
const AlignCenterHorizontal = [["path", {
  d: "M2 12h20"
}], ["path", {
  d: "M10 16v4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-4"
}], ["path", {
  d: "M10 8V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v4"
}], ["path", {
  d: "M20 16v1a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-1"
}], ["path", {
  d: "M14 8V7c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v1"
}]];
const AlignCenterVertical = [["path", {
  d: "M12 2v20"
}], ["path", {
  d: "M8 10H4a2 2 0 0 1-2-2V6c0-1.1.9-2 2-2h4"
}], ["path", {
  d: "M16 10h4a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-4"
}], ["path", {
  d: "M8 20H7a2 2 0 0 1-2-2v-2c0-1.1.9-2 2-2h1"
}], ["path", {
  d: "M16 14h1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-1"
}]];
const AlignCenter = [["path", {
  d: "M17 12H7"
}], ["path", {
  d: "M19 18H5"
}], ["path", {
  d: "M21 6H3"
}]];
const AlignEndHorizontal = [["rect", {
  width: "6",
  height: "16",
  x: "4",
  y: "2",
  rx: "2"
}], ["rect", {
  width: "6",
  height: "9",
  x: "14",
  y: "9",
  rx: "2"
}], ["path", {
  d: "M22 22H2"
}]];
const AlignEndVertical = [["rect", {
  width: "16",
  height: "6",
  x: "2",
  y: "4",
  rx: "2"
}], ["rect", {
  width: "9",
  height: "6",
  x: "9",
  y: "14",
  rx: "2"
}], ["path", {
  d: "M22 22V2"
}]];
const AlignHorizontalDistributeCenter = [["rect", {
  width: "6",
  height: "14",
  x: "4",
  y: "5",
  rx: "2"
}], ["rect", {
  width: "6",
  height: "10",
  x: "14",
  y: "7",
  rx: "2"
}], ["path", {
  d: "M17 22v-5"
}], ["path", {
  d: "M17 7V2"
}], ["path", {
  d: "M7 22v-3"
}], ["path", {
  d: "M7 5V2"
}]];
const AlignHorizontalDistributeEnd = [["rect", {
  width: "6",
  height: "14",
  x: "4",
  y: "5",
  rx: "2"
}], ["rect", {
  width: "6",
  height: "10",
  x: "14",
  y: "7",
  rx: "2"
}], ["path", {
  d: "M10 2v20"
}], ["path", {
  d: "M20 2v20"
}]];
const AlignHorizontalDistributeStart = [["rect", {
  width: "6",
  height: "14",
  x: "4",
  y: "5",
  rx: "2"
}], ["rect", {
  width: "6",
  height: "10",
  x: "14",
  y: "7",
  rx: "2"
}], ["path", {
  d: "M4 2v20"
}], ["path", {
  d: "M14 2v20"
}]];
const AlignHorizontalJustifyCenter = [["rect", {
  width: "6",
  height: "14",
  x: "2",
  y: "5",
  rx: "2"
}], ["rect", {
  width: "6",
  height: "10",
  x: "16",
  y: "7",
  rx: "2"
}], ["path", {
  d: "M12 2v20"
}]];
const AlignHorizontalJustifyEnd = [["rect", {
  width: "6",
  height: "14",
  x: "2",
  y: "5",
  rx: "2"
}], ["rect", {
  width: "6",
  height: "10",
  x: "12",
  y: "7",
  rx: "2"
}], ["path", {
  d: "M22 2v20"
}]];
const AlignHorizontalJustifyStart = [["rect", {
  width: "6",
  height: "14",
  x: "6",
  y: "5",
  rx: "2"
}], ["rect", {
  width: "6",
  height: "10",
  x: "16",
  y: "7",
  rx: "2"
}], ["path", {
  d: "M2 2v20"
}]];
const AlignHorizontalSpaceAround = [["rect", {
  width: "6",
  height: "10",
  x: "9",
  y: "7",
  rx: "2"
}], ["path", {
  d: "M4 22V2"
}], ["path", {
  d: "M20 22V2"
}]];
const AlignHorizontalSpaceBetween = [["rect", {
  width: "6",
  height: "14",
  x: "3",
  y: "5",
  rx: "2"
}], ["rect", {
  width: "6",
  height: "10",
  x: "15",
  y: "7",
  rx: "2"
}], ["path", {
  d: "M3 2v20"
}], ["path", {
  d: "M21 2v20"
}]];
const AlignJustify = [["path", {
  d: "M3 12h18"
}], ["path", {
  d: "M3 18h18"
}], ["path", {
  d: "M3 6h18"
}]];
const AlignLeft = [["path", {
  d: "M15 12H3"
}], ["path", {
  d: "M17 18H3"
}], ["path", {
  d: "M21 6H3"
}]];
const AlignRight = [["path", {
  d: "M21 12H9"
}], ["path", {
  d: "M21 18H7"
}], ["path", {
  d: "M21 6H3"
}]];
const AlignStartHorizontal = [["rect", {
  width: "6",
  height: "16",
  x: "4",
  y: "6",
  rx: "2"
}], ["rect", {
  width: "6",
  height: "9",
  x: "14",
  y: "6",
  rx: "2"
}], ["path", {
  d: "M22 2H2"
}]];
const AlignStartVertical = [["rect", {
  width: "9",
  height: "6",
  x: "6",
  y: "14",
  rx: "2"
}], ["rect", {
  width: "16",
  height: "6",
  x: "6",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M2 2v20"
}]];
const AlignVerticalDistributeCenter = [["path", {
  d: "M22 17h-3"
}], ["path", {
  d: "M22 7h-5"
}], ["path", {
  d: "M5 17H2"
}], ["path", {
  d: "M7 7H2"
}], ["rect", {
  x: "5",
  y: "14",
  width: "14",
  height: "6",
  rx: "2"
}], ["rect", {
  x: "7",
  y: "4",
  width: "10",
  height: "6",
  rx: "2"
}]];
const AlignVerticalDistributeEnd = [["rect", {
  width: "14",
  height: "6",
  x: "5",
  y: "14",
  rx: "2"
}], ["rect", {
  width: "10",
  height: "6",
  x: "7",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M2 20h20"
}], ["path", {
  d: "M2 10h20"
}]];
const AlignVerticalDistributeStart = [["rect", {
  width: "14",
  height: "6",
  x: "5",
  y: "14",
  rx: "2"
}], ["rect", {
  width: "10",
  height: "6",
  x: "7",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M2 14h20"
}], ["path", {
  d: "M2 4h20"
}]];
const AlignVerticalJustifyCenter = [["rect", {
  width: "14",
  height: "6",
  x: "5",
  y: "16",
  rx: "2"
}], ["rect", {
  width: "10",
  height: "6",
  x: "7",
  y: "2",
  rx: "2"
}], ["path", {
  d: "M2 12h20"
}]];
const AlignVerticalJustifyEnd = [["rect", {
  width: "14",
  height: "6",
  x: "5",
  y: "12",
  rx: "2"
}], ["rect", {
  width: "10",
  height: "6",
  x: "7",
  y: "2",
  rx: "2"
}], ["path", {
  d: "M2 22h20"
}]];
const AlignVerticalJustifyStart = [["rect", {
  width: "14",
  height: "6",
  x: "5",
  y: "16",
  rx: "2"
}], ["rect", {
  width: "10",
  height: "6",
  x: "7",
  y: "6",
  rx: "2"
}], ["path", {
  d: "M2 2h20"
}]];
const AlignVerticalSpaceAround = [["rect", {
  width: "10",
  height: "6",
  x: "7",
  y: "9",
  rx: "2"
}], ["path", {
  d: "M22 20H2"
}], ["path", {
  d: "M22 4H2"
}]];
const Ambulance = [["path", {
  d: "M10 10H6"
}], ["path", {
  d: "M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2"
}], ["path", {
  d: "M19 18h2a1 1 0 0 0 1-1v-3.28a1 1 0 0 0-.684-.948l-1.923-.641a1 1 0 0 1-.578-.502l-1.539-3.076A1 1 0 0 0 16.382 8H14"
}], ["path", {
  d: "M8 8v4"
}], ["path", {
  d: "M9 18h6"
}], ["circle", {
  cx: "17",
  cy: "18",
  r: "2"
}], ["circle", {
  cx: "7",
  cy: "18",
  r: "2"
}]];
const AlignVerticalSpaceBetween = [["rect", {
  width: "14",
  height: "6",
  x: "5",
  y: "15",
  rx: "2"
}], ["rect", {
  width: "10",
  height: "6",
  x: "7",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M2 21h20"
}], ["path", {
  d: "M2 3h20"
}]];
const Ampersands = [["path", {
  d: "M10 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5"
}], ["path", {
  d: "M22 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5"
}]];
const Ampersand = [["path", {
  d: "M17.5 12c0 4.4-3.6 8-8 8A4.5 4.5 0 0 1 5 15.5c0-6 8-4 8-8.5a3 3 0 1 0-6 0c0 3 2.5 8.5 12 13"
}], ["path", {
  d: "M16 12h3"
}]];
const Amphora = [["path", {
  d: "M10 2v5.632c0 .424-.272.795-.653.982A6 6 0 0 0 6 14c.006 4 3 7 5 8"
}], ["path", {
  d: "M10 5H8a2 2 0 0 0 0 4h.68"
}], ["path", {
  d: "M14 2v5.632c0 .424.272.795.652.982A6 6 0 0 1 18 14c0 4-3 7-5 8"
}], ["path", {
  d: "M14 5h2a2 2 0 0 1 0 4h-.68"
}], ["path", {
  d: "M18 22H6"
}], ["path", {
  d: "M9 2h6"
}]];
const Anchor = [["path", {
  d: "M12 22V8"
}], ["path", {
  d: "M5 12H2a10 10 0 0 0 20 0h-3"
}], ["circle", {
  cx: "12",
  cy: "5",
  r: "3"
}]];
const Angry = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M16 16s-1.5-2-4-2-4 2-4 2"
}], ["path", {
  d: "M7.5 8 10 9"
}], ["path", {
  d: "m14 9 2.5-1"
}], ["path", {
  d: "M9 10h.01"
}], ["path", {
  d: "M15 10h.01"
}]];
const Annoyed = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M8 15h8"
}], ["path", {
  d: "M8 9h2"
}], ["path", {
  d: "M14 9h2"
}]];
const Antenna = [["path", {
  d: "M2 12 7 2"
}], ["path", {
  d: "m7 12 5-10"
}], ["path", {
  d: "m12 12 5-10"
}], ["path", {
  d: "m17 12 5-10"
}], ["path", {
  d: "M4.5 7h15"
}], ["path", {
  d: "M12 16v6"
}]];
const Anvil = [["path", {
  d: "M7 10H6a4 4 0 0 1-4-4 1 1 0 0 1 1-1h4"
}], ["path", {
  d: "M7 5a1 1 0 0 1 1-1h13a1 1 0 0 1 1 1 7 7 0 0 1-7 7H8a1 1 0 0 1-1-1z"
}], ["path", {
  d: "M9 12v5"
}], ["path", {
  d: "M15 12v5"
}], ["path", {
  d: "M5 20a3 3 0 0 1 3-3h8a3 3 0 0 1 3 3 1 1 0 0 1-1 1H6a1 1 0 0 1-1-1"
}]];
const Aperture = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "m14.31 8 5.74 9.94"
}], ["path", {
  d: "M9.69 8h11.48"
}], ["path", {
  d: "m7.38 12 5.74-9.94"
}], ["path", {
  d: "M9.69 16 3.95 6.06"
}], ["path", {
  d: "M14.31 16H2.83"
}], ["path", {
  d: "m16.62 12-5.74 9.94"
}]];
const AppWindowMac = [["rect", {
  width: "20",
  height: "16",
  x: "2",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M6 8h.01"
}], ["path", {
  d: "M10 8h.01"
}], ["path", {
  d: "M14 8h.01"
}]];
const AppWindow = [["rect", {
  x: "2",
  y: "4",
  width: "20",
  height: "16",
  rx: "2"
}], ["path", {
  d: "M10 4v4"
}], ["path", {
  d: "M2 8h20"
}], ["path", {
  d: "M6 4v4"
}]];
const Apple = [["path", {
  d: "M12 20.94c1.5 0 2.75 1.06 4 1.06 3 0 6-8 6-12.22A4.91 4.91 0 0 0 17 5c-2.22 0-4 1.44-5 2-1-.56-2.78-2-5-2a4.9 4.9 0 0 0-5 4.78C2 14 5 22 8 22c1.25 0 2.5-1.06 4-1.06Z"
}], ["path", {
  d: "M10 2c1 .5 2 2 2 5"
}]];
const ArchiveRestore = [["rect", {
  width: "20",
  height: "5",
  x: "2",
  y: "3",
  rx: "1"
}], ["path", {
  d: "M4 8v11a2 2 0 0 0 2 2h2"
}], ["path", {
  d: "M20 8v11a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "m9 15 3-3 3 3"
}], ["path", {
  d: "M12 12v9"
}]];
const ArchiveX = [["rect", {
  width: "20",
  height: "5",
  x: "2",
  y: "3",
  rx: "1"
}], ["path", {
  d: "M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8"
}], ["path", {
  d: "m9.5 17 5-5"
}], ["path", {
  d: "m9.5 12 5 5"
}]];
const Archive = [["rect", {
  width: "20",
  height: "5",
  x: "2",
  y: "3",
  rx: "1"
}], ["path", {
  d: "M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8"
}], ["path", {
  d: "M10 12h4"
}]];
const Armchair = [["path", {
  d: "M19 9V6a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v3"
}], ["path", {
  d: "M3 16a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v1.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V11a2 2 0 0 0-4 0z"
}], ["path", {
  d: "M5 18v2"
}], ["path", {
  d: "M19 18v2"
}]];
const ArrowBigDownDash = [["path", {
  d: "M15 5H9"
}], ["path", {
  d: "M15 9v3h4l-7 7-7-7h4V9z"
}]];
const ArrowBigDown = [["path", {
  d: "M15 6v6h4l-7 7-7-7h4V6h6z"
}]];
const ArrowBigLeftDash = [["path", {
  d: "M19 15V9"
}], ["path", {
  d: "M15 15h-3v4l-7-7 7-7v4h3v6z"
}]];
const ArrowBigLeft = [["path", {
  d: "M18 15h-6v4l-7-7 7-7v4h6v6z"
}]];
const ArrowBigRight = [["path", {
  d: "M6 9h6V5l7 7-7 7v-4H6V9z"
}]];
const ArrowBigRightDash = [["path", {
  d: "M5 9v6"
}], ["path", {
  d: "M9 9h3V5l7 7-7 7v-4H9V9z"
}]];
const ArrowBigUpDash = [["path", {
  d: "M9 19h6"
}], ["path", {
  d: "M9 15v-3H5l7-7 7 7h-4v3H9z"
}]];
const ArrowBigUp = [["path", {
  d: "M9 18v-6H5l7-7 7 7h-4v6H9z"
}]];
const ArrowDown01 = [["path", {
  d: "m3 16 4 4 4-4"
}], ["path", {
  d: "M7 20V4"
}], ["rect", {
  x: "15",
  y: "4",
  width: "4",
  height: "6",
  ry: "2"
}], ["path", {
  d: "M17 20v-6h-2"
}], ["path", {
  d: "M15 20h4"
}]];
const ArrowDown10 = [["path", {
  d: "m3 16 4 4 4-4"
}], ["path", {
  d: "M7 20V4"
}], ["path", {
  d: "M17 10V4h-2"
}], ["path", {
  d: "M15 10h4"
}], ["rect", {
  x: "15",
  y: "14",
  width: "4",
  height: "6",
  ry: "2"
}]];
const ArrowDownAZ = [["path", {
  d: "m3 16 4 4 4-4"
}], ["path", {
  d: "M7 20V4"
}], ["path", {
  d: "M20 8h-5"
}], ["path", {
  d: "M15 10V6.5a2.5 2.5 0 0 1 5 0V10"
}], ["path", {
  d: "M15 14h5l-5 6h5"
}]];
const ArrowDownFromLine = [["path", {
  d: "M19 3H5"
}], ["path", {
  d: "M12 21V7"
}], ["path", {
  d: "m6 15 6 6 6-6"
}]];
const ArrowDownLeft = [["path", {
  d: "M17 7 7 17"
}], ["path", {
  d: "M17 17H7V7"
}]];
const ArrowDownNarrowWide = [["path", {
  d: "m3 16 4 4 4-4"
}], ["path", {
  d: "M7 20V4"
}], ["path", {
  d: "M11 4h4"
}], ["path", {
  d: "M11 8h7"
}], ["path", {
  d: "M11 12h10"
}]];
const ArrowDownToDot = [["path", {
  d: "M12 2v14"
}], ["path", {
  d: "m19 9-7 7-7-7"
}], ["circle", {
  cx: "12",
  cy: "21",
  r: "1"
}]];
const ArrowDownRight = [["path", {
  d: "m7 7 10 10"
}], ["path", {
  d: "M17 7v10H7"
}]];
const ArrowDownToLine = [["path", {
  d: "M12 17V3"
}], ["path", {
  d: "m6 11 6 6 6-6"
}], ["path", {
  d: "M19 21H5"
}]];
const ArrowDownUp = [["path", {
  d: "m3 16 4 4 4-4"
}], ["path", {
  d: "M7 20V4"
}], ["path", {
  d: "m21 8-4-4-4 4"
}], ["path", {
  d: "M17 4v16"
}]];
const ArrowDownWideNarrow = [["path", {
  d: "m3 16 4 4 4-4"
}], ["path", {
  d: "M7 20V4"
}], ["path", {
  d: "M11 4h10"
}], ["path", {
  d: "M11 8h7"
}], ["path", {
  d: "M11 12h4"
}]];
const ArrowDownZA = [["path", {
  d: "m3 16 4 4 4-4"
}], ["path", {
  d: "M7 4v16"
}], ["path", {
  d: "M15 4h5l-5 6h5"
}], ["path", {
  d: "M15 20v-3.5a2.5 2.5 0 0 1 5 0V20"
}], ["path", {
  d: "M20 18h-5"
}]];
const ArrowDown = [["path", {
  d: "M12 5v14"
}], ["path", {
  d: "m19 12-7 7-7-7"
}]];
const ArrowLeftFromLine = [["path", {
  d: "m9 6-6 6 6 6"
}], ["path", {
  d: "M3 12h14"
}], ["path", {
  d: "M21 19V5"
}]];
const ArrowLeftRight = [["path", {
  d: "M8 3 4 7l4 4"
}], ["path", {
  d: "M4 7h16"
}], ["path", {
  d: "m16 21 4-4-4-4"
}], ["path", {
  d: "M20 17H4"
}]];
const ArrowLeftToLine = [["path", {
  d: "M3 19V5"
}], ["path", {
  d: "m13 6-6 6 6 6"
}], ["path", {
  d: "M7 12h14"
}]];
const ArrowLeft = [["path", {
  d: "m12 19-7-7 7-7"
}], ["path", {
  d: "M19 12H5"
}]];
const ArrowRightFromLine = [["path", {
  d: "M3 5v14"
}], ["path", {
  d: "M21 12H7"
}], ["path", {
  d: "m15 18 6-6-6-6"
}]];
const ArrowRightLeft = [["path", {
  d: "m16 3 4 4-4 4"
}], ["path", {
  d: "M20 7H4"
}], ["path", {
  d: "m8 21-4-4 4-4"
}], ["path", {
  d: "M4 17h16"
}]];
const ArrowRightToLine = [["path", {
  d: "M17 12H3"
}], ["path", {
  d: "m11 18 6-6-6-6"
}], ["path", {
  d: "M21 5v14"
}]];
const ArrowRight = [["path", {
  d: "M5 12h14"
}], ["path", {
  d: "m12 5 7 7-7 7"
}]];
const ArrowUp01 = [["path", {
  d: "m3 8 4-4 4 4"
}], ["path", {
  d: "M7 4v16"
}], ["rect", {
  x: "15",
  y: "4",
  width: "4",
  height: "6",
  ry: "2"
}], ["path", {
  d: "M17 20v-6h-2"
}], ["path", {
  d: "M15 20h4"
}]];
const ArrowUp10 = [["path", {
  d: "m3 8 4-4 4 4"
}], ["path", {
  d: "M7 4v16"
}], ["path", {
  d: "M17 10V4h-2"
}], ["path", {
  d: "M15 10h4"
}], ["rect", {
  x: "15",
  y: "14",
  width: "4",
  height: "6",
  ry: "2"
}]];
const ArrowUpAZ = [["path", {
  d: "m3 8 4-4 4 4"
}], ["path", {
  d: "M7 4v16"
}], ["path", {
  d: "M20 8h-5"
}], ["path", {
  d: "M15 10V6.5a2.5 2.5 0 0 1 5 0V10"
}], ["path", {
  d: "M15 14h5l-5 6h5"
}]];
const ArrowUpDown = [["path", {
  d: "m21 16-4 4-4-4"
}], ["path", {
  d: "M17 20V4"
}], ["path", {
  d: "m3 8 4-4 4 4"
}], ["path", {
  d: "M7 4v16"
}]];
const ArrowUpFromDot = [["path", {
  d: "m5 9 7-7 7 7"
}], ["path", {
  d: "M12 16V2"
}], ["circle", {
  cx: "12",
  cy: "21",
  r: "1"
}]];
const ArrowUpFromLine = [["path", {
  d: "m18 9-6-6-6 6"
}], ["path", {
  d: "M12 3v14"
}], ["path", {
  d: "M5 21h14"
}]];
const ArrowUpLeft = [["path", {
  d: "M7 17V7h10"
}], ["path", {
  d: "M17 17 7 7"
}]];
const ArrowUpNarrowWide = [["path", {
  d: "m3 8 4-4 4 4"
}], ["path", {
  d: "M7 4v16"
}], ["path", {
  d: "M11 12h4"
}], ["path", {
  d: "M11 16h7"
}], ["path", {
  d: "M11 20h10"
}]];
const ArrowUpRight = [["path", {
  d: "M7 7h10v10"
}], ["path", {
  d: "M7 17 17 7"
}]];
const ArrowUpToLine = [["path", {
  d: "M5 3h14"
}], ["path", {
  d: "m18 13-6-6-6 6"
}], ["path", {
  d: "M12 7v14"
}]];
const ArrowUpWideNarrow = [["path", {
  d: "m3 8 4-4 4 4"
}], ["path", {
  d: "M7 4v16"
}], ["path", {
  d: "M11 12h10"
}], ["path", {
  d: "M11 16h7"
}], ["path", {
  d: "M11 20h4"
}]];
const ArrowUp = [["path", {
  d: "m5 12 7-7 7 7"
}], ["path", {
  d: "M12 19V5"
}]];
const ArrowUpZA = [["path", {
  d: "m3 8 4-4 4 4"
}], ["path", {
  d: "M7 4v16"
}], ["path", {
  d: "M15 4h5l-5 6h5"
}], ["path", {
  d: "M15 20v-3.5a2.5 2.5 0 0 1 5 0V20"
}], ["path", {
  d: "M20 18h-5"
}]];
const Asterisk = [["path", {
  d: "M12 6v12"
}], ["path", {
  d: "M17.196 9 6.804 15"
}], ["path", {
  d: "m6.804 9 10.392 6"
}]];
const ArrowsUpFromLine = [["path", {
  d: "m4 6 3-3 3 3"
}], ["path", {
  d: "M7 17V3"
}], ["path", {
  d: "m14 6 3-3 3 3"
}], ["path", {
  d: "M17 17V3"
}], ["path", {
  d: "M4 21h16"
}]];
const AtSign = [["circle", {
  cx: "12",
  cy: "12",
  r: "4"
}], ["path", {
  d: "M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-4 8"
}]];
const Atom = [["circle", {
  cx: "12",
  cy: "12",
  r: "1"
}], ["path", {
  d: "M20.2 20.2c2.04-2.03.02-7.36-4.5-11.9-4.54-4.52-9.87-6.54-11.9-4.5-2.04 2.03-.02 7.36 4.5 11.9 4.54 4.52 9.87 6.54 11.9 4.5Z"
}], ["path", {
  d: "M15.7 15.7c4.52-4.54 6.54-9.87 4.5-11.9-2.03-2.04-7.36-.02-11.9 4.5-4.52 4.54-6.54 9.87-4.5 11.9 2.03 2.04 7.36.02 11.9-4.5Z"
}]];
const AudioLines = [["path", {
  d: "M2 10v3"
}], ["path", {
  d: "M6 6v11"
}], ["path", {
  d: "M10 3v18"
}], ["path", {
  d: "M14 8v7"
}], ["path", {
  d: "M18 5v13"
}], ["path", {
  d: "M22 10v3"
}]];
const AudioWaveform = [["path", {
  d: "M2 13a2 2 0 0 0 2-2V7a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0V4a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0v-4a2 2 0 0 1 2-2"
}]];
const Award = [["path", {
  d: "m15.477 12.89 1.515 8.526a.5.5 0 0 1-.81.47l-3.58-2.687a1 1 0 0 0-1.197 0l-3.586 2.686a.5.5 0 0 1-.81-.469l1.514-8.526"
}], ["circle", {
  cx: "12",
  cy: "8",
  r: "6"
}]];
const Axe = [["path", {
  d: "m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9"
}], ["path", {
  d: "M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z"
}]];
const Axis3d = [["path", {
  d: "M4 4v16h16"
}], ["path", {
  d: "m4 20 7-7"
}]];
const Backpack = [["path", {
  d: "M4 10a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2z"
}], ["path", {
  d: "M8 10h8"
}], ["path", {
  d: "M8 18h8"
}], ["path", {
  d: "M8 22v-6a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v6"
}], ["path", {
  d: "M9 6V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2"
}]];
const Baby = [["path", {
  d: "M9 12h.01"
}], ["path", {
  d: "M15 12h.01"
}], ["path", {
  d: "M10 16c.5.3 1.2.5 2 .5s1.5-.2 2-.5"
}], ["path", {
  d: "M19 6.3a9 9 0 0 1 1.8 3.9 2 2 0 0 1 0 3.6 9 9 0 0 1-17.6 0 2 2 0 0 1 0-3.6A9 9 0 0 1 12 3c2 0 3.5 1.1 3.5 2.5s-.9 2.5-2 2.5c-.8 0-1.5-.4-1.5-1"
}]];
const BadgeAlert = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "8",
  y2: "12"
}], ["line", {
  x1: "12",
  x2: "12.01",
  y1: "16",
  y2: "16"
}]];
const BadgeCent = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["path", {
  d: "M12 7v10"
}], ["path", {
  d: "M15.4 10a4 4 0 1 0 0 4"
}]];
const BadgeCheck = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["path", {
  d: "m9 12 2 2 4-4"
}]];
const BadgeDollarSign = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["path", {
  d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8"
}], ["path", {
  d: "M12 18V6"
}]];
const BadgeEuro = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["path", {
  d: "M7 12h5"
}], ["path", {
  d: "M15 9.4a4 4 0 1 0 0 5.2"
}]];
const BadgeHelp = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["path", {
  d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"
}], ["line", {
  x1: "12",
  x2: "12.01",
  y1: "17",
  y2: "17"
}]];
const BadgeIndianRupee = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["path", {
  d: "M8 8h8"
}], ["path", {
  d: "M8 12h8"
}], ["path", {
  d: "m13 17-5-1h1a4 4 0 0 0 0-8"
}]];
const BadgeInfo = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "16",
  y2: "12"
}], ["line", {
  x1: "12",
  x2: "12.01",
  y1: "8",
  y2: "8"
}]];
const BadgeJapaneseYen = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["path", {
  d: "m9 8 3 3v7"
}], ["path", {
  d: "m12 11 3-3"
}], ["path", {
  d: "M9 12h6"
}], ["path", {
  d: "M9 16h6"
}]];
const BadgeMinus = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["line", {
  x1: "8",
  x2: "16",
  y1: "12",
  y2: "12"
}]];
const BadgePercent = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["path", {
  d: "m15 9-6 6"
}], ["path", {
  d: "M9 9h.01"
}], ["path", {
  d: "M15 15h.01"
}]];
const BadgePlus = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "8",
  y2: "16"
}], ["line", {
  x1: "8",
  x2: "16",
  y1: "12",
  y2: "12"
}]];
const BadgePoundSterling = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["path", {
  d: "M8 12h4"
}], ["path", {
  d: "M10 16V9.5a2.5 2.5 0 0 1 5 0"
}], ["path", {
  d: "M8 16h7"
}]];
const BadgeRussianRuble = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["path", {
  d: "M9 16h5"
}], ["path", {
  d: "M9 12h5a2 2 0 1 0 0-4h-3v9"
}]];
const BadgeX = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["line", {
  x1: "15",
  x2: "9",
  y1: "9",
  y2: "15"
}], ["line", {
  x1: "9",
  x2: "15",
  y1: "9",
  y2: "15"
}]];
const BadgeSwissFranc = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}], ["path", {
  d: "M11 17V8h4"
}], ["path", {
  d: "M11 12h3"
}], ["path", {
  d: "M9 16h4"
}]];
const Badge = [["path", {
  d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
}]];
const BaggageClaim = [["path", {
  d: "M22 18H6a2 2 0 0 1-2-2V7a2 2 0 0 0-2-2"
}], ["path", {
  d: "M17 14V4a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v10"
}], ["rect", {
  width: "13",
  height: "8",
  x: "8",
  y: "6",
  rx: "1"
}], ["circle", {
  cx: "18",
  cy: "20",
  r: "2"
}], ["circle", {
  cx: "9",
  cy: "20",
  r: "2"
}]];
const Ban = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "m4.9 4.9 14.2 14.2"
}]];
const Banana = [["path", {
  d: "M4 13c3.5-2 8-2 10 2a5.5 5.5 0 0 1 8 5"
}], ["path", {
  d: "M5.15 17.89c5.52-1.52 8.65-6.89 7-12C11.55 4 11.5 2 13 2c3.22 0 5 5.5 5 8 0 6.5-4.2 12-10.49 12C5.11 22 2 22 2 20c0-1.5 1.14-1.55 3.15-2.11Z"
}]];
const Bandage = [["path", {
  d: "M10 10.01h.01"
}], ["path", {
  d: "M10 14.01h.01"
}], ["path", {
  d: "M14 10.01h.01"
}], ["path", {
  d: "M14 14.01h.01"
}], ["path", {
  d: "M18 6v11.5"
}], ["path", {
  d: "M6 6v12"
}], ["rect", {
  x: "2",
  y: "6",
  width: "20",
  height: "12",
  rx: "2"
}]];
const Banknote = [["rect", {
  width: "20",
  height: "12",
  x: "2",
  y: "6",
  rx: "2"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "2"
}], ["path", {
  d: "M6 12h.01M18 12h.01"
}]];
const Barcode = [["path", {
  d: "M3 5v14"
}], ["path", {
  d: "M8 5v14"
}], ["path", {
  d: "M12 5v14"
}], ["path", {
  d: "M17 5v14"
}], ["path", {
  d: "M21 5v14"
}]];
const Baseline = [["path", {
  d: "M4 20h16"
}], ["path", {
  d: "m6 16 6-12 6 12"
}], ["path", {
  d: "M8 12h8"
}]];
const Bath = [["path", {
  d: "M10 4 8 6"
}], ["path", {
  d: "M17 19v2"
}], ["path", {
  d: "M2 12h20"
}], ["path", {
  d: "M7 19v2"
}], ["path", {
  d: "M9 5 7.621 3.621A2.121 2.121 0 0 0 4 5v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5"
}]];
const BatteryCharging = [["path", {
  d: "M15 7h1a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M6 7H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h1"
}], ["path", {
  d: "m11 7-3 5h4l-3 5"
}], ["line", {
  x1: "22",
  x2: "22",
  y1: "11",
  y2: "13"
}]];
const BatteryLow = [["rect", {
  width: "16",
  height: "10",
  x: "2",
  y: "7",
  rx: "2",
  ry: "2"
}], ["line", {
  x1: "22",
  x2: "22",
  y1: "11",
  y2: "13"
}], ["line", {
  x1: "6",
  x2: "6",
  y1: "11",
  y2: "13"
}]];
const BatteryFull = [["rect", {
  width: "16",
  height: "10",
  x: "2",
  y: "7",
  rx: "2",
  ry: "2"
}], ["line", {
  x1: "22",
  x2: "22",
  y1: "11",
  y2: "13"
}], ["line", {
  x1: "6",
  x2: "6",
  y1: "11",
  y2: "13"
}], ["line", {
  x1: "10",
  x2: "10",
  y1: "11",
  y2: "13"
}], ["line", {
  x1: "14",
  x2: "14",
  y1: "11",
  y2: "13"
}]];
const BatteryMedium = [["rect", {
  width: "16",
  height: "10",
  x: "2",
  y: "7",
  rx: "2",
  ry: "2"
}], ["line", {
  x1: "22",
  x2: "22",
  y1: "11",
  y2: "13"
}], ["line", {
  x1: "6",
  x2: "6",
  y1: "11",
  y2: "13"
}], ["line", {
  x1: "10",
  x2: "10",
  y1: "11",
  y2: "13"
}]];
const BatteryPlus = [["path", {
  d: "M10 9v6"
}], ["path", {
  d: "M13.5 7H16a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2.5"
}], ["path", {
  d: "M22 11v2"
}], ["path", {
  d: "M6.5 17H4a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h2.5"
}], ["path", {
  d: "M7 12h6"
}]];
const BatteryWarning = [["path", {
  d: "M10 17h.01"
}], ["path", {
  d: "M10 7v6"
}], ["path", {
  d: "M14 7h2a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M22 11v2"
}], ["path", {
  d: "M6 7H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2"
}]];
const Beaker = [["path", {
  d: "M4.5 3h15"
}], ["path", {
  d: "M6 3v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V3"
}], ["path", {
  d: "M6 14h12"
}]];
const Battery = [["rect", {
  width: "16",
  height: "10",
  x: "2",
  y: "7",
  rx: "2",
  ry: "2"
}], ["line", {
  x1: "22",
  x2: "22",
  y1: "11",
  y2: "13"
}]];
const BeanOff = [["path", {
  d: "M9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22a13.96 13.96 0 0 0 9.9-4.1"
}], ["path", {
  d: "M10.75 5.093A6 6 0 0 1 22 8c0 2.411-.61 4.68-1.683 6.66"
}], ["path", {
  d: "M5.341 10.62a4 4 0 0 0 6.487 1.208M10.62 5.341a4.015 4.015 0 0 1 2.039 2.04"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Bean = [["path", {
  d: "M10.165 6.598C9.954 7.478 9.64 8.36 9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22c7.732 0 14-6.268 14-14a6 6 0 0 0-11.835-1.402Z"
}], ["path", {
  d: "M5.341 10.62a4 4 0 1 0 5.279-5.28"
}]];
const BedDouble = [["path", {
  d: "M2 20v-8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v8"
}], ["path", {
  d: "M4 10V6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4"
}], ["path", {
  d: "M12 4v6"
}], ["path", {
  d: "M2 18h20"
}]];
const BedSingle = [["path", {
  d: "M3 20v-8a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v8"
}], ["path", {
  d: "M5 10V6a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v4"
}], ["path", {
  d: "M3 18h18"
}]];
const Bed = [["path", {
  d: "M2 4v16"
}], ["path", {
  d: "M2 8h18a2 2 0 0 1 2 2v10"
}], ["path", {
  d: "M2 17h20"
}], ["path", {
  d: "M6 8v9"
}]];
const Beef = [["path", {
  d: "M16.4 13.7A6.5 6.5 0 1 0 6.28 6.6c-1.1 3.13-.78 3.9-3.18 6.08A3 3 0 0 0 5 18c4 0 8.4-1.8 11.4-4.3"
}], ["path", {
  d: "m18.5 6 2.19 4.5a6.48 6.48 0 0 1-2.29 7.2C15.4 20.2 11 22 7 22a3 3 0 0 1-2.68-1.66L2.4 16.5"
}], ["circle", {
  cx: "12.5",
  cy: "8.5",
  r: "2.5"
}]];
const BeerOff = [["path", {
  d: "M13 13v5"
}], ["path", {
  d: "M17 11.47V8"
}], ["path", {
  d: "M17 11h1a3 3 0 0 1 2.745 4.211"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-3"
}], ["path", {
  d: "M7.536 7.535C6.766 7.649 6.154 8 5.5 8a2.5 2.5 0 0 1-1.768-4.268"
}], ["path", {
  d: "M8.727 3.204C9.306 2.767 9.885 2 11 2c1.56 0 2 1.5 3 1.5s1.72-.5 2.5-.5a1 1 0 1 1 0 5c-.78 0-1.5-.5-2.5-.5a3.149 3.149 0 0 0-.842.12"
}], ["path", {
  d: "M9 14.6V18"
}]];
const Beer = [["path", {
  d: "M17 11h1a3 3 0 0 1 0 6h-1"
}], ["path", {
  d: "M9 12v6"
}], ["path", {
  d: "M13 12v6"
}], ["path", {
  d: "M14 7.5c-1 0-1.44.5-3 .5s-2-.5-3-.5-1.72.5-2.5.5a2.5 2.5 0 0 1 0-5c.78 0 1.57.5 2.5.5S9.44 2 11 2s2 1.5 3 1.5 1.72-.5 2.5-.5a2.5 2.5 0 0 1 0 5c-.78 0-1.5-.5-2.5-.5Z"
}], ["path", {
  d: "M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V8"
}]];
const BellDot = [["path", {
  d: "M10.268 21a2 2 0 0 0 3.464 0"
}], ["path", {
  d: "M13.916 2.314A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.74 7.327A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673 9 9 0 0 1-.585-.665"
}], ["circle", {
  cx: "18",
  cy: "8",
  r: "3"
}]];
const BellElectric = [["path", {
  d: "M18.8 4A6.3 8.7 0 0 1 20 9"
}], ["path", {
  d: "M9 9h.01"
}], ["circle", {
  cx: "9",
  cy: "9",
  r: "7"
}], ["rect", {
  width: "10",
  height: "6",
  x: "4",
  y: "16",
  rx: "2"
}], ["path", {
  d: "M14 19c3 0 4.6-1.6 4.6-1.6"
}], ["circle", {
  cx: "20",
  cy: "16",
  r: "2"
}]];
const BellMinus = [["path", {
  d: "M10.268 21a2 2 0 0 0 3.464 0"
}], ["path", {
  d: "M15 8h6"
}], ["path", {
  d: "M16.243 3.757A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673A9.4 9.4 0 0 1 18.667 12"
}]];
const BellOff = [["path", {
  d: "M10.268 21a2 2 0 0 0 3.464 0"
}], ["path", {
  d: "M17 17H4a1 1 0 0 1-.74-1.673C4.59 13.956 6 12.499 6 8a6 6 0 0 1 .258-1.742"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M8.668 3.01A6 6 0 0 1 18 8c0 2.687.77 4.653 1.707 6.05"
}]];
const BellPlus = [["path", {
  d: "M10.268 21a2 2 0 0 0 3.464 0"
}], ["path", {
  d: "M15 8h6"
}], ["path", {
  d: "M18 5v6"
}], ["path", {
  d: "M20.002 14.464a9 9 0 0 0 .738.863A1 1 0 0 1 20 17H4a1 1 0 0 1-.74-1.673C4.59 13.956 6 12.499 6 8a6 6 0 0 1 8.75-5.332"
}]];
const BellRing = [["path", {
  d: "M10.268 21a2 2 0 0 0 3.464 0"
}], ["path", {
  d: "M22 8c0-2.3-.8-4.3-2-6"
}], ["path", {
  d: "M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326"
}], ["path", {
  d: "M4 2C2.8 3.7 2 5.7 2 8"
}]];
const Bell = [["path", {
  d: "M10.268 21a2 2 0 0 0 3.464 0"
}], ["path", {
  d: "M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326"
}]];
const BetweenHorizontalEnd = [["rect", {
  width: "13",
  height: "7",
  x: "3",
  y: "3",
  rx: "1"
}], ["path", {
  d: "m22 15-3-3 3-3"
}], ["rect", {
  width: "13",
  height: "7",
  x: "3",
  y: "14",
  rx: "1"
}]];
const BetweenHorizontalStart = [["rect", {
  width: "13",
  height: "7",
  x: "8",
  y: "3",
  rx: "1"
}], ["path", {
  d: "m2 9 3 3-3 3"
}], ["rect", {
  width: "13",
  height: "7",
  x: "8",
  y: "14",
  rx: "1"
}]];
const BetweenVerticalEnd = [["rect", {
  width: "7",
  height: "13",
  x: "3",
  y: "3",
  rx: "1"
}], ["path", {
  d: "m9 22 3-3 3 3"
}], ["rect", {
  width: "7",
  height: "13",
  x: "14",
  y: "3",
  rx: "1"
}]];
const BetweenVerticalStart = [["rect", {
  width: "7",
  height: "13",
  x: "3",
  y: "8",
  rx: "1"
}], ["path", {
  d: "m15 2-3 3-3-3"
}], ["rect", {
  width: "7",
  height: "13",
  x: "14",
  y: "8",
  rx: "1"
}]];
const BicepsFlexed = [["path", {
  d: "M12.409 13.017A5 5 0 0 1 22 15c0 3.866-4 7-9 7-4.077 0-8.153-.82-10.371-2.462-.426-.316-.631-.832-.62-1.362C2.118 12.723 2.627 2 10 2a3 3 0 0 1 3 3 2 2 0 0 1-2 2c-1.105 0-1.64-.444-2-1"
}], ["path", {
  d: "M15 14a5 5 0 0 0-7.584 2"
}], ["path", {
  d: "M9.964 6.825C8.019 7.977 9.5 13 8 15"
}]];
const Bike = [["circle", {
  cx: "18.5",
  cy: "17.5",
  r: "3.5"
}], ["circle", {
  cx: "5.5",
  cy: "17.5",
  r: "3.5"
}], ["circle", {
  cx: "15",
  cy: "5",
  r: "1"
}], ["path", {
  d: "M12 17.5V14l-3-3 4-3 2 3h2"
}]];
const Binary = [["rect", {
  x: "14",
  y: "14",
  width: "4",
  height: "6",
  rx: "2"
}], ["rect", {
  x: "6",
  y: "4",
  width: "4",
  height: "6",
  rx: "2"
}], ["path", {
  d: "M6 20h4"
}], ["path", {
  d: "M14 10h4"
}], ["path", {
  d: "M6 14h2v6"
}], ["path", {
  d: "M14 4h2v6"
}]];
const Biohazard = [["circle", {
  cx: "12",
  cy: "11.9",
  r: "2"
}], ["path", {
  d: "M6.7 3.4c-.9 2.5 0 5.2 2.2 6.7C6.5 9 3.7 9.6 2 11.6"
}], ["path", {
  d: "m8.9 10.1 1.4.8"
}], ["path", {
  d: "M17.3 3.4c.9 2.5 0 5.2-2.2 6.7 2.4-1.2 5.2-.6 6.9 1.5"
}], ["path", {
  d: "m15.1 10.1-1.4.8"
}], ["path", {
  d: "M16.7 20.8c-2.6-.4-4.6-2.6-4.7-5.3-.2 2.6-2.1 4.8-4.7 5.2"
}], ["path", {
  d: "M12 13.9v1.6"
}], ["path", {
  d: "M13.5 5.4c-1-.2-2-.2-3 0"
}], ["path", {
  d: "M17 16.4c.7-.7 1.2-1.6 1.5-2.5"
}], ["path", {
  d: "M5.5 13.9c.3.9.8 1.8 1.5 2.5"
}]];
const Binoculars = [["path", {
  d: "M10 10h4"
}], ["path", {
  d: "M19 7V4a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v3"
}], ["path", {
  d: "M20 21a2 2 0 0 0 2-2v-3.851c0-1.39-2-2.962-2-4.829V8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v11a2 2 0 0 0 2 2z"
}], ["path", {
  d: "M 22 16 L 2 16"
}], ["path", {
  d: "M4 21a2 2 0 0 1-2-2v-3.851c0-1.39 2-2.962 2-4.829V8a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v11a2 2 0 0 1-2 2z"
}], ["path", {
  d: "M9 7V4a1 1 0 0 0-1-1H6a1 1 0 0 0-1 1v3"
}]];
const Bird = [["path", {
  d: "M16 7h.01"
}], ["path", {
  d: "M3.4 18H12a8 8 0 0 0 8-8V7a4 4 0 0 0-7.28-2.3L2 20"
}], ["path", {
  d: "m20 7 2 .5-2 .5"
}], ["path", {
  d: "M10 18v3"
}], ["path", {
  d: "M14 17.75V21"
}], ["path", {
  d: "M7 18a6 6 0 0 0 3.84-10.61"
}]];
const Bitcoin = [["path", {
  d: "M11.767 19.089c4.924.868 6.14-6.025 1.216-6.894m-1.216 6.894L5.86 18.047m5.908 1.042-.347 1.97m1.563-8.864c4.924.869 6.14-6.025 1.215-6.893m-1.215 6.893-3.94-.694m5.155-6.2L8.29 4.26m5.908 1.042.348-1.97M7.48 20.364l3.126-17.727"
}]];
const Blend = [["circle", {
  cx: "9",
  cy: "9",
  r: "7"
}], ["circle", {
  cx: "15",
  cy: "15",
  r: "7"
}]];
const Blinds = [["path", {
  d: "M3 3h18"
}], ["path", {
  d: "M20 7H8"
}], ["path", {
  d: "M20 11H8"
}], ["path", {
  d: "M10 19h10"
}], ["path", {
  d: "M8 15h12"
}], ["path", {
  d: "M4 3v14"
}], ["circle", {
  cx: "4",
  cy: "19",
  r: "2"
}]];
const Blocks = [["rect", {
  width: "7",
  height: "7",
  x: "14",
  y: "3",
  rx: "1"
}], ["path", {
  d: "M10 21V8a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1H3"
}]];
const BluetoothConnected = [["path", {
  d: "m7 7 10 10-5 5V2l5 5L7 17"
}], ["line", {
  x1: "18",
  x2: "21",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "3",
  x2: "6",
  y1: "12",
  y2: "12"
}]];
const BluetoothOff = [["path", {
  d: "m17 17-5 5V12l-5 5"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M14.5 9.5 17 7l-5-5v4.5"
}]];
const BluetoothSearching = [["path", {
  d: "m7 7 10 10-5 5V2l5 5L7 17"
}], ["path", {
  d: "M20.83 14.83a4 4 0 0 0 0-5.66"
}], ["path", {
  d: "M18 12h.01"
}]];
const Bluetooth = [["path", {
  d: "m7 7 10 10-5 5V2l5 5L7 17"
}]];
const Bolt = [["path", {
  d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "4"
}]];
const Bold = [["path", {
  d: "M6 12h9a4 4 0 0 1 0 8H7a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h7a4 4 0 0 1 0 8"
}]];
const Bomb = [["circle", {
  cx: "11",
  cy: "13",
  r: "9"
}], ["path", {
  d: "M14.35 4.65 16.3 2.7a2.41 2.41 0 0 1 3.4 0l1.6 1.6a2.4 2.4 0 0 1 0 3.4l-1.95 1.95"
}], ["path", {
  d: "m22 2-1.5 1.5"
}]];
const Bone = [["path", {
  d: "M17 10c.7-.7 1.69 0 2.5 0a2.5 2.5 0 1 0 0-5 .5.5 0 0 1-.5-.5 2.5 2.5 0 1 0-5 0c0 .81.7 1.8 0 2.5l-7 7c-.7.7-1.69 0-2.5 0a2.5 2.5 0 0 0 0 5c.28 0 .5.22.5.5a2.5 2.5 0 1 0 5 0c0-.81-.7-1.8 0-2.5Z"
}]];
const BookA = [["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["path", {
  d: "m8 13 4-7 4 7"
}], ["path", {
  d: "M9.1 11h5.7"
}]];
const BookAudio = [["path", {
  d: "M12 6v7"
}], ["path", {
  d: "M16 8v3"
}], ["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["path", {
  d: "M8 8v3"
}]];
const BookCopy = [["path", {
  d: "M2 16V4a2 2 0 0 1 2-2h11"
}], ["path", {
  d: "M22 18H11a2 2 0 1 0 0 4h10.5a.5.5 0 0 0 .5-.5v-15a.5.5 0 0 0-.5-.5H11a2 2 0 0 0-2 2v12"
}], ["path", {
  d: "M5 14H4a2 2 0 1 0 0 4h1"
}]];
const BookCheck = [["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["path", {
  d: "m9 9.5 2 2 4-4"
}]];
const BookDashed = [["path", {
  d: "M12 17h1.5"
}], ["path", {
  d: "M12 22h1.5"
}], ["path", {
  d: "M12 2h1.5"
}], ["path", {
  d: "M17.5 22H19a1 1 0 0 0 1-1"
}], ["path", {
  d: "M17.5 2H19a1 1 0 0 1 1 1v1.5"
}], ["path", {
  d: "M20 14v3h-2.5"
}], ["path", {
  d: "M20 8.5V10"
}], ["path", {
  d: "M4 10V8.5"
}], ["path", {
  d: "M4 19.5V14"
}], ["path", {
  d: "M4 4.5A2.5 2.5 0 0 1 6.5 2H8"
}], ["path", {
  d: "M8 22H6.5a1 1 0 0 1 0-5H8"
}]];
const BookDown = [["path", {
  d: "M12 13V7"
}], ["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["path", {
  d: "m9 10 3 3 3-3"
}]];
const BookHeadphones = [["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["path", {
  d: "M8 12v-2a4 4 0 0 1 8 0v2"
}], ["circle", {
  cx: "15",
  cy: "12",
  r: "1"
}], ["circle", {
  cx: "9",
  cy: "12",
  r: "1"
}]];
const BookHeart = [["path", {
  d: "M16 8.2A2.22 2.22 0 0 0 13.8 6c-.8 0-1.4.3-1.8.9-.4-.6-1-.9-1.8-.9A2.22 2.22 0 0 0 8 8.2c0 .6.3 1.2.7 1.6A226.652 226.652 0 0 0 12 13a404 404 0 0 0 3.3-3.1 2.413 2.413 0 0 0 .7-1.7"
}], ["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}]];
const BookImage = [["path", {
  d: "m20 13.7-2.1-2.1a2 2 0 0 0-2.8 0L9.7 17"
}], ["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["circle", {
  cx: "10",
  cy: "8",
  r: "2"
}]];
const BookKey = [["path", {
  d: "m19 3 1 1"
}], ["path", {
  d: "m20 2-4.5 4.5"
}], ["path", {
  d: "M20 8v13a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H14"
}], ["circle", {
  cx: "14",
  cy: "8",
  r: "2"
}]];
const BookLock = [["path", {
  d: "M18 6V4a2 2 0 1 0-4 0v2"
}], ["path", {
  d: "M20 15v6a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H10"
}], ["rect", {
  x: "12",
  y: "6",
  width: "8",
  height: "5",
  rx: "1"
}]];
const BookMarked = [["path", {
  d: "M10 2v8l3-3 3 3V2"
}], ["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}]];
const BookMinus = [["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["path", {
  d: "M9 10h6"
}]];
const BookOpenCheck = [["path", {
  d: "M12 21V7"
}], ["path", {
  d: "m16 12 2 2 4-4"
}], ["path", {
  d: "M22 6V4a1 1 0 0 0-1-1h-5a4 4 0 0 0-4 4 4 4 0 0 0-4-4H3a1 1 0 0 0-1 1v13a1 1 0 0 0 1 1h6a3 3 0 0 1 3 3 3 3 0 0 1 3-3h6a1 1 0 0 0 1-1v-1.3"
}]];
const BookOpenText = [["path", {
  d: "M12 7v14"
}], ["path", {
  d: "M16 12h2"
}], ["path", {
  d: "M16 8h2"
}], ["path", {
  d: "M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z"
}], ["path", {
  d: "M6 12h2"
}], ["path", {
  d: "M6 8h2"
}]];
const BookOpen = [["path", {
  d: "M12 7v14"
}], ["path", {
  d: "M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z"
}]];
const BookPlus = [["path", {
  d: "M12 7v6"
}], ["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["path", {
  d: "M9 10h6"
}]];
const BookText = [["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["path", {
  d: "M8 11h8"
}], ["path", {
  d: "M8 7h6"
}]];
const BookType = [["path", {
  d: "M10 13h4"
}], ["path", {
  d: "M12 6v7"
}], ["path", {
  d: "M16 8V6H8v2"
}], ["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}]];
const BookUp2 = [["path", {
  d: "M12 13V7"
}], ["path", {
  d: "M18 2h1a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2"
}], ["path", {
  d: "m9 10 3-3 3 3"
}], ["path", {
  d: "m9 5 3-3 3 3"
}]];
const BookUp = [["path", {
  d: "M12 13V7"
}], ["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["path", {
  d: "m9 10 3-3 3 3"
}]];
const BookUser = [["path", {
  d: "M15 13a3 3 0 1 0-6 0"
}], ["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["circle", {
  cx: "12",
  cy: "8",
  r: "2"
}]];
const BookX = [["path", {
  d: "m14.5 7-5 5"
}], ["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}], ["path", {
  d: "m9.5 7 5 5"
}]];
const Book = [["path", {
  d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
}]];
const BookmarkCheck = [["path", {
  d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z"
}], ["path", {
  d: "m9 10 2 2 4-4"
}]];
const BookmarkMinus = [["path", {
  d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"
}], ["line", {
  x1: "15",
  x2: "9",
  y1: "10",
  y2: "10"
}]];
const BookmarkPlus = [["path", {
  d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "7",
  y2: "13"
}], ["line", {
  x1: "15",
  x2: "9",
  y1: "10",
  y2: "10"
}]];
const BookmarkX = [["path", {
  d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z"
}], ["path", {
  d: "m14.5 7.5-5 5"
}], ["path", {
  d: "m9.5 7.5 5 5"
}]];
const Bookmark = [["path", {
  d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"
}]];
const BotMessageSquare = [["path", {
  d: "M12 6V2H8"
}], ["path", {
  d: "m8 18-4 4V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2Z"
}], ["path", {
  d: "M2 12h2"
}], ["path", {
  d: "M9 11v2"
}], ["path", {
  d: "M15 11v2"
}], ["path", {
  d: "M20 12h2"
}]];
const BoomBox = [["path", {
  d: "M4 9V5a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4"
}], ["path", {
  d: "M8 8v1"
}], ["path", {
  d: "M12 8v1"
}], ["path", {
  d: "M16 8v1"
}], ["rect", {
  width: "20",
  height: "12",
  x: "2",
  y: "9",
  rx: "2"
}], ["circle", {
  cx: "8",
  cy: "15",
  r: "2"
}], ["circle", {
  cx: "16",
  cy: "15",
  r: "2"
}]];
const BotOff = [["path", {
  d: "M13.67 8H18a2 2 0 0 1 2 2v4.33"
}], ["path", {
  d: "M2 14h2"
}], ["path", {
  d: "M20 14h2"
}], ["path", {
  d: "M22 22 2 2"
}], ["path", {
  d: "M8 8H6a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 1.414-.586"
}], ["path", {
  d: "M9 13v2"
}], ["path", {
  d: "M9.67 4H12v2.33"
}]];
const Bot = [["path", {
  d: "M12 8V4H8"
}], ["rect", {
  width: "16",
  height: "12",
  x: "4",
  y: "8",
  rx: "2"
}], ["path", {
  d: "M2 14h2"
}], ["path", {
  d: "M20 14h2"
}], ["path", {
  d: "M15 13v2"
}], ["path", {
  d: "M9 13v2"
}]];
const Box = [["path", {
  d: "M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z"
}], ["path", {
  d: "m3.3 7 8.7 5 8.7-5"
}], ["path", {
  d: "M12 22V12"
}]];
const Boxes = [["path", {
  d: "M2.97 12.92A2 2 0 0 0 2 14.63v3.24a2 2 0 0 0 .97 1.71l3 1.8a2 2 0 0 0 2.06 0L12 19v-5.5l-5-3-4.03 2.42Z"
}], ["path", {
  d: "m7 16.5-4.74-2.85"
}], ["path", {
  d: "m7 16.5 5-3"
}], ["path", {
  d: "M7 16.5v5.17"
}], ["path", {
  d: "M12 13.5V19l3.97 2.38a2 2 0 0 0 2.06 0l3-1.8a2 2 0 0 0 .97-1.71v-3.24a2 2 0 0 0-.97-1.71L17 10.5l-5 3Z"
}], ["path", {
  d: "m17 16.5-5-3"
}], ["path", {
  d: "m17 16.5 4.74-2.85"
}], ["path", {
  d: "M17 16.5v5.17"
}], ["path", {
  d: "M7.97 4.42A2 2 0 0 0 7 6.13v4.37l5 3 5-3V6.13a2 2 0 0 0-.97-1.71l-3-1.8a2 2 0 0 0-2.06 0l-3 1.8Z"
}], ["path", {
  d: "M12 8 7.26 5.15"
}], ["path", {
  d: "m12 8 4.74-2.85"
}], ["path", {
  d: "M12 13.5V8"
}]];
const Braces = [["path", {
  d: "M8 3H7a2 2 0 0 0-2 2v5a2 2 0 0 1-2 2 2 2 0 0 1 2 2v5c0 1.1.9 2 2 2h1"
}], ["path", {
  d: "M16 21h1a2 2 0 0 0 2-2v-5c0-1.1.9-2 2-2a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2h-1"
}]];
const Brackets = [["path", {
  d: "M16 3h2a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1h-2"
}], ["path", {
  d: "M8 21H6a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h2"
}]];
const BrainCircuit = [["path", {
  d: "M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z"
}], ["path", {
  d: "M9 13a4.5 4.5 0 0 0 3-4"
}], ["path", {
  d: "M6.003 5.125A3 3 0 0 0 6.401 6.5"
}], ["path", {
  d: "M3.477 10.896a4 4 0 0 1 .585-.396"
}], ["path", {
  d: "M6 18a4 4 0 0 1-1.967-.516"
}], ["path", {
  d: "M12 13h4"
}], ["path", {
  d: "M12 18h6a2 2 0 0 1 2 2v1"
}], ["path", {
  d: "M12 8h8"
}], ["path", {
  d: "M16 8V5a2 2 0 0 1 2-2"
}], ["circle", {
  cx: "16",
  cy: "13",
  r: ".5"
}], ["circle", {
  cx: "18",
  cy: "3",
  r: ".5"
}], ["circle", {
  cx: "20",
  cy: "21",
  r: ".5"
}], ["circle", {
  cx: "20",
  cy: "8",
  r: ".5"
}]];
const BrainCog = [["path", {
  d: "M12 5a3 3 0 1 0-5.997.142 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588 4 4 0 0 0 7.636 2.106 3.2 3.2 0 0 0 .164-.546c.028-.13.306-.13.335 0a3.2 3.2 0 0 0 .163.546 4 4 0 0 0 7.636-2.106 4 4 0 0 0 .556-6.588 4 4 0 0 0-2.526-5.77A3 3 0 1 0 12 5"
}], ["path", {
  d: "M17.599 6.5a3 3 0 0 0 .399-1.375"
}], ["path", {
  d: "M6.003 5.125A3 3 0 0 0 6.401 6.5"
}], ["path", {
  d: "M3.477 10.896a4 4 0 0 1 .585-.396"
}], ["path", {
  d: "M19.938 10.5a4 4 0 0 1 .585.396"
}], ["path", {
  d: "M6 18a4 4 0 0 1-1.967-.516"
}], ["path", {
  d: "M19.967 17.484A4 4 0 0 1 18 18"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "3"
}], ["path", {
  d: "m15.7 10.4-.9.4"
}], ["path", {
  d: "m9.2 13.2-.9.4"
}], ["path", {
  d: "m13.6 15.7-.4-.9"
}], ["path", {
  d: "m10.8 9.2-.4-.9"
}], ["path", {
  d: "m15.7 13.5-.9-.4"
}], ["path", {
  d: "m9.2 10.9-.9-.4"
}], ["path", {
  d: "m10.5 15.7.4-.9"
}], ["path", {
  d: "m13.1 9.2.4-.9"
}]];
const Brain = [["path", {
  d: "M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z"
}], ["path", {
  d: "M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z"
}], ["path", {
  d: "M15 13a4.5 4.5 0 0 1-3-4 4.5 4.5 0 0 1-3 4"
}], ["path", {
  d: "M17.599 6.5a3 3 0 0 0 .399-1.375"
}], ["path", {
  d: "M6.003 5.125A3 3 0 0 0 6.401 6.5"
}], ["path", {
  d: "M3.477 10.896a4 4 0 0 1 .585-.396"
}], ["path", {
  d: "M19.938 10.5a4 4 0 0 1 .585.396"
}], ["path", {
  d: "M6 18a4 4 0 0 1-1.967-.516"
}], ["path", {
  d: "M19.967 17.484A4 4 0 0 1 18 18"
}]];
const BrickWall = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M12 9v6"
}], ["path", {
  d: "M16 15v6"
}], ["path", {
  d: "M16 3v6"
}], ["path", {
  d: "M3 15h18"
}], ["path", {
  d: "M3 9h18"
}], ["path", {
  d: "M8 15v6"
}], ["path", {
  d: "M8 3v6"
}]];
const BriefcaseBusiness = [["path", {
  d: "M12 12h.01"
}], ["path", {
  d: "M16 6V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2"
}], ["path", {
  d: "M22 13a18.15 18.15 0 0 1-20 0"
}], ["rect", {
  width: "20",
  height: "14",
  x: "2",
  y: "6",
  rx: "2"
}]];
const BriefcaseConveyorBelt = [["path", {
  d: "M10 20v2"
}], ["path", {
  d: "M14 20v2"
}], ["path", {
  d: "M18 20v2"
}], ["path", {
  d: "M21 20H3"
}], ["path", {
  d: "M6 20v2"
}], ["path", {
  d: "M8 16V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v12"
}], ["rect", {
  x: "4",
  y: "6",
  width: "16",
  height: "10",
  rx: "2"
}]];
const BriefcaseMedical = [["path", {
  d: "M12 11v4"
}], ["path", {
  d: "M14 13h-4"
}], ["path", {
  d: "M16 6V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2"
}], ["path", {
  d: "M18 6v14"
}], ["path", {
  d: "M6 6v14"
}], ["rect", {
  width: "20",
  height: "14",
  x: "2",
  y: "6",
  rx: "2"
}]];
const Briefcase = [["path", {
  d: "M16 20V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"
}], ["rect", {
  width: "20",
  height: "14",
  x: "2",
  y: "6",
  rx: "2"
}]];
const BringToFront = [["rect", {
  x: "8",
  y: "8",
  width: "8",
  height: "8",
  rx: "2"
}], ["path", {
  d: "M4 10a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2"
}], ["path", {
  d: "M14 20a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2"
}]];
const Brush = [["path", {
  d: "m9.06 11.9 8.07-8.06a2.85 2.85 0 1 1 4.03 4.03l-8.06 8.08"
}], ["path", {
  d: "M7.07 14.94c-1.66 0-3 1.35-3 3.02 0 1.33-2.5 1.52-2 2.02 1.08 1.1 2.49 2.02 4 2.02 2.2 0 4-1.8 4-4.04a3.01 3.01 0 0 0-3-3.02z"
}]];
const BugOff = [["path", {
  d: "M15 7.13V6a3 3 0 0 0-5.14-2.1L8 2"
}], ["path", {
  d: "M14.12 3.88 16 2"
}], ["path", {
  d: "M22 13h-4v-2a4 4 0 0 0-4-4h-1.3"
}], ["path", {
  d: "M20.97 5c0 2.1-1.6 3.8-3.5 4"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M7.7 7.7A4 4 0 0 0 6 11v3a6 6 0 0 0 11.13 3.13"
}], ["path", {
  d: "M12 20v-8"
}], ["path", {
  d: "M6 13H2"
}], ["path", {
  d: "M3 21c0-2.1 1.7-3.9 3.8-4"
}]];
const BugPlay = [["path", {
  d: "M12.765 21.522a.5.5 0 0 1-.765-.424v-8.196a.5.5 0 0 1 .765-.424l5.878 3.674a1 1 0 0 1 0 1.696z"
}], ["path", {
  d: "M14.12 3.88 16 2"
}], ["path", {
  d: "M18 11a4 4 0 0 0-4-4h-4a4 4 0 0 0-4 4v3a6.1 6.1 0 0 0 2 4.5"
}], ["path", {
  d: "M20.97 5c0 2.1-1.6 3.8-3.5 4"
}], ["path", {
  d: "M3 21c0-2.1 1.7-3.9 3.8-4"
}], ["path", {
  d: "M6 13H2"
}], ["path", {
  d: "M6.53 9C4.6 8.8 3 7.1 3 5"
}], ["path", {
  d: "m8 2 1.88 1.88"
}], ["path", {
  d: "M9 7.13v-1a3.003 3.003 0 1 1 6 0v1"
}]];
const Bug = [["path", {
  d: "m8 2 1.88 1.88"
}], ["path", {
  d: "M14.12 3.88 16 2"
}], ["path", {
  d: "M9 7.13v-1a3.003 3.003 0 1 1 6 0v1"
}], ["path", {
  d: "M12 20c-3.3 0-6-2.7-6-6v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v3c0 3.3-2.7 6-6 6"
}], ["path", {
  d: "M12 20v-9"
}], ["path", {
  d: "M6.53 9C4.6 8.8 3 7.1 3 5"
}], ["path", {
  d: "M6 13H2"
}], ["path", {
  d: "M3 21c0-2.1 1.7-3.9 3.8-4"
}], ["path", {
  d: "M20.97 5c0 2.1-1.6 3.8-3.5 4"
}], ["path", {
  d: "M22 13h-4"
}], ["path", {
  d: "M17.2 17c2.1.1 3.8 1.9 3.8 4"
}]];
const Building2 = [["path", {
  d: "M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z"
}], ["path", {
  d: "M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2"
}], ["path", {
  d: "M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M10 6h4"
}], ["path", {
  d: "M10 10h4"
}], ["path", {
  d: "M10 14h4"
}], ["path", {
  d: "M10 18h4"
}]];
const Building = [["rect", {
  width: "16",
  height: "20",
  x: "4",
  y: "2",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M9 22v-4h6v4"
}], ["path", {
  d: "M8 6h.01"
}], ["path", {
  d: "M16 6h.01"
}], ["path", {
  d: "M12 6h.01"
}], ["path", {
  d: "M12 10h.01"
}], ["path", {
  d: "M12 14h.01"
}], ["path", {
  d: "M16 10h.01"
}], ["path", {
  d: "M16 14h.01"
}], ["path", {
  d: "M8 10h.01"
}], ["path", {
  d: "M8 14h.01"
}]];
const BusFront = [["path", {
  d: "M4 6 2 7"
}], ["path", {
  d: "M10 6h4"
}], ["path", {
  d: "m22 7-2-1"
}], ["rect", {
  width: "16",
  height: "16",
  x: "4",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M4 11h16"
}], ["path", {
  d: "M8 15h.01"
}], ["path", {
  d: "M16 15h.01"
}], ["path", {
  d: "M6 19v2"
}], ["path", {
  d: "M18 21v-2"
}]];
const Bus = [["path", {
  d: "M8 6v6"
}], ["path", {
  d: "M15 6v6"
}], ["path", {
  d: "M2 12h19.6"
}], ["path", {
  d: "M18 18h3s.5-1.7.8-2.8c.1-.4.2-.8.2-1.2 0-.4-.1-.8-.2-1.2l-1.4-5C20.1 6.8 19.1 6 18 6H4a2 2 0 0 0-2 2v10h3"
}], ["circle", {
  cx: "7",
  cy: "18",
  r: "2"
}], ["path", {
  d: "M9 18h5"
}], ["circle", {
  cx: "16",
  cy: "18",
  r: "2"
}]];
const Cable = [["path", {
  d: "M17 21v-2a1 1 0 0 1-1-1v-1a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1"
}], ["path", {
  d: "M19 15V6.5a1 1 0 0 0-7 0v11a1 1 0 0 1-7 0V9"
}], ["path", {
  d: "M21 21v-2h-4"
}], ["path", {
  d: "M3 5h4V3"
}], ["path", {
  d: "M7 5a1 1 0 0 1 1 1v1a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a1 1 0 0 1 1-1V3"
}]];
const CableCar = [["path", {
  d: "M10 3h.01"
}], ["path", {
  d: "M14 2h.01"
}], ["path", {
  d: "m2 9 20-5"
}], ["path", {
  d: "M12 12V6.5"
}], ["rect", {
  width: "16",
  height: "10",
  x: "4",
  y: "12",
  rx: "3"
}], ["path", {
  d: "M9 12v5"
}], ["path", {
  d: "M15 12v5"
}], ["path", {
  d: "M4 17h16"
}]];
const CakeSlice = [["circle", {
  cx: "9",
  cy: "7",
  r: "2"
}], ["path", {
  d: "M7.2 7.9 3 11v9c0 .6.4 1 1 1h16c.6 0 1-.4 1-1v-9c0-2-3-6-7-8l-3.6 2.6"
}], ["path", {
  d: "M16 13H3"
}], ["path", {
  d: "M16 17H3"
}]];
const Cake = [["path", {
  d: "M20 21v-8a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v8"
}], ["path", {
  d: "M4 16s.5-1 2-1 2.5 2 4 2 2.5-2 4-2 2.5 2 4 2 2-1 2-1"
}], ["path", {
  d: "M2 21h20"
}], ["path", {
  d: "M7 8v3"
}], ["path", {
  d: "M12 8v3"
}], ["path", {
  d: "M17 8v3"
}], ["path", {
  d: "M7 4h.01"
}], ["path", {
  d: "M12 4h.01"
}], ["path", {
  d: "M17 4h.01"
}]];
const Calculator = [["rect", {
  width: "16",
  height: "20",
  x: "4",
  y: "2",
  rx: "2"
}], ["line", {
  x1: "8",
  x2: "16",
  y1: "6",
  y2: "6"
}], ["line", {
  x1: "16",
  x2: "16",
  y1: "14",
  y2: "18"
}], ["path", {
  d: "M16 10h.01"
}], ["path", {
  d: "M12 10h.01"
}], ["path", {
  d: "M8 10h.01"
}], ["path", {
  d: "M12 14h.01"
}], ["path", {
  d: "M8 14h.01"
}], ["path", {
  d: "M12 18h.01"
}], ["path", {
  d: "M8 18h.01"
}]];
const Calendar1 = [["path", {
  d: "M11 14h1v4"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "M8 2v4"
}], ["rect", {
  x: "3",
  y: "4",
  width: "18",
  height: "18",
  rx: "2"
}]];
const CalendarArrowDown = [["path", {
  d: "m14 18 4 4 4-4"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M18 14v8"
}], ["path", {
  d: "M21 11.354V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7.343"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "M8 2v4"
}]];
const CalendarArrowUp = [["path", {
  d: "m14 18 4-4 4 4"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M18 22v-8"
}], ["path", {
  d: "M21 11.343V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h9"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "M8 2v4"
}]];
const CalendarCheck2 = [["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M21 14V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "m16 20 2 2 4-4"
}]];
const CalendarCheck = [["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M16 2v4"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "m9 16 2 2 4-4"
}]];
const CalendarClock = [["path", {
  d: "M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M3 10h5"
}], ["path", {
  d: "M17.5 17.5 16 16.3V14"
}], ["circle", {
  cx: "16",
  cy: "16",
  r: "6"
}]];
const CalendarCog = [["path", {
  d: "m15.2 16.9-.9-.4"
}], ["path", {
  d: "m15.2 19.1-.9.4"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "m16.9 15.2-.4-.9"
}], ["path", {
  d: "m16.9 20.8-.4.9"
}], ["path", {
  d: "m19.5 14.3-.4.9"
}], ["path", {
  d: "m19.5 21.7-.4-.9"
}], ["path", {
  d: "M21 10.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6"
}], ["path", {
  d: "m21.7 16.5-.9.4"
}], ["path", {
  d: "m21.7 19.5-.9-.4"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "M8 2v4"
}], ["circle", {
  cx: "18",
  cy: "18",
  r: "3"
}]];
const CalendarDays = [["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M16 2v4"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "M8 14h.01"
}], ["path", {
  d: "M12 14h.01"
}], ["path", {
  d: "M16 14h.01"
}], ["path", {
  d: "M8 18h.01"
}], ["path", {
  d: "M12 18h.01"
}], ["path", {
  d: "M16 18h.01"
}]];
const CalendarFold = [["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M21 17V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11Z"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "M15 22v-4a2 2 0 0 1 2-2h4"
}]];
const CalendarHeart = [["path", {
  d: "M3 10h18V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7"
}], ["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M21.29 14.7a2.43 2.43 0 0 0-2.65-.52c-.3.12-.57.3-.8.53l-.34.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L17.5 22l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z"
}]];
const CalendarMinus2 = [["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M16 2v4"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "M10 16h4"
}]];
const CalendarMinus = [["path", {
  d: "M16 19h6"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M21 15V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8.5"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "M8 2v4"
}]];
const CalendarOff = [["path", {
  d: "M4.2 4.2A2 2 0 0 0 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 1.82-1.18"
}], ["path", {
  d: "M21 15.5V6a2 2 0 0 0-2-2H9.5"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M3 10h7"
}], ["path", {
  d: "M21 10h-5.5"
}], ["path", {
  d: "m2 2 20 20"
}]];
const CalendarPlus2 = [["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M16 2v4"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "M10 16h4"
}], ["path", {
  d: "M12 14v4"
}]];
const CalendarPlus = [["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "M16 19h6"
}], ["path", {
  d: "M19 16v6"
}]];
const CalendarRange = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M17 14h-6"
}], ["path", {
  d: "M13 18H7"
}], ["path", {
  d: "M7 14h.01"
}], ["path", {
  d: "M17 18h.01"
}]];
const CalendarSearch = [["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M21 11.75V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7.25"
}], ["path", {
  d: "m22 22-1.875-1.875"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "M8 2v4"
}], ["circle", {
  cx: "18",
  cy: "18",
  r: "3"
}]];
const CalendarSync = [["path", {
  d: "M11 10v4h4"
}], ["path", {
  d: "m11 14 1.535-1.605a5 5 0 0 1 8 1.5"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "m21 18-1.535 1.605a5 5 0 0 1-8-1.5"
}], ["path", {
  d: "M21 22v-4h-4"
}], ["path", {
  d: "M21 8.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h4.3"
}], ["path", {
  d: "M3 10h4"
}], ["path", {
  d: "M8 2v4"
}]];
const CalendarX2 = [["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "m17 22 5-5"
}], ["path", {
  d: "m17 17 5 5"
}]];
const CalendarX = [["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M16 2v4"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M3 10h18"
}], ["path", {
  d: "m14 14-4 4"
}], ["path", {
  d: "m10 14 4 4"
}]];
const Calendar = [["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M16 2v4"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M3 10h18"
}]];
const CameraOff = [["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}], ["path", {
  d: "M7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16"
}], ["path", {
  d: "M9.5 4h5L17 7h3a2 2 0 0 1 2 2v7.5"
}], ["path", {
  d: "M14.121 15.121A3 3 0 1 1 9.88 10.88"
}]];
const Camera = [["path", {
  d: "M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z"
}], ["circle", {
  cx: "12",
  cy: "13",
  r: "3"
}]];
const CandyCane = [["path", {
  d: "M5.7 21a2 2 0 0 1-3.5-2l8.6-14a6 6 0 0 1 10.4 6 2 2 0 1 1-3.464-2 2 2 0 1 0-3.464-2Z"
}], ["path", {
  d: "M17.75 7 15 2.1"
}], ["path", {
  d: "M10.9 4.8 13 9"
}], ["path", {
  d: "m7.9 9.7 2 4.4"
}], ["path", {
  d: "M4.9 14.7 7 18.9"
}]];
const CandyOff = [["path", {
  d: "M10 10v7.9"
}], ["path", {
  d: "M11.802 6.145a5 5 0 0 1 6.053 6.053"
}], ["path", {
  d: "M14 6.1v2.243"
}], ["path", {
  d: "m15.5 15.571-.964.964a5 5 0 0 1-7.071 0 5 5 0 0 1 0-7.07l.964-.965"
}], ["path", {
  d: "M16 7V3a1 1 0 0 1 1.707-.707 2.5 2.5 0 0 0 2.152.717 1 1 0 0 1 1.131 1.131 2.5 2.5 0 0 0 .717 2.152A1 1 0 0 1 21 8h-4"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M8 17v4a1 1 0 0 1-1.707.707 2.5 2.5 0 0 0-2.152-.717 1 1 0 0 1-1.131-1.131 2.5 2.5 0 0 0-.717-2.152A1 1 0 0 1 3 16h4"
}]];
const Candy = [["path", {
  d: "M10 7v10.9"
}], ["path", {
  d: "M14 6.1V17"
}], ["path", {
  d: "M16 7V3a1 1 0 0 1 1.707-.707 2.5 2.5 0 0 0 2.152.717 1 1 0 0 1 1.131 1.131 2.5 2.5 0 0 0 .717 2.152A1 1 0 0 1 21 8h-4"
}], ["path", {
  d: "M16.536 7.465a5 5 0 0 0-7.072 0l-2 2a5 5 0 0 0 0 7.07 5 5 0 0 0 7.072 0l2-2a5 5 0 0 0 0-7.07"
}], ["path", {
  d: "M8 17v4a1 1 0 0 1-1.707.707 2.5 2.5 0 0 0-2.152-.717 1 1 0 0 1-1.131-1.131 2.5 2.5 0 0 0-.717-2.152A1 1 0 0 1 3 16h4"
}]];
const Cannabis = [["path", {
  d: "M12 22v-4"
}], ["path", {
  d: "M7 12c-1.5 0-4.5 1.5-5 3 3.5 1.5 6 1 6 1-1.5 1.5-2 3.5-2 5 2.5 0 4.5-1.5 6-3 1.5 1.5 3.5 3 6 3 0-1.5-.5-3.5-2-5 0 0 2.5.5 6-1-.5-1.5-3.5-3-5-3 1.5-1 4-4 4-6-2.5 0-5.5 1.5-7 3 0-2.5-.5-5-2-7-1.5 2-2 4.5-2 7-1.5-1.5-4.5-3-7-3 0 2 2.5 5 4 6"
}]];
const CaptionsOff = [["path", {
  d: "M10.5 5H19a2 2 0 0 1 2 2v8.5"
}], ["path", {
  d: "M17 11h-.5"
}], ["path", {
  d: "M19 19H5a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M7 11h4"
}], ["path", {
  d: "M7 15h2.5"
}]];
const Captions = [["rect", {
  width: "18",
  height: "14",
  x: "3",
  y: "5",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M7 15h4M15 15h2M7 11h2M13 11h4"
}]];
const CarFront = [["path", {
  d: "m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8"
}], ["path", {
  d: "M7 14h.01"
}], ["path", {
  d: "M17 14h.01"
}], ["rect", {
  width: "18",
  height: "8",
  x: "3",
  y: "10",
  rx: "2"
}], ["path", {
  d: "M5 18v2"
}], ["path", {
  d: "M19 18v2"
}]];
const CarTaxiFront = [["path", {
  d: "M10 2h4"
}], ["path", {
  d: "m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8"
}], ["path", {
  d: "M7 14h.01"
}], ["path", {
  d: "M17 14h.01"
}], ["rect", {
  width: "18",
  height: "8",
  x: "3",
  y: "10",
  rx: "2"
}], ["path", {
  d: "M5 18v2"
}], ["path", {
  d: "M19 18v2"
}]];
const Car = [["path", {
  d: "M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9C18.7 10.6 16 10 16 10s-1.3-1.4-2.2-2.3c-.5-.4-1.1-.7-1.8-.7H5c-.6 0-1.1.4-1.4.9l-1.4 2.9A3.7 3.7 0 0 0 2 12v4c0 .6.4 1 1 1h2"
}], ["circle", {
  cx: "7",
  cy: "17",
  r: "2"
}], ["path", {
  d: "M9 17h6"
}], ["circle", {
  cx: "17",
  cy: "17",
  r: "2"
}]];
const Caravan = [["path", {
  d: "M18 19V9a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v8a2 2 0 0 0 2 2h2"
}], ["path", {
  d: "M2 9h3a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2"
}], ["path", {
  d: "M22 17v1a1 1 0 0 1-1 1H10v-9a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v9"
}], ["circle", {
  cx: "8",
  cy: "19",
  r: "2"
}]];
const Carrot = [["path", {
  d: "M2.27 21.7s9.87-3.5 12.73-6.36a4.5 4.5 0 0 0-6.36-6.37C5.77 11.84 2.27 21.7 2.27 21.7zM8.64 14l-2.05-2.04M15.34 15l-2.46-2.46"
}], ["path", {
  d: "M22 9s-1.33-2-3.5-2C16.86 7 15 9 15 9s1.33 2 3.5 2S22 9 22 9z"
}], ["path", {
  d: "M15 2s-2 1.33-2 3.5S15 9 15 9s2-1.84 2-3.5C17 3.33 15 2 15 2z"
}]];
const CaseLower = [["circle", {
  cx: "7",
  cy: "12",
  r: "3"
}], ["path", {
  d: "M10 9v6"
}], ["circle", {
  cx: "17",
  cy: "12",
  r: "3"
}], ["path", {
  d: "M14 7v8"
}]];
const CaseSensitive = [["path", {
  d: "m3 15 4-8 4 8"
}], ["path", {
  d: "M4 13h6"
}], ["circle", {
  cx: "18",
  cy: "12",
  r: "3"
}], ["path", {
  d: "M21 9v6"
}]];
const CaseUpper = [["path", {
  d: "m3 15 4-8 4 8"
}], ["path", {
  d: "M4 13h6"
}], ["path", {
  d: "M15 11h4.5a2 2 0 0 1 0 4H15V7h4a2 2 0 0 1 0 4"
}]];
const CassetteTape = [["rect", {
  width: "20",
  height: "16",
  x: "2",
  y: "4",
  rx: "2"
}], ["circle", {
  cx: "8",
  cy: "10",
  r: "2"
}], ["path", {
  d: "M8 12h8"
}], ["circle", {
  cx: "16",
  cy: "10",
  r: "2"
}], ["path", {
  d: "m6 20 .7-2.9A1.4 1.4 0 0 1 8.1 16h7.8a1.4 1.4 0 0 1 1.4 1l.7 3"
}]];
const Cast = [["path", {
  d: "M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"
}], ["path", {
  d: "M2 12a9 9 0 0 1 8 8"
}], ["path", {
  d: "M2 16a5 5 0 0 1 4 4"
}], ["line", {
  x1: "2",
  x2: "2.01",
  y1: "20",
  y2: "20"
}]];
const Castle = [["path", {
  d: "M22 20v-9H2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2Z"
}], ["path", {
  d: "M18 11V4H6v7"
}], ["path", {
  d: "M15 22v-4a3 3 0 0 0-3-3a3 3 0 0 0-3 3v4"
}], ["path", {
  d: "M22 11V9"
}], ["path", {
  d: "M2 11V9"
}], ["path", {
  d: "M6 4V2"
}], ["path", {
  d: "M18 4V2"
}], ["path", {
  d: "M10 4V2"
}], ["path", {
  d: "M14 4V2"
}]];
const Cat = [["path", {
  d: "M12 5c.67 0 1.35.09 2 .26 1.78-2 5.03-2.84 6.42-2.26 1.4.58-.42 7-.42 7 .57 1.07 1 2.24 1 3.44C21 17.9 16.97 21 12 21s-9-3-9-7.56c0-1.25.5-2.4 1-3.44 0 0-1.89-6.42-.5-7 1.39-.58 4.72.23 6.5 2.23A9.04 9.04 0 0 1 12 5Z"
}], ["path", {
  d: "M8 14v.5"
}], ["path", {
  d: "M16 14v.5"
}], ["path", {
  d: "M11.25 16.25h1.5L12 17l-.75-.75Z"
}]];
const Cctv = [["path", {
  d: "M16.75 12h3.632a1 1 0 0 1 .894 1.447l-2.034 4.069a1 1 0 0 1-1.708.134l-2.124-2.97"
}], ["path", {
  d: "M17.106 9.053a1 1 0 0 1 .447 1.341l-3.106 6.211a1 1 0 0 1-1.342.447L3.61 12.3a2.92 2.92 0 0 1-1.3-3.91L3.69 5.6a2.92 2.92 0 0 1 3.92-1.3z"
}], ["path", {
  d: "M2 19h3.76a2 2 0 0 0 1.8-1.1L9 15"
}], ["path", {
  d: "M2 21v-4"
}], ["path", {
  d: "M7 9h.01"
}]];
const ChartArea = [["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["path", {
  d: "M7 11.207a.5.5 0 0 1 .146-.353l2-2a.5.5 0 0 1 .708 0l3.292 3.292a.5.5 0 0 0 .708 0l4.292-4.292a.5.5 0 0 1 .854.353V16a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1z"
}]];
const ChartBarBig = [["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["rect", {
  x: "7",
  y: "13",
  width: "9",
  height: "4",
  rx: "1"
}], ["rect", {
  x: "7",
  y: "5",
  width: "12",
  height: "4",
  rx: "1"
}]];
const ChartBarDecreasing = [["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["path", {
  d: "M7 11h8"
}], ["path", {
  d: "M7 16h3"
}], ["path", {
  d: "M7 6h12"
}]];
const ChartBarIncreasing = [["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["path", {
  d: "M7 11h8"
}], ["path", {
  d: "M7 16h12"
}], ["path", {
  d: "M7 6h3"
}]];
const ChartBarStacked = [["path", {
  d: "M11 13v4"
}], ["path", {
  d: "M15 5v4"
}], ["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["rect", {
  x: "7",
  y: "13",
  width: "9",
  height: "4",
  rx: "1"
}], ["rect", {
  x: "7",
  y: "5",
  width: "12",
  height: "4",
  rx: "1"
}]];
const ChartBar = [["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["path", {
  d: "M7 16h8"
}], ["path", {
  d: "M7 11h12"
}], ["path", {
  d: "M7 6h3"
}]];
const ChartColumnBig = [["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["rect", {
  x: "15",
  y: "5",
  width: "4",
  height: "12",
  rx: "1"
}], ["rect", {
  x: "7",
  y: "8",
  width: "4",
  height: "9",
  rx: "1"
}]];
const ChartCandlestick = [["path", {
  d: "M9 5v4"
}], ["rect", {
  width: "4",
  height: "6",
  x: "7",
  y: "9",
  rx: "1"
}], ["path", {
  d: "M9 15v2"
}], ["path", {
  d: "M17 3v2"
}], ["rect", {
  width: "4",
  height: "8",
  x: "15",
  y: "5",
  rx: "1"
}], ["path", {
  d: "M17 13v3"
}], ["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}]];
const ChartColumnDecreasing = [["path", {
  d: "M13 17V9"
}], ["path", {
  d: "M18 17v-3"
}], ["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["path", {
  d: "M8 17V5"
}]];
const ChartColumnIncreasing = [["path", {
  d: "M13 17V9"
}], ["path", {
  d: "M18 17V5"
}], ["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["path", {
  d: "M8 17v-3"
}]];
const ChartColumnStacked = [["path", {
  d: "M11 13H7"
}], ["path", {
  d: "M19 9h-4"
}], ["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["rect", {
  x: "15",
  y: "5",
  width: "4",
  height: "12",
  rx: "1"
}], ["rect", {
  x: "7",
  y: "8",
  width: "4",
  height: "9",
  rx: "1"
}]];
const ChartColumn = [["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["path", {
  d: "M18 17V9"
}], ["path", {
  d: "M13 17V5"
}], ["path", {
  d: "M8 17v-3"
}]];
const ChartGantt = [["path", {
  d: "M10 6h8"
}], ["path", {
  d: "M12 16h6"
}], ["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["path", {
  d: "M8 11h7"
}]];
const ChartLine = [["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["path", {
  d: "m19 9-5 5-4-4-3 3"
}]];
const ChartNetwork = [["path", {
  d: "m13.11 7.664 1.78 2.672"
}], ["path", {
  d: "m14.162 12.788-3.324 1.424"
}], ["path", {
  d: "m20 4-6.06 1.515"
}], ["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["circle", {
  cx: "12",
  cy: "6",
  r: "2"
}], ["circle", {
  cx: "16",
  cy: "12",
  r: "2"
}], ["circle", {
  cx: "9",
  cy: "15",
  r: "2"
}]];
const ChartNoAxesColumnDecreasing = [["path", {
  d: "M12 20V10"
}], ["path", {
  d: "M18 20v-4"
}], ["path", {
  d: "M6 20V4"
}]];
const ChartNoAxesColumnIncreasing = [["line", {
  x1: "12",
  x2: "12",
  y1: "20",
  y2: "10"
}], ["line", {
  x1: "18",
  x2: "18",
  y1: "20",
  y2: "4"
}], ["line", {
  x1: "6",
  x2: "6",
  y1: "20",
  y2: "16"
}]];
const ChartNoAxesColumn = [["line", {
  x1: "18",
  x2: "18",
  y1: "20",
  y2: "10"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "20",
  y2: "4"
}], ["line", {
  x1: "6",
  x2: "6",
  y1: "20",
  y2: "14"
}]];
const ChartNoAxesCombined = [["path", {
  d: "M12 16v5"
}], ["path", {
  d: "M16 14v7"
}], ["path", {
  d: "M20 10v11"
}], ["path", {
  d: "m22 3-8.646 8.646a.5.5 0 0 1-.708 0L9.354 8.354a.5.5 0 0 0-.707 0L2 15"
}], ["path", {
  d: "M4 18v3"
}], ["path", {
  d: "M8 14v7"
}]];
const ChartNoAxesGantt = [["path", {
  d: "M8 6h10"
}], ["path", {
  d: "M6 12h9"
}], ["path", {
  d: "M11 18h7"
}]];
const ChartPie = [["path", {
  d: "M21 12c.552 0 1.005-.449.95-.998a10 10 0 0 0-8.953-8.951c-.55-.055-.998.398-.998.95v8a1 1 0 0 0 1 1z"
}], ["path", {
  d: "M21.21 15.89A10 10 0 1 1 8 2.83"
}]];
const ChartScatter = [["circle", {
  cx: "7.5",
  cy: "7.5",
  r: ".5",
  fill: "currentColor"
}], ["circle", {
  cx: "18.5",
  cy: "5.5",
  r: ".5",
  fill: "currentColor"
}], ["circle", {
  cx: "11.5",
  cy: "11.5",
  r: ".5",
  fill: "currentColor"
}], ["circle", {
  cx: "7.5",
  cy: "16.5",
  r: ".5",
  fill: "currentColor"
}], ["circle", {
  cx: "17.5",
  cy: "14.5",
  r: ".5",
  fill: "currentColor"
}], ["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}]];
const ChartSpline = [["path", {
  d: "M3 3v16a2 2 0 0 0 2 2h16"
}], ["path", {
  d: "M7 16c.5-2 1.5-7 4-7 2 0 2 3 4 3 2.5 0 4.5-5 5-7"
}]];
const CheckCheck = [["path", {
  d: "M18 6 7 17l-5-5"
}], ["path", {
  d: "m22 10-7.5 7.5L13 16"
}]];
const Check = [["path", {
  d: "M20 6 9 17l-5-5"
}]];
const ChefHat = [["path", {
  d: "M17 21a1 1 0 0 0 1-1v-5.35c0-.457.316-.844.727-1.041a4 4 0 0 0-2.134-7.589 5 5 0 0 0-9.186 0 4 4 0 0 0-2.134 7.588c.411.198.727.585.727 1.041V20a1 1 0 0 0 1 1Z"
}], ["path", {
  d: "M6 17h12"
}]];
const Cherry = [["path", {
  d: "M2 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z"
}], ["path", {
  d: "M12 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z"
}], ["path", {
  d: "M7 14c3.22-2.91 4.29-8.75 5-12 1.66 2.38 4.94 9 5 12"
}], ["path", {
  d: "M22 9c-4.29 0-7.14-2.33-10-7 5.71 0 10 4.67 10 7Z"
}]];
const ChevronDown = [["path", {
  d: "m6 9 6 6 6-6"
}]];
const ChevronFirst = [["path", {
  d: "m17 18-6-6 6-6"
}], ["path", {
  d: "M7 6v12"
}]];
const ChevronLast = [["path", {
  d: "m7 18 6-6-6-6"
}], ["path", {
  d: "M17 6v12"
}]];
const ChevronLeft = [["path", {
  d: "m15 18-6-6 6-6"
}]];
const ChevronRight = [["path", {
  d: "m9 18 6-6-6-6"
}]];
const ChevronUp = [["path", {
  d: "m18 15-6-6-6 6"
}]];
const ChevronsDownUp = [["path", {
  d: "m7 20 5-5 5 5"
}], ["path", {
  d: "m7 4 5 5 5-5"
}]];
const ChevronsDown = [["path", {
  d: "m7 6 5 5 5-5"
}], ["path", {
  d: "m7 13 5 5 5-5"
}]];
const ChevronsLeftRightEllipsis = [["path", {
  d: "m18 8 4 4-4 4"
}], ["path", {
  d: "m6 8-4 4 4 4"
}], ["path", {
  d: "M8 12h.01"
}], ["path", {
  d: "M12 12h.01"
}], ["path", {
  d: "M16 12h.01"
}]];
const ChevronsLeft = [["path", {
  d: "m11 17-5-5 5-5"
}], ["path", {
  d: "m18 17-5-5 5-5"
}]];
const ChevronsLeftRight = [["path", {
  d: "m9 7-5 5 5 5"
}], ["path", {
  d: "m15 7 5 5-5 5"
}]];
const ChevronsRightLeft = [["path", {
  d: "m20 17-5-5 5-5"
}], ["path", {
  d: "m4 17 5-5-5-5"
}]];
const ChevronsRight = [["path", {
  d: "m6 17 5-5-5-5"
}], ["path", {
  d: "m13 17 5-5-5-5"
}]];
const ChevronsUpDown = [["path", {
  d: "m7 15 5 5 5-5"
}], ["path", {
  d: "m7 9 5-5 5 5"
}]];
const ChevronsUp = [["path", {
  d: "m17 11-5-5-5 5"
}], ["path", {
  d: "m17 18-5-5-5 5"
}]];
const Chrome = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "4"
}], ["line", {
  x1: "21.17",
  x2: "12",
  y1: "8",
  y2: "8"
}], ["line", {
  x1: "3.95",
  x2: "8.54",
  y1: "6.06",
  y2: "14"
}], ["line", {
  x1: "10.88",
  x2: "15.46",
  y1: "21.94",
  y2: "14"
}]];
const Church = [["path", {
  d: "M10 9h4"
}], ["path", {
  d: "M12 7v5"
}], ["path", {
  d: "M14 22v-4a2 2 0 0 0-4 0v4"
}], ["path", {
  d: "M18 22V5.618a1 1 0 0 0-.553-.894l-4.553-2.277a2 2 0 0 0-1.788 0L6.553 4.724A1 1 0 0 0 6 5.618V22"
}], ["path", {
  d: "m18 7 3.447 1.724a1 1 0 0 1 .553.894V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.618a1 1 0 0 1 .553-.894L6 7"
}]];
const Cigarette = [["path", {
  d: "M17 12H3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h14"
}], ["path", {
  d: "M18 8c0-2.5-2-2.5-2-5"
}], ["path", {
  d: "M21 16a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1"
}], ["path", {
  d: "M22 8c0-2.5-2-2.5-2-5"
}], ["path", {
  d: "M7 12v4"
}]];
const CigaretteOff = [["path", {
  d: "M12 12H3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h13"
}], ["path", {
  d: "M18 8c0-2.5-2-2.5-2-5"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M21 12a1 1 0 0 1 1 1v2a1 1 0 0 1-.5.866"
}], ["path", {
  d: "M22 8c0-2.5-2-2.5-2-5"
}], ["path", {
  d: "M7 12v4"
}]];
const CircleAlert = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "8",
  y2: "12"
}], ["line", {
  x1: "12",
  x2: "12.01",
  y1: "16",
  y2: "16"
}]];
const CircleArrowDown = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M12 8v8"
}], ["path", {
  d: "m8 12 4 4 4-4"
}]];
const CircleArrowLeft = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M16 12H8"
}], ["path", {
  d: "m12 8-4 4 4 4"
}]];
const CircleArrowOutDownLeft = [["path", {
  d: "M2 12a10 10 0 1 1 10 10"
}], ["path", {
  d: "m2 22 10-10"
}], ["path", {
  d: "M8 22H2v-6"
}]];
const CircleArrowOutDownRight = [["path", {
  d: "M12 22a10 10 0 1 1 10-10"
}], ["path", {
  d: "M22 22 12 12"
}], ["path", {
  d: "M22 16v6h-6"
}]];
const CircleArrowOutUpLeft = [["path", {
  d: "M2 8V2h6"
}], ["path", {
  d: "m2 2 10 10"
}], ["path", {
  d: "M12 2A10 10 0 1 1 2 12"
}]];
const CircleArrowOutUpRight = [["path", {
  d: "M22 12A10 10 0 1 1 12 2"
}], ["path", {
  d: "M22 2 12 12"
}], ["path", {
  d: "M16 2h6v6"
}]];
const CircleArrowRight = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M8 12h8"
}], ["path", {
  d: "m12 16 4-4-4-4"
}]];
const CircleArrowUp = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "m16 12-4-4-4 4"
}], ["path", {
  d: "M12 16V8"
}]];
const CircleCheckBig = [["path", {
  d: "M21.801 10A10 10 0 1 1 17 3.335"
}], ["path", {
  d: "m9 11 3 3L22 4"
}]];
const CircleCheck = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "m9 12 2 2 4-4"
}]];
const CircleChevronDown = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "m16 10-4 4-4-4"
}]];
const CircleChevronLeft = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "m14 16-4-4 4-4"
}]];
const CircleChevronRight = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "m10 8 4 4-4 4"
}]];
const CircleChevronUp = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "m8 14 4-4 4 4"
}]];
const CircleDashed = [["path", {
  d: "M10.1 2.182a10 10 0 0 1 3.8 0"
}], ["path", {
  d: "M13.9 21.818a10 10 0 0 1-3.8 0"
}], ["path", {
  d: "M17.609 3.721a10 10 0 0 1 2.69 2.7"
}], ["path", {
  d: "M2.182 13.9a10 10 0 0 1 0-3.8"
}], ["path", {
  d: "M20.279 17.609a10 10 0 0 1-2.7 2.69"
}], ["path", {
  d: "M21.818 10.1a10 10 0 0 1 0 3.8"
}], ["path", {
  d: "M3.721 6.391a10 10 0 0 1 2.7-2.69"
}], ["path", {
  d: "M6.391 20.279a10 10 0 0 1-2.69-2.7"
}]];
const CircleDollarSign = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8"
}], ["path", {
  d: "M12 18V6"
}]];
const CircleDivide = [["line", {
  x1: "8",
  x2: "16",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "16",
  y2: "16"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "8",
  y2: "8"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}]];
const CircleDotDashed = [["path", {
  d: "M10.1 2.18a9.93 9.93 0 0 1 3.8 0"
}], ["path", {
  d: "M17.6 3.71a9.95 9.95 0 0 1 2.69 2.7"
}], ["path", {
  d: "M21.82 10.1a9.93 9.93 0 0 1 0 3.8"
}], ["path", {
  d: "M20.29 17.6a9.95 9.95 0 0 1-2.7 2.69"
}], ["path", {
  d: "M13.9 21.82a9.94 9.94 0 0 1-3.8 0"
}], ["path", {
  d: "M6.4 20.29a9.95 9.95 0 0 1-2.69-2.7"
}], ["path", {
  d: "M2.18 13.9a9.93 9.93 0 0 1 0-3.8"
}], ["path", {
  d: "M3.71 6.4a9.95 9.95 0 0 1 2.7-2.69"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "1"
}]];
const CircleDot = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "1"
}]];
const CircleEllipsis = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M17 12h.01"
}], ["path", {
  d: "M12 12h.01"
}], ["path", {
  d: "M7 12h.01"
}]];
const CircleEqual = [["path", {
  d: "M7 10h10"
}], ["path", {
  d: "M7 14h10"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}]];
const CircleFadingArrowUp = [["path", {
  d: "M12 2a10 10 0 0 1 7.38 16.75"
}], ["path", {
  d: "m16 12-4-4-4 4"
}], ["path", {
  d: "M12 16V8"
}], ["path", {
  d: "M2.5 8.875a10 10 0 0 0-.5 3"
}], ["path", {
  d: "M2.83 16a10 10 0 0 0 2.43 3.4"
}], ["path", {
  d: "M4.636 5.235a10 10 0 0 1 .891-.857"
}], ["path", {
  d: "M8.644 21.42a10 10 0 0 0 7.631-.38"
}]];
const CircleFadingPlus = [["path", {
  d: "M12 2a10 10 0 0 1 7.38 16.75"
}], ["path", {
  d: "M12 8v8"
}], ["path", {
  d: "M16 12H8"
}], ["path", {
  d: "M2.5 8.875a10 10 0 0 0-.5 3"
}], ["path", {
  d: "M2.83 16a10 10 0 0 0 2.43 3.4"
}], ["path", {
  d: "M4.636 5.235a10 10 0 0 1 .891-.857"
}], ["path", {
  d: "M8.644 21.42a10 10 0 0 0 7.631-.38"
}]];
const CircleGauge = [["path", {
  d: "M15.6 2.7a10 10 0 1 0 5.7 5.7"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "2"
}], ["path", {
  d: "M13.4 10.6 19 5"
}]];
const CircleHelp = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"
}], ["path", {
  d: "M12 17h.01"
}]];
const CircleMinus = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M8 12h8"
}]];
const CircleOff = [["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M8.35 2.69A10 10 0 0 1 21.3 15.65"
}], ["path", {
  d: "M19.08 19.08A10 10 0 1 1 4.92 4.92"
}]];
const CircleParkingOff = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "m5 5 14 14"
}], ["path", {
  d: "M13 13a3 3 0 1 0 0-6H9v2"
}], ["path", {
  d: "M9 17v-2.34"
}]];
const CircleParking = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M9 17V7h4a3 3 0 0 1 0 6H9"
}]];
const CirclePause = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["line", {
  x1: "10",
  x2: "10",
  y1: "15",
  y2: "9"
}], ["line", {
  x1: "14",
  x2: "14",
  y1: "15",
  y2: "9"
}]];
const CirclePercent = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "m15 9-6 6"
}], ["path", {
  d: "M9 9h.01"
}], ["path", {
  d: "M15 15h.01"
}]];
const CirclePlay = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polygon", {
  points: "10 8 16 12 10 16 10 8"
}]];
const CirclePlus = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M8 12h8"
}], ["path", {
  d: "M12 8v8"
}]];
const CirclePower = [["path", {
  d: "M12 7v4"
}], ["path", {
  d: "M7.998 9.003a5 5 0 1 0 8-.005"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}]];
const CircleSlash2 = [["path", {
  d: "M22 2 2 22"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}]];
const CircleSlash = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["line", {
  x1: "9",
  x2: "15",
  y1: "15",
  y2: "9"
}]];
const CircleSmall = [["circle", {
  cx: "12",
  cy: "12",
  r: "6"
}]];
const CircleStop = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["rect", {
  x: "9",
  y: "9",
  width: "6",
  height: "6",
  rx: "1"
}]];
const CircleUserRound = [["path", {
  d: "M18 20a6 6 0 0 0-12 0"
}], ["circle", {
  cx: "12",
  cy: "10",
  r: "4"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}]];
const CircleUser = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["circle", {
  cx: "12",
  cy: "10",
  r: "3"
}], ["path", {
  d: "M7 20.662V19a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v1.662"
}]];
const Circle = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}]];
const CircleX = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "m15 9-6 6"
}], ["path", {
  d: "m9 9 6 6"
}]];
const CircuitBoard = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M11 9h4a2 2 0 0 0 2-2V3"
}], ["circle", {
  cx: "9",
  cy: "9",
  r: "2"
}], ["path", {
  d: "M7 21v-4a2 2 0 0 1 2-2h4"
}], ["circle", {
  cx: "15",
  cy: "15",
  r: "2"
}]];
const Citrus = [["path", {
  d: "M21.66 17.67a1.08 1.08 0 0 1-.04 1.6A12 12 0 0 1 4.73 2.38a1.1 1.1 0 0 1 1.61-.04z"
}], ["path", {
  d: "M19.65 15.66A8 8 0 0 1 8.35 4.34"
}], ["path", {
  d: "m14 10-5.5 5.5"
}], ["path", {
  d: "M14 17.85V10H6.15"
}]];
const Clapperboard = [["path", {
  d: "M20.2 6 3 11l-.9-2.4c-.3-1.1.3-2.2 1.3-2.5l13.5-4c1.1-.3 2.2.3 2.5 1.3Z"
}], ["path", {
  d: "m6.2 5.3 3.1 3.9"
}], ["path", {
  d: "m12.4 3.4 3.1 4"
}], ["path", {
  d: "M3 11h18v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Z"
}]];
const ClipboardCheck = [["rect", {
  width: "8",
  height: "4",
  x: "8",
  y: "2",
  rx: "1",
  ry: "1"
}], ["path", {
  d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "m9 14 2 2 4-4"
}]];
const ClipboardCopy = [["rect", {
  width: "8",
  height: "4",
  x: "8",
  y: "2",
  rx: "1",
  ry: "1"
}], ["path", {
  d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2"
}], ["path", {
  d: "M16 4h2a2 2 0 0 1 2 2v4"
}], ["path", {
  d: "M21 14H11"
}], ["path", {
  d: "m15 10-4 4 4 4"
}]];
const ClipboardList = [["rect", {
  width: "8",
  height: "4",
  x: "8",
  y: "2",
  rx: "1",
  ry: "1"
}], ["path", {
  d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M12 11h4"
}], ["path", {
  d: "M12 16h4"
}], ["path", {
  d: "M8 11h.01"
}], ["path", {
  d: "M8 16h.01"
}]];
const ClipboardMinus = [["rect", {
  width: "8",
  height: "4",
  x: "8",
  y: "2",
  rx: "1",
  ry: "1"
}], ["path", {
  d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M9 14h6"
}]];
const ClipboardPaste = [["path", {
  d: "M15 2H9a1 1 0 0 0-1 1v2c0 .6.4 1 1 1h6c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1Z"
}], ["path", {
  d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2M16 4h2a2 2 0 0 1 2 2v2M11 14h10"
}], ["path", {
  d: "m17 10 4 4-4 4"
}]];
const ClipboardPenLine = [["rect", {
  width: "8",
  height: "4",
  x: "8",
  y: "2",
  rx: "1"
}], ["path", {
  d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-.5"
}], ["path", {
  d: "M16 4h2a2 2 0 0 1 1.73 1"
}], ["path", {
  d: "M8 18h1"
}], ["path", {
  d: "M21.378 12.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
}]];
const ClipboardPen = [["rect", {
  width: "8",
  height: "4",
  x: "8",
  y: "2",
  rx: "1"
}], ["path", {
  d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-5.5"
}], ["path", {
  d: "M4 13.5V6a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M13.378 15.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
}]];
const ClipboardPlus = [["rect", {
  width: "8",
  height: "4",
  x: "8",
  y: "2",
  rx: "1",
  ry: "1"
}], ["path", {
  d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M9 14h6"
}], ["path", {
  d: "M12 17v-6"
}]];
const ClipboardType = [["rect", {
  width: "8",
  height: "4",
  x: "8",
  y: "2",
  rx: "1",
  ry: "1"
}], ["path", {
  d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M9 12v-1h6v1"
}], ["path", {
  d: "M11 17h2"
}], ["path", {
  d: "M12 11v6"
}]];
const ClipboardX = [["rect", {
  width: "8",
  height: "4",
  x: "8",
  y: "2",
  rx: "1",
  ry: "1"
}], ["path", {
  d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "m15 11-6 6"
}], ["path", {
  d: "m9 11 6 6"
}]];
const Clipboard = [["rect", {
  width: "8",
  height: "4",
  x: "8",
  y: "2",
  rx: "1",
  ry: "1"
}], ["path", {
  d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
}]];
const Clock1 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polyline", {
  points: "12 6 12 12 14.5 8"
}]];
const Clock10 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polyline", {
  points: "12 6 12 12 8 10"
}]];
const Clock11 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polyline", {
  points: "12 6 12 12 9.5 8"
}]];
const Clock12 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polyline", {
  points: "12 6 12 12"
}]];
const Clock2 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polyline", {
  points: "12 6 12 12 16 10"
}]];
const Clock3 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polyline", {
  points: "12 6 12 12 16.5 12"
}]];
const Clock4 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polyline", {
  points: "12 6 12 12 16 14"
}]];
const Clock5 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polyline", {
  points: "12 6 12 12 14.5 16"
}]];
const Clock6 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polyline", {
  points: "12 6 12 12 12 16.5"
}]];
const Clock7 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polyline", {
  points: "12 6 12 12 9.5 16"
}]];
const Clock8 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polyline", {
  points: "12 6 12 12 8 14"
}]];
const ClockAlert = [["path", {
  d: "M12 6v6l4 2"
}], ["path", {
  d: "M16 21.16a10 10 0 1 1 5-13.516"
}], ["path", {
  d: "M20 11.5v6"
}], ["path", {
  d: "M20 21.5h.01"
}]];
const Clock9 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polyline", {
  points: "12 6 12 12 7.5 12"
}]];
const ClockArrowUp = [["path", {
  d: "M13.228 21.925A10 10 0 1 1 21.994 12.338"
}], ["path", {
  d: "M12 6v6l1.562.781"
}], ["path", {
  d: "m14 18 4-4 4 4"
}], ["path", {
  d: "M18 22v-8"
}]];
const ClockArrowDown = [["path", {
  d: "M12.338 21.994A10 10 0 1 1 21.925 13.227"
}], ["path", {
  d: "M12 6v6l2 1"
}], ["path", {
  d: "m14 18 4 4 4-4"
}], ["path", {
  d: "M18 14v8"
}]];
const ClockFading = [["path", {
  d: "M12 2a10 10 0 0 1 7.38 16.75"
}], ["path", {
  d: "M12 6v6l4 2"
}], ["path", {
  d: "M2.5 8.875a10 10 0 0 0-.5 3"
}], ["path", {
  d: "M2.83 16a10 10 0 0 0 2.43 3.4"
}], ["path", {
  d: "M4.636 5.235a10 10 0 0 1 .891-.857"
}], ["path", {
  d: "M8.644 21.42a10 10 0 0 0 7.631-.38"
}]];
const Clock = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["polyline", {
  points: "12 6 12 12 16 14"
}]];
const CloudAlert = [["path", {
  d: "M12 12v4"
}], ["path", {
  d: "M12 20h.01"
}], ["path", {
  d: "M17 18h.5a1 1 0 0 0 0-9h-1.79A7 7 0 1 0 7 17.708"
}]];
const CloudCog = [["circle", {
  cx: "12",
  cy: "17",
  r: "3"
}], ["path", {
  d: "M4.2 15.1A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.2"
}], ["path", {
  d: "m15.7 18.4-.9-.3"
}], ["path", {
  d: "m9.2 15.9-.9-.3"
}], ["path", {
  d: "m10.6 20.7.3-.9"
}], ["path", {
  d: "m13.1 14.2.3-.9"
}], ["path", {
  d: "m13.6 20.7-.4-1"
}], ["path", {
  d: "m10.8 14.3-.4-1"
}], ["path", {
  d: "m8.3 18.6 1-.4"
}], ["path", {
  d: "m14.7 15.8 1-.4"
}]];
const CloudDownload = [["path", {
  d: "M12 13v8l-4-4"
}], ["path", {
  d: "m12 21 4-4"
}], ["path", {
  d: "M4.393 15.269A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.436 8.284"
}]];
const CloudDrizzle = [["path", {
  d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
}], ["path", {
  d: "M8 19v1"
}], ["path", {
  d: "M8 14v1"
}], ["path", {
  d: "M16 19v1"
}], ["path", {
  d: "M16 14v1"
}], ["path", {
  d: "M12 21v1"
}], ["path", {
  d: "M12 16v1"
}]];
const CloudFog = [["path", {
  d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
}], ["path", {
  d: "M16 17H7"
}], ["path", {
  d: "M17 21H9"
}]];
const CloudHail = [["path", {
  d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
}], ["path", {
  d: "M16 14v2"
}], ["path", {
  d: "M8 14v2"
}], ["path", {
  d: "M16 20h.01"
}], ["path", {
  d: "M8 20h.01"
}], ["path", {
  d: "M12 16v2"
}], ["path", {
  d: "M12 22h.01"
}]];
const CloudLightning = [["path", {
  d: "M6 16.326A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 .5 8.973"
}], ["path", {
  d: "m13 12-3 5h4l-3 5"
}]];
const CloudMoonRain = [["path", {
  d: "M10.188 8.5A6 6 0 0 1 16 4a1 1 0 0 0 6 6 6 6 0 0 1-3 5.197"
}], ["path", {
  d: "M11 20v2"
}], ["path", {
  d: "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24"
}], ["path", {
  d: "M7 19v2"
}]];
const CloudMoon = [["path", {
  d: "M10.188 8.5A6 6 0 0 1 16 4a1 1 0 0 0 6 6 6 6 0 0 1-3 5.197"
}], ["path", {
  d: "M13 16a3 3 0 1 1 0 6H7a5 5 0 1 1 4.9-6Z"
}]];
const CloudOff = [["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M5.782 5.782A7 7 0 0 0 9 19h8.5a4.5 4.5 0 0 0 1.307-.193"
}], ["path", {
  d: "M21.532 16.5A4.5 4.5 0 0 0 17.5 10h-1.79A7.008 7.008 0 0 0 10 5.07"
}]];
const CloudRainWind = [["path", {
  d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
}], ["path", {
  d: "m9.2 22 3-7"
}], ["path", {
  d: "m9 13-3 7"
}], ["path", {
  d: "m17 13-3 7"
}]];
const CloudRain = [["path", {
  d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
}], ["path", {
  d: "M16 14v6"
}], ["path", {
  d: "M8 14v6"
}], ["path", {
  d: "M12 16v6"
}]];
const CloudSnow = [["path", {
  d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
}], ["path", {
  d: "M8 15h.01"
}], ["path", {
  d: "M8 19h.01"
}], ["path", {
  d: "M12 17h.01"
}], ["path", {
  d: "M12 21h.01"
}], ["path", {
  d: "M16 15h.01"
}], ["path", {
  d: "M16 19h.01"
}]];
const CloudSunRain = [["path", {
  d: "M12 2v2"
}], ["path", {
  d: "m4.93 4.93 1.41 1.41"
}], ["path", {
  d: "M20 12h2"
}], ["path", {
  d: "m19.07 4.93-1.41 1.41"
}], ["path", {
  d: "M15.947 12.65a4 4 0 0 0-5.925-4.128"
}], ["path", {
  d: "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24"
}], ["path", {
  d: "M11 20v2"
}], ["path", {
  d: "M7 19v2"
}]];
const CloudSun = [["path", {
  d: "M12 2v2"
}], ["path", {
  d: "m4.93 4.93 1.41 1.41"
}], ["path", {
  d: "M20 12h2"
}], ["path", {
  d: "m19.07 4.93-1.41 1.41"
}], ["path", {
  d: "M15.947 12.65a4 4 0 0 0-5.925-4.128"
}], ["path", {
  d: "M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z"
}]];
const CloudUpload = [["path", {
  d: "M12 13v8"
}], ["path", {
  d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
}], ["path", {
  d: "m8 17 4-4 4 4"
}]];
const Cloud = [["path", {
  d: "M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z"
}]];
const Cloudy = [["path", {
  d: "M17.5 21H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z"
}], ["path", {
  d: "M22 10a3 3 0 0 0-3-3h-2.207a5.502 5.502 0 0 0-10.702.5"
}]];
const Clover = [["path", {
  d: "M16.17 7.83 2 22"
}], ["path", {
  d: "M4.02 12a2.827 2.827 0 1 1 3.81-4.17A2.827 2.827 0 1 1 12 4.02a2.827 2.827 0 1 1 4.17 3.81A2.827 2.827 0 1 1 19.98 12a2.827 2.827 0 1 1-3.81 4.17A2.827 2.827 0 1 1 12 19.98a2.827 2.827 0 1 1-4.17-3.81A1 1 0 1 1 4 12"
}], ["path", {
  d: "m7.83 7.83 8.34 8.34"
}]];
const Club = [["path", {
  d: "M17.28 9.05a5.5 5.5 0 1 0-10.56 0A5.5 5.5 0 1 0 12 17.66a5.5 5.5 0 1 0 5.28-8.6Z"
}], ["path", {
  d: "M12 17.66L12 22"
}]];
const CodeXml = [["path", {
  d: "m18 16 4-4-4-4"
}], ["path", {
  d: "m6 8-4 4 4 4"
}], ["path", {
  d: "m14.5 4-5 16"
}]];
const Code = [["polyline", {
  points: "16 18 22 12 16 6"
}], ["polyline", {
  points: "8 6 2 12 8 18"
}]];
const Codepen = [["polygon", {
  points: "12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "22",
  y2: "15.5"
}], ["polyline", {
  points: "22 8.5 12 15.5 2 8.5"
}], ["polyline", {
  points: "2 15.5 12 8.5 22 15.5"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "2",
  y2: "8.5"
}]];
const Codesandbox = [["path", {
  d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"
}], ["polyline", {
  points: "7.5 4.21 12 6.81 16.5 4.21"
}], ["polyline", {
  points: "7.5 19.79 7.5 14.6 3 12"
}], ["polyline", {
  points: "21 12 16.5 14.6 16.5 19.79"
}], ["polyline", {
  points: "3.27 6.96 12 12.01 20.73 6.96"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "22.08",
  y2: "12"
}]];
const Coffee = [["path", {
  d: "M10 2v2"
}], ["path", {
  d: "M14 2v2"
}], ["path", {
  d: "M16 8a1 1 0 0 1 1 1v8a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4V9a1 1 0 0 1 1-1h14a4 4 0 1 1 0 8h-1"
}], ["path", {
  d: "M6 2v2"
}]];
const Cog = [["path", {
  d: "M12 20a8 8 0 1 0 0-16 8 8 0 0 0 0 16Z"
}], ["path", {
  d: "M12 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z"
}], ["path", {
  d: "M12 2v2"
}], ["path", {
  d: "M12 22v-2"
}], ["path", {
  d: "m17 20.66-1-1.73"
}], ["path", {
  d: "M11 10.27 7 3.34"
}], ["path", {
  d: "m20.66 17-1.73-1"
}], ["path", {
  d: "m3.34 7 1.73 1"
}], ["path", {
  d: "M14 12h8"
}], ["path", {
  d: "M2 12h2"
}], ["path", {
  d: "m20.66 7-1.73 1"
}], ["path", {
  d: "m3.34 17 1.73-1"
}], ["path", {
  d: "m17 3.34-1 1.73"
}], ["path", {
  d: "m11 13.73-4 6.93"
}]];
const Coins = [["circle", {
  cx: "8",
  cy: "8",
  r: "6"
}], ["path", {
  d: "M18.09 10.37A6 6 0 1 1 10.34 18"
}], ["path", {
  d: "M7 6h1v4"
}], ["path", {
  d: "m16.71 13.88.7.71-2.82 2.82"
}]];
const Columns2 = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M12 3v18"
}]];
const Columns3 = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M9 3v18"
}], ["path", {
  d: "M15 3v18"
}]];
const Columns4 = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M7.5 3v18"
}], ["path", {
  d: "M12 3v18"
}], ["path", {
  d: "M16.5 3v18"
}]];
const Combine = [["path", {
  d: "M10 18H5a3 3 0 0 1-3-3v-1"
}], ["path", {
  d: "M14 2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2"
}], ["path", {
  d: "M20 2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2"
}], ["path", {
  d: "m7 21 3-3-3-3"
}], ["rect", {
  x: "14",
  y: "14",
  width: "8",
  height: "8",
  rx: "2"
}], ["rect", {
  x: "2",
  y: "2",
  width: "8",
  height: "8",
  rx: "2"
}]];
const Command = [["path", {
  d: "M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3"
}]];
const Component = [["path", {
  d: "M15.536 11.293a1 1 0 0 0 0 1.414l2.376 2.377a1 1 0 0 0 1.414 0l2.377-2.377a1 1 0 0 0 0-1.414l-2.377-2.377a1 1 0 0 0-1.414 0z"
}], ["path", {
  d: "M2.297 11.293a1 1 0 0 0 0 1.414l2.377 2.377a1 1 0 0 0 1.414 0l2.377-2.377a1 1 0 0 0 0-1.414L6.088 8.916a1 1 0 0 0-1.414 0z"
}], ["path", {
  d: "M8.916 17.912a1 1 0 0 0 0 1.415l2.377 2.376a1 1 0 0 0 1.414 0l2.377-2.376a1 1 0 0 0 0-1.415l-2.377-2.376a1 1 0 0 0-1.414 0z"
}], ["path", {
  d: "M8.916 4.674a1 1 0 0 0 0 1.414l2.377 2.376a1 1 0 0 0 1.414 0l2.377-2.376a1 1 0 0 0 0-1.414l-2.377-2.377a1 1 0 0 0-1.414 0z"
}]];
const Compass = [["path", {
  d: "m16.24 7.76-1.804 5.411a2 2 0 0 1-1.265 1.265L7.76 16.24l1.804-5.411a2 2 0 0 1 1.265-1.265z"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}]];
const Computer = [["rect", {
  width: "14",
  height: "8",
  x: "5",
  y: "2",
  rx: "2"
}], ["rect", {
  width: "20",
  height: "8",
  x: "2",
  y: "14",
  rx: "2"
}], ["path", {
  d: "M6 18h2"
}], ["path", {
  d: "M12 18h6"
}]];
const ConciergeBell = [["path", {
  d: "M3 20a1 1 0 0 1-1-1v-1a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1Z"
}], ["path", {
  d: "M20 16a8 8 0 1 0-16 0"
}], ["path", {
  d: "M12 4v4"
}], ["path", {
  d: "M10 4h4"
}]];
const Cone = [["path", {
  d: "m20.9 18.55-8-15.98a1 1 0 0 0-1.8 0l-8 15.98"
}], ["ellipse", {
  cx: "12",
  cy: "19",
  rx: "9",
  ry: "3"
}]];
const Construction = [["rect", {
  x: "2",
  y: "6",
  width: "20",
  height: "8",
  rx: "1"
}], ["path", {
  d: "M17 14v7"
}], ["path", {
  d: "M7 14v7"
}], ["path", {
  d: "M17 3v3"
}], ["path", {
  d: "M7 3v3"
}], ["path", {
  d: "M10 14 2.3 6.3"
}], ["path", {
  d: "m14 6 7.7 7.7"
}], ["path", {
  d: "m8 6 8 8"
}]];
const ContactRound = [["path", {
  d: "M16 2v2"
}], ["path", {
  d: "M17.915 22a6 6 0 0 0-12 0"
}], ["path", {
  d: "M8 2v2"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "4"
}], ["rect", {
  x: "3",
  y: "4",
  width: "18",
  height: "18",
  rx: "2"
}]];
const Contact = [["path", {
  d: "M16 2v2"
}], ["path", {
  d: "M7 22v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M8 2v2"
}], ["circle", {
  cx: "12",
  cy: "11",
  r: "3"
}], ["rect", {
  x: "3",
  y: "4",
  width: "18",
  height: "18",
  rx: "2"
}]];
const Container = [["path", {
  d: "M22 7.7c0-.6-.4-1.2-.8-1.5l-6.3-3.9a1.72 1.72 0 0 0-1.7 0l-10.3 6c-.5.2-.9.8-.9 1.4v6.6c0 .5.4 1.2.8 1.5l6.3 3.9a1.72 1.72 0 0 0 1.7 0l10.3-6c.5-.3.9-1 .9-1.5Z"
}], ["path", {
  d: "M10 21.9V14L2.1 9.1"
}], ["path", {
  d: "m10 14 11.9-6.9"
}], ["path", {
  d: "M14 19.8v-8.1"
}], ["path", {
  d: "M18 17.5V9.4"
}]];
const Contrast = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M12 18a6 6 0 0 0 0-12v12z"
}]];
const Cookie = [["path", {
  d: "M12 2a10 10 0 1 0 10 10 4 4 0 0 1-5-5 4 4 0 0 1-5-5"
}], ["path", {
  d: "M8.5 8.5v.01"
}], ["path", {
  d: "M16 15.5v.01"
}], ["path", {
  d: "M12 12v.01"
}], ["path", {
  d: "M11 17v.01"
}], ["path", {
  d: "M7 14v.01"
}]];
const CookingPot = [["path", {
  d: "M2 12h20"
}], ["path", {
  d: "M20 12v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-8"
}], ["path", {
  d: "m4 8 16-4"
}], ["path", {
  d: "m8.86 6.78-.45-1.81a2 2 0 0 1 1.45-2.43l1.94-.48a2 2 0 0 1 2.43 1.46l.45 1.8"
}]];
const CopyCheck = [["path", {
  d: "m12 15 2 2 4-4"
}], ["rect", {
  width: "14",
  height: "14",
  x: "8",
  y: "8",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
}]];
const CopyMinus = [["line", {
  x1: "12",
  x2: "18",
  y1: "15",
  y2: "15"
}], ["rect", {
  width: "14",
  height: "14",
  x: "8",
  y: "8",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
}]];
const CopyPlus = [["line", {
  x1: "15",
  x2: "15",
  y1: "12",
  y2: "18"
}], ["line", {
  x1: "12",
  x2: "18",
  y1: "15",
  y2: "15"
}], ["rect", {
  width: "14",
  height: "14",
  x: "8",
  y: "8",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
}]];
const CopySlash = [["line", {
  x1: "12",
  x2: "18",
  y1: "18",
  y2: "12"
}], ["rect", {
  width: "14",
  height: "14",
  x: "8",
  y: "8",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
}]];
const CopyX = [["line", {
  x1: "12",
  x2: "18",
  y1: "12",
  y2: "18"
}], ["line", {
  x1: "12",
  x2: "18",
  y1: "18",
  y2: "12"
}], ["rect", {
  width: "14",
  height: "14",
  x: "8",
  y: "8",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
}]];
const Copy = [["rect", {
  width: "14",
  height: "14",
  x: "8",
  y: "8",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
}]];
const Copyleft = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M9.17 14.83a4 4 0 1 0 0-5.66"
}]];
const Copyright = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M14.83 14.83a4 4 0 1 1 0-5.66"
}]];
const CornerDownRight = [["polyline", {
  points: "15 10 20 15 15 20"
}], ["path", {
  d: "M4 4v7a4 4 0 0 0 4 4h12"
}]];
const CornerLeftDown = [["polyline", {
  points: "14 15 9 20 4 15"
}], ["path", {
  d: "M20 4h-7a4 4 0 0 0-4 4v12"
}]];
const CornerDownLeft = [["polyline", {
  points: "9 10 4 15 9 20"
}], ["path", {
  d: "M20 4v7a4 4 0 0 1-4 4H4"
}]];
const CornerLeftUp = [["polyline", {
  points: "14 9 9 4 4 9"
}], ["path", {
  d: "M20 20h-7a4 4 0 0 1-4-4V4"
}]];
const CornerRightDown = [["polyline", {
  points: "10 15 15 20 20 15"
}], ["path", {
  d: "M4 4h7a4 4 0 0 1 4 4v12"
}]];
const CornerRightUp = [["polyline", {
  points: "10 9 15 4 20 9"
}], ["path", {
  d: "M4 20h7a4 4 0 0 0 4-4V4"
}]];
const CornerUpLeft = [["polyline", {
  points: "9 14 4 9 9 4"
}], ["path", {
  d: "M20 20v-7a4 4 0 0 0-4-4H4"
}]];
const CornerUpRight = [["polyline", {
  points: "15 14 20 9 15 4"
}], ["path", {
  d: "M4 20v-7a4 4 0 0 1 4-4h12"
}]];
const Cpu = [["rect", {
  width: "16",
  height: "16",
  x: "4",
  y: "4",
  rx: "2"
}], ["rect", {
  width: "6",
  height: "6",
  x: "9",
  y: "9",
  rx: "1"
}], ["path", {
  d: "M15 2v2"
}], ["path", {
  d: "M15 20v2"
}], ["path", {
  d: "M2 15h2"
}], ["path", {
  d: "M2 9h2"
}], ["path", {
  d: "M20 15h2"
}], ["path", {
  d: "M20 9h2"
}], ["path", {
  d: "M9 2v2"
}], ["path", {
  d: "M9 20v2"
}]];
const CreativeCommons = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M10 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1"
}], ["path", {
  d: "M17 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1"
}]];
const CreditCard = [["rect", {
  width: "20",
  height: "14",
  x: "2",
  y: "5",
  rx: "2"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "10",
  y2: "10"
}]];
const Croissant = [["path", {
  d: "m4.6 13.11 5.79-3.21c1.89-1.05 4.79 1.78 3.71 3.71l-3.22 5.81C8.8 23.16.79 15.23 4.6 13.11Z"
}], ["path", {
  d: "m10.5 9.5-1-2.29C9.2 6.48 8.8 6 8 6H4.5C2.79 6 2 6.5 2 8.5a7.71 7.71 0 0 0 2 4.83"
}], ["path", {
  d: "M8 6c0-1.55.24-4-2-4-2 0-2.5 2.17-2.5 4"
}], ["path", {
  d: "m14.5 13.5 2.29 1c.73.3 1.21.7 1.21 1.5v3.5c0 1.71-.5 2.5-2.5 2.5a7.71 7.71 0 0 1-4.83-2"
}], ["path", {
  d: "M18 16c1.55 0 4-.24 4 2 0 2-2.17 2.5-4 2.5"
}]];
const Crop = [["path", {
  d: "M6 2v14a2 2 0 0 0 2 2h14"
}], ["path", {
  d: "M18 22V8a2 2 0 0 0-2-2H2"
}]];
const Cross = [["path", {
  d: "M4 9a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4a1 1 0 0 1 1 1v4a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-4a1 1 0 0 1 1-1h4a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-4a1 1 0 0 1-1-1V4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4a1 1 0 0 1-1 1z"
}]];
const Crosshair = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["line", {
  x1: "22",
  x2: "18",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "6",
  x2: "2",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "6",
  y2: "2"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "22",
  y2: "18"
}]];
const Crown = [["path", {
  d: "M11.562 3.266a.5.5 0 0 1 .876 0L15.39 8.87a1 1 0 0 0 1.516.294L21.183 5.5a.5.5 0 0 1 .798.519l-2.834 10.246a1 1 0 0 1-.956.734H5.81a1 1 0 0 1-.957-.734L2.02 6.02a.5.5 0 0 1 .798-.519l4.276 3.664a1 1 0 0 0 1.516-.294z"
}], ["path", {
  d: "M5 21h14"
}]];
const Cuboid = [["path", {
  d: "m21.12 6.4-6.05-4.06a2 2 0 0 0-2.17-.05L2.95 8.41a2 2 0 0 0-.95 1.7v5.82a2 2 0 0 0 .88 1.66l6.05 4.07a2 2 0 0 0 2.17.05l9.95-6.12a2 2 0 0 0 .95-1.7V8.06a2 2 0 0 0-.88-1.66Z"
}], ["path", {
  d: "M10 22v-8L2.25 9.15"
}], ["path", {
  d: "m10 14 11.77-6.87"
}]];
const CupSoda = [["path", {
  d: "m6 8 1.75 12.28a2 2 0 0 0 2 1.72h4.54a2 2 0 0 0 2-1.72L18 8"
}], ["path", {
  d: "M5 8h14"
}], ["path", {
  d: "M7 15a6.47 6.47 0 0 1 5 0 6.47 6.47 0 0 0 5 0"
}], ["path", {
  d: "m12 8 1-6h2"
}]];
const Currency = [["circle", {
  cx: "12",
  cy: "12",
  r: "8"
}], ["line", {
  x1: "3",
  x2: "6",
  y1: "3",
  y2: "6"
}], ["line", {
  x1: "21",
  x2: "18",
  y1: "3",
  y2: "6"
}], ["line", {
  x1: "3",
  x2: "6",
  y1: "21",
  y2: "18"
}], ["line", {
  x1: "21",
  x2: "18",
  y1: "21",
  y2: "18"
}]];
const Dam = [["path", {
  d: "M11 11.31c1.17.56 1.54 1.69 3.5 1.69 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
}], ["path", {
  d: "M11.75 18c.35.5 1.45 1 2.75 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
}], ["path", {
  d: "M2 10h4"
}], ["path", {
  d: "M2 14h4"
}], ["path", {
  d: "M2 18h4"
}], ["path", {
  d: "M2 6h4"
}], ["path", {
  d: "M7 3a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1L10 4a1 1 0 0 0-1-1z"
}]];
const Cylinder = [["ellipse", {
  cx: "12",
  cy: "5",
  rx: "9",
  ry: "3"
}], ["path", {
  d: "M3 5v14a9 3 0 0 0 18 0V5"
}]];
const DatabaseBackup = [["ellipse", {
  cx: "12",
  cy: "5",
  rx: "9",
  ry: "3"
}], ["path", {
  d: "M3 12a9 3 0 0 0 5 2.69"
}], ["path", {
  d: "M21 9.3V5"
}], ["path", {
  d: "M3 5v14a9 3 0 0 0 6.47 2.88"
}], ["path", {
  d: "M12 12v4h4"
}], ["path", {
  d: "M13 20a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L12 16"
}]];
const DatabaseZap = [["ellipse", {
  cx: "12",
  cy: "5",
  rx: "9",
  ry: "3"
}], ["path", {
  d: "M3 5V19A9 3 0 0 0 15 21.84"
}], ["path", {
  d: "M21 5V8"
}], ["path", {
  d: "M21 12L18 17H22L19 22"
}], ["path", {
  d: "M3 12A9 3 0 0 0 14.59 14.87"
}]];
const Database = [["ellipse", {
  cx: "12",
  cy: "5",
  rx: "9",
  ry: "3"
}], ["path", {
  d: "M3 5V19A9 3 0 0 0 21 19V5"
}], ["path", {
  d: "M3 12A9 3 0 0 0 21 12"
}]];
const Delete = [["path", {
  d: "M10 5a2 2 0 0 0-1.344.519l-6.328 5.74a1 1 0 0 0 0 1.481l6.328 5.741A2 2 0 0 0 10 19h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2z"
}], ["path", {
  d: "m12 9 6 6"
}], ["path", {
  d: "m18 9-6 6"
}]];
const Dessert = [["circle", {
  cx: "12",
  cy: "4",
  r: "2"
}], ["path", {
  d: "M10.2 3.2C5.5 4 2 8.1 2 13a2 2 0 0 0 4 0v-1a2 2 0 0 1 4 0v4a2 2 0 0 0 4 0v-4a2 2 0 0 1 4 0v1a2 2 0 0 0 4 0c0-4.9-3.5-9-8.2-9.8"
}], ["path", {
  d: "M3.2 14.8a9 9 0 0 0 17.6 0"
}]];
const Diameter = [["circle", {
  cx: "19",
  cy: "19",
  r: "2"
}], ["circle", {
  cx: "5",
  cy: "5",
  r: "2"
}], ["path", {
  d: "M6.48 3.66a10 10 0 0 1 13.86 13.86"
}], ["path", {
  d: "m6.41 6.41 11.18 11.18"
}], ["path", {
  d: "M3.66 6.48a10 10 0 0 0 13.86 13.86"
}]];
const DiamondMinus = [["path", {
  d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0z"
}], ["path", {
  d: "M8 12h8"
}]];
const DiamondPercent = [["path", {
  d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0Z"
}], ["path", {
  d: "M9.2 9.2h.01"
}], ["path", {
  d: "m14.5 9.5-5 5"
}], ["path", {
  d: "M14.7 14.8h.01"
}]];
const DiamondPlus = [["path", {
  d: "M12 8v8"
}], ["path", {
  d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0z"
}], ["path", {
  d: "M8 12h8"
}]];
const Diamond = [["path", {
  d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41l-7.59-7.59a2.41 2.41 0 0 0-3.41 0Z"
}]];
const Dice1 = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M12 12h.01"
}]];
const Dice2 = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M15 9h.01"
}], ["path", {
  d: "M9 15h.01"
}]];
const Dice3 = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M16 8h.01"
}], ["path", {
  d: "M12 12h.01"
}], ["path", {
  d: "M8 16h.01"
}]];
const Dice4 = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M16 8h.01"
}], ["path", {
  d: "M8 8h.01"
}], ["path", {
  d: "M8 16h.01"
}], ["path", {
  d: "M16 16h.01"
}]];
const Dice5 = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M16 8h.01"
}], ["path", {
  d: "M8 8h.01"
}], ["path", {
  d: "M8 16h.01"
}], ["path", {
  d: "M16 16h.01"
}], ["path", {
  d: "M12 12h.01"
}]];
const Dices = [["rect", {
  width: "12",
  height: "12",
  x: "2",
  y: "10",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "m17.92 14 3.5-3.5a2.24 2.24 0 0 0 0-3l-5-4.92a2.24 2.24 0 0 0-3 0L10 6"
}], ["path", {
  d: "M6 18h.01"
}], ["path", {
  d: "M10 14h.01"
}], ["path", {
  d: "M15 6h.01"
}], ["path", {
  d: "M18 9h.01"
}]];
const Dice6 = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M16 8h.01"
}], ["path", {
  d: "M16 12h.01"
}], ["path", {
  d: "M16 16h.01"
}], ["path", {
  d: "M8 8h.01"
}], ["path", {
  d: "M8 12h.01"
}], ["path", {
  d: "M8 16h.01"
}]];
const Diff = [["path", {
  d: "M12 3v14"
}], ["path", {
  d: "M5 10h14"
}], ["path", {
  d: "M5 21h14"
}]];
const Disc2 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "4"
}], ["path", {
  d: "M12 12h.01"
}]];
const Disc3 = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M6 12c0-1.7.7-3.2 1.8-4.2"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "2"
}], ["path", {
  d: "M18 12c0 1.7-.7 3.2-1.8 4.2"
}]];
const DiscAlbum = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "5"
}], ["path", {
  d: "M12 12h.01"
}]];
const Disc = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "2"
}]];
const Divide = [["circle", {
  cx: "12",
  cy: "6",
  r: "1"
}], ["line", {
  x1: "5",
  x2: "19",
  y1: "12",
  y2: "12"
}], ["circle", {
  cx: "12",
  cy: "18",
  r: "1"
}]];
const DnaOff = [["path", {
  d: "M15 2c-1.35 1.5-2.092 3-2.5 4.5L14 8"
}], ["path", {
  d: "m17 6-2.891-2.891"
}], ["path", {
  d: "M2 15c3.333-3 6.667-3 10-3"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "m20 9 .891.891"
}], ["path", {
  d: "M22 9c-1.5 1.35-3 2.092-4.5 2.5l-1-1"
}], ["path", {
  d: "M3.109 14.109 4 15"
}], ["path", {
  d: "m6.5 12.5 1 1"
}], ["path", {
  d: "m7 18 2.891 2.891"
}], ["path", {
  d: "M9 22c1.35-1.5 2.092-3 2.5-4.5L10 16"
}]];
const Dna = [["path", {
  d: "m10 16 1.5 1.5"
}], ["path", {
  d: "m14 8-1.5-1.5"
}], ["path", {
  d: "M15 2c-1.798 1.998-2.518 3.995-2.807 5.993"
}], ["path", {
  d: "m16.5 10.5 1 1"
}], ["path", {
  d: "m17 6-2.891-2.891"
}], ["path", {
  d: "M2 15c6.667-6 13.333 0 20-6"
}], ["path", {
  d: "m20 9 .891.891"
}], ["path", {
  d: "M3.109 14.109 4 15"
}], ["path", {
  d: "m6.5 12.5 1 1"
}], ["path", {
  d: "m7 18 2.891 2.891"
}], ["path", {
  d: "M9 22c1.798-1.998 2.518-3.995 2.807-5.993"
}]];
const Dock = [["path", {
  d: "M2 8h20"
}], ["rect", {
  width: "20",
  height: "16",
  x: "2",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M6 16h12"
}]];
const Dog = [["path", {
  d: "M11.25 16.25h1.5L12 17z"
}], ["path", {
  d: "M16 14v.5"
}], ["path", {
  d: "M4.42 11.247A13.152 13.152 0 0 0 4 14.556C4 18.728 7.582 21 12 21s8-2.272 8-6.444a11.702 11.702 0 0 0-.493-3.309"
}], ["path", {
  d: "M8 14v.5"
}], ["path", {
  d: "M8.5 8.5c-.384 1.05-1.083 2.028-2.344 2.5-1.931.722-3.576-.297-3.656-1-.113-.994 1.177-6.53 4-7 1.923-.321 3.651.845 3.651 2.235A7.497 7.497 0 0 1 14 5.277c0-1.39 1.844-2.598 3.767-2.277 2.823.47 4.113 6.006 4 7-.08.703-1.725 1.722-3.656 1-1.261-.472-1.855-1.45-2.239-2.5"
}]];
const DollarSign = [["line", {
  x1: "12",
  x2: "12",
  y1: "2",
  y2: "22"
}], ["path", {
  d: "M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"
}]];
const Donut = [["path", {
  d: "M20.5 10a2.5 2.5 0 0 1-2.4-3H18a2.95 2.95 0 0 1-2.6-4.4 10 10 0 1 0 6.3 7.1c-.3.2-.8.3-1.2.3"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "3"
}]];
const DoorClosed = [["path", {
  d: "M18 20V6a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v14"
}], ["path", {
  d: "M2 20h20"
}], ["path", {
  d: "M14 12v.01"
}]];
const DoorOpen = [["path", {
  d: "M13 4h3a2 2 0 0 1 2 2v14"
}], ["path", {
  d: "M2 20h3"
}], ["path", {
  d: "M13 20h9"
}], ["path", {
  d: "M10 12v.01"
}], ["path", {
  d: "M13 4.562v16.157a1 1 0 0 1-1.242.97L5 20V5.562a2 2 0 0 1 1.515-1.94l4-1A2 2 0 0 1 13 4.561Z"
}]];
const Dot = [["circle", {
  cx: "12.1",
  cy: "12.1",
  r: "1"
}]];
const Download = [["path", {
  d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"
}], ["polyline", {
  points: "7 10 12 15 17 10"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "15",
  y2: "3"
}]];
const DraftingCompass = [["path", {
  d: "m12.99 6.74 1.93 3.44"
}], ["path", {
  d: "M19.136 12a10 10 0 0 1-14.271 0"
}], ["path", {
  d: "m21 21-2.16-3.84"
}], ["path", {
  d: "m3 21 8.02-14.26"
}], ["circle", {
  cx: "12",
  cy: "5",
  r: "2"
}]];
const Drama = [["path", {
  d: "M10 11h.01"
}], ["path", {
  d: "M14 6h.01"
}], ["path", {
  d: "M18 6h.01"
}], ["path", {
  d: "M6.5 13.1h.01"
}], ["path", {
  d: "M22 5c0 9-4 12-6 12s-6-3-6-12c0-2 2-3 6-3s6 1 6 3"
}], ["path", {
  d: "M17.4 9.9c-.8.8-2 .8-2.8 0"
}], ["path", {
  d: "M10.1 7.1C9 7.2 7.7 7.7 6 8.6c-3.5 2-4.7 3.9-3.7 5.6 4.5 7.8 9.5 8.4 11.2 7.4.9-.5 1.9-2.1 1.9-4.7"
}], ["path", {
  d: "M9.1 16.5c.3-1.1 1.4-1.7 2.4-1.4"
}]];
const Drill = [["path", {
  d: "M10 18a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H5a3 3 0 0 1-3-3 1 1 0 0 1 1-1z"
}], ["path", {
  d: "M13 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1l-.81 3.242a1 1 0 0 1-.97.758H8"
}], ["path", {
  d: "M14 4h3a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-3"
}], ["path", {
  d: "M18 6h4"
}], ["path", {
  d: "m5 10-2 8"
}], ["path", {
  d: "m7 18 2-8"
}]];
const DropletOff = [["path", {
  d: "M18.715 13.186C18.29 11.858 17.384 10.607 16 9.5c-2-1.6-3.5-4-4-6.5a10.7 10.7 0 0 1-.884 2.586"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M8.795 8.797A11 11 0 0 1 8 9.5C6 11.1 5 13 5 15a7 7 0 0 0 13.222 3.208"
}]];
const Dribbble = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M19.13 5.09C15.22 9.14 10 10.44 2.25 10.94"
}], ["path", {
  d: "M21.75 12.84c-6.62-1.41-12.14 1-16.38 6.32"
}], ["path", {
  d: "M8.56 2.75c4.37 6 6 9.42 8 17.72"
}]];
const Droplet = [["path", {
  d: "M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z"
}]];
const Droplets = [["path", {
  d: "M7 16.3c2.2 0 4-1.83 4-4.05 0-1.16-.57-2.26-1.71-3.19S7.29 6.75 7 5.3c-.29 1.45-1.14 2.84-2.29 3.76S3 11.1 3 12.25c0 2.22 1.8 4.05 4 4.05z"
}], ["path", {
  d: "M12.56 6.6A10.97 10.97 0 0 0 14 3.02c.5 2.5 2 4.9 4 6.5s3 3.5 3 5.5a6.98 6.98 0 0 1-11.91 4.97"
}]];
const Drum = [["path", {
  d: "m2 2 8 8"
}], ["path", {
  d: "m22 2-8 8"
}], ["ellipse", {
  cx: "12",
  cy: "9",
  rx: "10",
  ry: "5"
}], ["path", {
  d: "M7 13.4v7.9"
}], ["path", {
  d: "M12 14v8"
}], ["path", {
  d: "M17 13.4v7.9"
}], ["path", {
  d: "M2 9v8a10 5 0 0 0 20 0V9"
}]];
const Drumstick = [["path", {
  d: "M15.4 15.63a7.875 6 135 1 1 6.23-6.23 4.5 3.43 135 0 0-6.23 6.23"
}], ["path", {
  d: "m8.29 12.71-2.6 2.6a2.5 2.5 0 1 0-1.65 4.65A2.5 2.5 0 1 0 8.7 18.3l2.59-2.59"
}]];
const Dumbbell = [["path", {
  d: "M14.4 14.4 9.6 9.6"
}], ["path", {
  d: "M18.657 21.485a2 2 0 1 1-2.829-2.828l-1.767 1.768a2 2 0 1 1-2.829-2.829l6.364-6.364a2 2 0 1 1 2.829 2.829l-1.768 1.767a2 2 0 1 1 2.828 2.829z"
}], ["path", {
  d: "m21.5 21.5-1.4-1.4"
}], ["path", {
  d: "M3.9 3.9 2.5 2.5"
}], ["path", {
  d: "M6.404 12.768a2 2 0 1 1-2.829-2.829l1.768-1.767a2 2 0 1 1-2.828-2.829l2.828-2.828a2 2 0 1 1 2.829 2.828l1.767-1.768a2 2 0 1 1 2.829 2.829z"
}]];
const EarOff = [["path", {
  d: "M6 18.5a3.5 3.5 0 1 0 7 0c0-1.57.92-2.52 2.04-3.46"
}], ["path", {
  d: "M6 8.5c0-.75.13-1.47.36-2.14"
}], ["path", {
  d: "M8.8 3.15A6.5 6.5 0 0 1 19 8.5c0 1.63-.44 2.81-1.09 3.76"
}], ["path", {
  d: "M12.5 6A2.5 2.5 0 0 1 15 8.5M10 13a2 2 0 0 0 1.82-1.18"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Ear = [["path", {
  d: "M6 8.5a6.5 6.5 0 1 1 13 0c0 6-6 6-6 10a3.5 3.5 0 1 1-7 0"
}], ["path", {
  d: "M15 8.5a2.5 2.5 0 0 0-5 0v1a2 2 0 1 1 0 4"
}]];
const EarthLock = [["path", {
  d: "M7 3.34V5a3 3 0 0 0 3 3"
}], ["path", {
  d: "M11 21.95V18a2 2 0 0 0-2-2 2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05"
}], ["path", {
  d: "M21.54 15H17a2 2 0 0 0-2 2v4.54"
}], ["path", {
  d: "M12 2a10 10 0 1 0 9.54 13"
}], ["path", {
  d: "M20 6V4a2 2 0 1 0-4 0v2"
}], ["rect", {
  width: "8",
  height: "5",
  x: "14",
  y: "6",
  rx: "1"
}]];
const Earth = [["path", {
  d: "M21.54 15H17a2 2 0 0 0-2 2v4.54"
}], ["path", {
  d: "M7 3.34V5a3 3 0 0 0 3 3a2 2 0 0 1 2 2c0 1.1.9 2 2 2a2 2 0 0 0 2-2c0-1.1.9-2 2-2h3.17"
}], ["path", {
  d: "M11 21.95V18a2 2 0 0 0-2-2a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}]];
const Eclipse = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M12 2a7 7 0 1 0 10 10"
}]];
const EggFried = [["circle", {
  cx: "11.5",
  cy: "12.5",
  r: "3.5"
}], ["path", {
  d: "M3 8c0-3.5 2.5-6 6.5-6 5 0 4.83 3 7.5 5s5 2 5 6c0 4.5-2.5 6.5-7 6.5-2.5 0-2.5 2.5-6 2.5s-7-2-7-5.5c0-3 1.5-3 1.5-5C3.5 10 3 9 3 8Z"
}]];
const EggOff = [["path", {
  d: "M6.399 6.399C5.362 8.157 4.65 10.189 4.5 12c-.37 4.43 1.27 9.95 7.5 10 3.256-.026 5.259-1.547 6.375-3.625"
}], ["path", {
  d: "M19.532 13.875A14.07 14.07 0 0 0 19.5 12c-.36-4.34-3.95-9.96-7.5-10-1.04.012-2.082.502-3.046 1.297"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Egg = [["path", {
  d: "M12 22c6.23-.05 7.87-5.57 7.5-10-.36-4.34-3.95-9.96-7.5-10-3.55.04-7.14 5.66-7.5 10-.37 4.43 1.27 9.95 7.5 10z"
}]];
const EllipsisVertical = [["circle", {
  cx: "12",
  cy: "12",
  r: "1"
}], ["circle", {
  cx: "12",
  cy: "5",
  r: "1"
}], ["circle", {
  cx: "12",
  cy: "19",
  r: "1"
}]];
const Ellipsis = [["circle", {
  cx: "12",
  cy: "12",
  r: "1"
}], ["circle", {
  cx: "19",
  cy: "12",
  r: "1"
}], ["circle", {
  cx: "5",
  cy: "12",
  r: "1"
}]];
const EqualApproximately = [["path", {
  d: "M5 15a6.5 6.5 0 0 1 7 0 6.5 6.5 0 0 0 7 0"
}], ["path", {
  d: "M5 9a6.5 6.5 0 0 1 7 0 6.5 6.5 0 0 0 7 0"
}]];
const EqualNot = [["line", {
  x1: "5",
  x2: "19",
  y1: "9",
  y2: "9"
}], ["line", {
  x1: "5",
  x2: "19",
  y1: "15",
  y2: "15"
}], ["line", {
  x1: "19",
  x2: "5",
  y1: "5",
  y2: "19"
}]];
const Equal = [["line", {
  x1: "5",
  x2: "19",
  y1: "9",
  y2: "9"
}], ["line", {
  x1: "5",
  x2: "19",
  y1: "15",
  y2: "15"
}]];
const Eraser = [["path", {
  d: "m7 21-4.3-4.3c-1-1-1-2.5 0-3.4l9.6-9.6c1-1 2.5-1 3.4 0l5.6 5.6c1 1 1 2.5 0 3.4L13 21"
}], ["path", {
  d: "M22 21H7"
}], ["path", {
  d: "m5 11 9 9"
}]];
const EthernetPort = [["path", {
  d: "m15 20 3-3h2a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h2l3 3z"
}], ["path", {
  d: "M6 8v1"
}], ["path", {
  d: "M10 8v1"
}], ["path", {
  d: "M14 8v1"
}], ["path", {
  d: "M18 8v1"
}]];
const Euro = [["path", {
  d: "M4 10h12"
}], ["path", {
  d: "M4 14h9"
}], ["path", {
  d: "M19 6a7.7 7.7 0 0 0-5.2-2A7.9 7.9 0 0 0 6 12c0 4.4 3.5 8 7.8 8 2 0 3.8-.8 5.2-2"
}]];
const Expand = [["path", {
  d: "m15 15 6 6"
}], ["path", {
  d: "m15 9 6-6"
}], ["path", {
  d: "M21 16.2V21h-4.8"
}], ["path", {
  d: "M21 7.8V3h-4.8"
}], ["path", {
  d: "M3 16.2V21h4.8"
}], ["path", {
  d: "m3 21 6-6"
}], ["path", {
  d: "M3 7.8V3h4.8"
}], ["path", {
  d: "M9 9 3 3"
}]];
const ExternalLink = [["path", {
  d: "M15 3h6v6"
}], ["path", {
  d: "M10 14 21 3"
}], ["path", {
  d: "M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"
}]];
const EyeClosed = [["path", {
  d: "m15 18-.722-3.25"
}], ["path", {
  d: "M2 8a10.645 10.645 0 0 0 20 0"
}], ["path", {
  d: "m20 15-1.726-2.05"
}], ["path", {
  d: "m4 15 1.726-2.05"
}], ["path", {
  d: "m9 18 .722-3.25"
}]];
const EyeOff = [["path", {
  d: "M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49"
}], ["path", {
  d: "M14.084 14.158a3 3 0 0 1-4.242-4.242"
}], ["path", {
  d: "M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143"
}], ["path", {
  d: "m2 2 20 20"
}]];
const Eye = [["path", {
  d: "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "3"
}]];
const Facebook = [["path", {
  d: "M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"
}]];
const Factory = [["path", {
  d: "M2 20a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8l-7 5V8l-7 5V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
}], ["path", {
  d: "M17 18h1"
}], ["path", {
  d: "M12 18h1"
}], ["path", {
  d: "M7 18h1"
}]];
const Fan = [["path", {
  d: "M10.827 16.379a6.082 6.082 0 0 1-8.618-7.002l5.412 1.45a6.082 6.082 0 0 1 7.002-8.618l-1.45 5.412a6.082 6.082 0 0 1 8.618 7.002l-5.412-1.45a6.082 6.082 0 0 1-7.002 8.618l1.45-5.412Z"
}], ["path", {
  d: "M12 12v.01"
}]];
const FastForward = [["polygon", {
  points: "13 19 22 12 13 5 13 19"
}], ["polygon", {
  points: "2 19 11 12 2 5 2 19"
}]];
const Feather = [["path", {
  d: "M12.67 19a2 2 0 0 0 1.416-.588l6.154-6.172a6 6 0 0 0-8.49-8.49L5.586 9.914A2 2 0 0 0 5 11.328V18a1 1 0 0 0 1 1z"
}], ["path", {
  d: "M16 8 2 22"
}], ["path", {
  d: "M17.5 15H9"
}]];
const Fence = [["path", {
  d: "M4 3 2 5v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z"
}], ["path", {
  d: "M6 8h4"
}], ["path", {
  d: "M6 18h4"
}], ["path", {
  d: "m12 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z"
}], ["path", {
  d: "M14 8h4"
}], ["path", {
  d: "M14 18h4"
}], ["path", {
  d: "m20 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z"
}]];
const FerrisWheel = [["circle", {
  cx: "12",
  cy: "12",
  r: "2"
}], ["path", {
  d: "M12 2v4"
}], ["path", {
  d: "m6.8 15-3.5 2"
}], ["path", {
  d: "m20.7 7-3.5 2"
}], ["path", {
  d: "M6.8 9 3.3 7"
}], ["path", {
  d: "m20.7 17-3.5-2"
}], ["path", {
  d: "m9 22 3-8 3 8"
}], ["path", {
  d: "M8 22h8"
}], ["path", {
  d: "M18 18.7a9 9 0 1 0-12 0"
}]];
const Figma = [["path", {
  d: "M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z"
}], ["path", {
  d: "M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z"
}], ["path", {
  d: "M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z"
}], ["path", {
  d: "M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z"
}], ["path", {
  d: "M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z"
}]];
const FileArchive = [["path", {
  d: "M10 12v-1"
}], ["path", {
  d: "M10 18v-2"
}], ["path", {
  d: "M10 7V6"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M15.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v16a2 2 0 0 0 .274 1.01"
}], ["circle", {
  cx: "10",
  cy: "20",
  r: "2"
}]];
const FileAudio2 = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["circle", {
  cx: "3",
  cy: "17",
  r: "1"
}], ["path", {
  d: "M2 17v-3a4 4 0 0 1 8 0v3"
}], ["circle", {
  cx: "9",
  cy: "17",
  r: "1"
}]];
const FileAudio = [["path", {
  d: "M17.5 22h.5a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M2 19a2 2 0 1 1 4 0v1a2 2 0 1 1-4 0v-4a6 6 0 0 1 12 0v4a2 2 0 1 1-4 0v-1a2 2 0 1 1 4 0"
}]];
const FileAxis3d = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "m8 18 4-4"
}], ["path", {
  d: "M8 10v8h8"
}]];
const FileBadge2 = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["circle", {
  cx: "12",
  cy: "10",
  r: "3"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "m14 12.5 1 5.5-3-1-3 1 1-5.5"
}]];
const FileBadge = [["path", {
  d: "M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z"
}], ["path", {
  d: "M7 16.5 8 22l-3-1-3 1 1-5.5"
}]];
const FileBox = [["path", {
  d: "M14.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M3 13.1a2 2 0 0 0-1 1.76v3.24a2 2 0 0 0 .97 1.78L6 21.7a2 2 0 0 0 2.03.01L11 19.9a2 2 0 0 0 1-1.76V14.9a2 2 0 0 0-.97-1.78L8 11.3a2 2 0 0 0-2.03-.01Z"
}], ["path", {
  d: "M7 17v5"
}], ["path", {
  d: "M11.7 14.2 7 17l-4.7-2.8"
}]];
const FileChartColumnIncreasing = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M8 18v-2"
}], ["path", {
  d: "M12 18v-4"
}], ["path", {
  d: "M16 18v-6"
}]];
const FileChartColumn = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M8 18v-1"
}], ["path", {
  d: "M12 18v-6"
}], ["path", {
  d: "M16 18v-3"
}]];
const FileChartLine = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "m16 13-3.5 3.5-2-2L8 17"
}]];
const FileChartPie = [["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3.5"
}], ["path", {
  d: "M4.017 11.512a6 6 0 1 0 8.466 8.475"
}], ["path", {
  d: "M9 16a1 1 0 0 1-1-1v-4c0-.552.45-1.008.995-.917a6 6 0 0 1 4.922 4.922c.091.544-.365.995-.917.995z"
}]];
const FileCheck2 = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "m3 15 2 2 4-4"
}]];
const FileCheck = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "m9 15 2 2 4-4"
}]];
const FileCode2 = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "m5 12-3 3 3 3"
}], ["path", {
  d: "m9 18 3-3-3-3"
}]];
const FileClock = [["path", {
  d: "M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["circle", {
  cx: "8",
  cy: "16",
  r: "6"
}], ["path", {
  d: "M9.5 17.5 8 16.25V14"
}]];
const FileCode = [["path", {
  d: "M10 12.5 8 15l2 2.5"
}], ["path", {
  d: "m14 12.5 2 2.5-2 2.5"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"
}]];
const FileCog = [["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "m3.2 12.9-.9-.4"
}], ["path", {
  d: "m3.2 15.1-.9.4"
}], ["path", {
  d: "M4.677 21.5a2 2 0 0 0 1.313.5H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2.5"
}], ["path", {
  d: "m4.9 11.2-.4-.9"
}], ["path", {
  d: "m4.9 16.8-.4.9"
}], ["path", {
  d: "m7.5 10.3-.4.9"
}], ["path", {
  d: "m7.5 17.7-.4-.9"
}], ["path", {
  d: "m9.7 12.5-.9.4"
}], ["path", {
  d: "m9.7 15.5-.9-.4"
}], ["circle", {
  cx: "6",
  cy: "14",
  r: "3"
}]];
const FileDiff = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M9 10h6"
}], ["path", {
  d: "M12 13V7"
}], ["path", {
  d: "M9 17h6"
}]];
const FileDigit = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["rect", {
  width: "4",
  height: "6",
  x: "2",
  y: "12",
  rx: "2"
}], ["path", {
  d: "M10 12h2v6"
}], ["path", {
  d: "M10 18h4"
}]];
const FileDown = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M12 18v-6"
}], ["path", {
  d: "m9 15 3 3 3-3"
}]];
const FileHeart = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M10.29 10.7a2.43 2.43 0 0 0-2.66-.52c-.29.12-.56.3-.78.53l-.35.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L6.5 18l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z"
}]];
const FileImage = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["circle", {
  cx: "10",
  cy: "12",
  r: "2"
}], ["path", {
  d: "m20 17-1.296-1.296a2.41 2.41 0 0 0-3.408 0L9 22"
}]];
const FileInput = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M2 15h10"
}], ["path", {
  d: "m9 18 3-3-3-3"
}]];
const FileJson2 = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M4 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1"
}], ["path", {
  d: "M8 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1"
}]];
const FileJson = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M10 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1"
}], ["path", {
  d: "M14 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1"
}]];
const FileKey2 = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v6"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["circle", {
  cx: "4",
  cy: "16",
  r: "2"
}], ["path", {
  d: "m10 10-4.5 4.5"
}], ["path", {
  d: "m9 11 1 1"
}]];
const FileKey = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["circle", {
  cx: "10",
  cy: "16",
  r: "2"
}], ["path", {
  d: "m16 10-4.5 4.5"
}], ["path", {
  d: "m15 11 1 1"
}]];
const FileLock2 = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v1"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["rect", {
  width: "8",
  height: "5",
  x: "2",
  y: "13",
  rx: "1"
}], ["path", {
  d: "M8 13v-2a2 2 0 1 0-4 0v2"
}]];
const FileLock = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["rect", {
  width: "8",
  height: "6",
  x: "8",
  y: "12",
  rx: "1"
}], ["path", {
  d: "M10 12v-2a2 2 0 1 1 4 0v2"
}]];
const FileMinus2 = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M3 15h6"
}]];
const FileMinus = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M9 15h6"
}]];
const FileMusic = [["path", {
  d: "M10.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v8.4"
}], ["path", {
  d: "M8 18v-7.7L16 9v7"
}], ["circle", {
  cx: "14",
  cy: "16",
  r: "2"
}], ["circle", {
  cx: "6",
  cy: "18",
  r: "2"
}]];
const FileOutput = [["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M4 7V4a2 2 0 0 1 2-2 2 2 0 0 0-2 2"
}], ["path", {
  d: "M4.063 20.999a2 2 0 0 0 2 1L18 22a2 2 0 0 0 2-2V7l-5-5H6"
}], ["path", {
  d: "m5 11-3 3"
}], ["path", {
  d: "m5 17-3-3h10"
}]];
const FilePenLine = [["path", {
  d: "m18 5-2.414-2.414A2 2 0 0 0 14.172 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2"
}], ["path", {
  d: "M21.378 12.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
}], ["path", {
  d: "M8 18h1"
}]];
const FilePen = [["path", {
  d: "M12.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v9.5"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M13.378 15.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
}]];
const FilePlus2 = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M3 15h6"
}], ["path", {
  d: "M6 12v6"
}]];
const FilePlus = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M9 15h6"
}], ["path", {
  d: "M12 18v-6"
}]];
const FileQuestion = [["path", {
  d: "M12 17h.01"
}], ["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"
}], ["path", {
  d: "M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3"
}]];
const FileScan = [["path", {
  d: "M20 10V7l-5-5H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M16 14a2 2 0 0 0-2 2"
}], ["path", {
  d: "M20 14a2 2 0 0 1 2 2"
}], ["path", {
  d: "M20 22a2 2 0 0 0 2-2"
}], ["path", {
  d: "M16 22a2 2 0 0 1-2-2"
}]];
const FileSearch2 = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["circle", {
  cx: "11.5",
  cy: "14.5",
  r: "2.5"
}], ["path", {
  d: "M13.3 16.3 15 18"
}]];
const FileSearch = [["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M4.268 21a2 2 0 0 0 1.727 1H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3"
}], ["path", {
  d: "m9 18-1.5-1.5"
}], ["circle", {
  cx: "5",
  cy: "14",
  r: "3"
}]];
const FileSliders = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M8 12h8"
}], ["path", {
  d: "M10 11v2"
}], ["path", {
  d: "M8 17h8"
}], ["path", {
  d: "M14 16v2"
}]];
const FileSpreadsheet = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M8 13h2"
}], ["path", {
  d: "M14 13h2"
}], ["path", {
  d: "M8 17h2"
}], ["path", {
  d: "M14 17h2"
}]];
const FileStack = [["path", {
  d: "M21 7h-3a2 2 0 0 1-2-2V2"
}], ["path", {
  d: "M21 6v6.5c0 .8-.7 1.5-1.5 1.5h-7c-.8 0-1.5-.7-1.5-1.5v-9c0-.8.7-1.5 1.5-1.5H17Z"
}], ["path", {
  d: "M7 8v8.8c0 .3.2.6.4.8.2.2.5.4.8.4H15"
}], ["path", {
  d: "M3 12v8.8c0 .3.2.6.4.8.2.2.5.4.8.4H11"
}]];
const FileSymlink = [["path", {
  d: "m10 18 3-3-3-3"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M4 11V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h7"
}]];
const FileTerminal = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "m8 16 2-2-2-2"
}], ["path", {
  d: "M12 18h4"
}]];
const FileText = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M10 9H8"
}], ["path", {
  d: "M16 13H8"
}], ["path", {
  d: "M16 17H8"
}]];
const FileType2 = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M2 13v-1h6v1"
}], ["path", {
  d: "M5 12v6"
}], ["path", {
  d: "M4 18h2"
}]];
const FileType = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M9 13v-1h6v1"
}], ["path", {
  d: "M12 12v6"
}], ["path", {
  d: "M11 18h2"
}]];
const FileUp = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M12 12v6"
}], ["path", {
  d: "m15 15-3-3-3 3"
}]];
const FileUser = [["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M15 18a3 3 0 1 0-6 0"
}], ["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"
}], ["circle", {
  cx: "12",
  cy: "13",
  r: "2"
}]];
const FileVideo2 = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["rect", {
  width: "8",
  height: "6",
  x: "2",
  y: "12",
  rx: "1"
}], ["path", {
  d: "m10 15.5 4 2.5v-6l-4 2.5"
}]];
const FileVideo = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "m10 11 5 3-5 3v-6Z"
}]];
const FileVolume2 = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M8 15h.01"
}], ["path", {
  d: "M11.5 13.5a2.5 2.5 0 0 1 0 3"
}], ["path", {
  d: "M15 12a5 5 0 0 1 0 6"
}]];
const FileVolume = [["path", {
  d: "M11 11a5 5 0 0 1 0 6"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M4 6.765V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-.93-.23"
}], ["path", {
  d: "M7 10.51a.5.5 0 0 0-.826-.38l-1.893 1.628A1 1 0 0 1 3.63 12H2.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h1.129a1 1 0 0 1 .652.242l1.893 1.63a.5.5 0 0 0 .826-.38z"
}]];
const FileWarning = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M12 9v4"
}], ["path", {
  d: "M12 17h.01"
}]];
const FileX2 = [["path", {
  d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "m8 12.5-5 5"
}], ["path", {
  d: "m3 12.5 5 5"
}]];
const FileX = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "m14.5 12.5-5 5"
}], ["path", {
  d: "m9.5 12.5 5 5"
}]];
const File = [["path", {
  d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
}], ["path", {
  d: "M14 2v4a2 2 0 0 0 2 2h4"
}]];
const Files = [["path", {
  d: "M20 7h-3a2 2 0 0 1-2-2V2"
}], ["path", {
  d: "M9 18a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h7l4 4v10a2 2 0 0 1-2 2Z"
}], ["path", {
  d: "M3 7.6v12.8A1.6 1.6 0 0 0 4.6 22h9.8"
}]];
const Film = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M7 3v18"
}], ["path", {
  d: "M3 7.5h4"
}], ["path", {
  d: "M3 12h18"
}], ["path", {
  d: "M3 16.5h4"
}], ["path", {
  d: "M17 3v18"
}], ["path", {
  d: "M17 7.5h4"
}], ["path", {
  d: "M17 16.5h4"
}]];
const Fingerprint = [["path", {
  d: "M12 10a2 2 0 0 0-2 2c0 1.02-.1 2.51-.26 4"
}], ["path", {
  d: "M14 13.12c0 2.38 0 6.38-1 8.88"
}], ["path", {
  d: "M17.29 21.02c.12-.6.43-2.3.5-3.02"
}], ["path", {
  d: "M2 12a10 10 0 0 1 18-6"
}], ["path", {
  d: "M2 16h.01"
}], ["path", {
  d: "M21.8 16c.2-2 .131-5.354 0-6"
}], ["path", {
  d: "M5 19.5C5.5 18 6 15 6 12a6 6 0 0 1 .34-2"
}], ["path", {
  d: "M8.65 22c.21-.66.45-1.32.57-2"
}], ["path", {
  d: "M9 6.8a6 6 0 0 1 9 5.2v2"
}]];
const FireExtinguisher = [["path", {
  d: "M15 6.5V3a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v3.5"
}], ["path", {
  d: "M9 18h8"
}], ["path", {
  d: "M18 3h-3"
}], ["path", {
  d: "M11 3a6 6 0 0 0-6 6v11"
}], ["path", {
  d: "M5 13h4"
}], ["path", {
  d: "M17 10a4 4 0 0 0-8 0v10a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2Z"
}]];
const FishOff = [["path", {
  d: "M18 12.47v.03m0-.5v.47m-.475 5.056A6.744 6.744 0 0 1 15 18c-3.56 0-7.56-2.53-8.5-6 .348-1.28 1.114-2.433 2.121-3.38m3.444-2.088A8.802 8.802 0 0 1 15 6c3.56 0 6.06 2.54 7 6-.309 1.14-.786 2.177-1.413 3.058"
}], ["path", {
  d: "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33m7.48-4.372A9.77 9.77 0 0 1 16 6.07m0 11.86a9.77 9.77 0 0 1-1.728-3.618"
}], ["path", {
  d: "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98M8.53 3h5.27a2 2 0 0 1 1.98 1.67l.23 1.4M2 2l20 20"
}]];
const FishSymbol = [["path", {
  d: "M2 16s9-15 20-4C11 23 2 8 2 8"
}]];
const Fish = [["path", {
  d: "M6.5 12c.94-3.46 4.94-6 8.5-6 3.56 0 6.06 2.54 7 6-.94 3.47-3.44 6-7 6s-7.56-2.53-8.5-6Z"
}], ["path", {
  d: "M18 12v.5"
}], ["path", {
  d: "M16 17.93a9.77 9.77 0 0 1 0-11.86"
}], ["path", {
  d: "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33"
}], ["path", {
  d: "M10.46 7.26C10.2 5.88 9.17 4.24 8 3h5.8a2 2 0 0 1 1.98 1.67l.23 1.4"
}], ["path", {
  d: "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98"
}]];
const FlagOff = [["path", {
  d: "M8 2c3 0 5 2 8 2s4-1 4-1v11"
}], ["path", {
  d: "M4 22V4"
}], ["path", {
  d: "M4 15s1-1 4-1 5 2 8 2"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const FlagTriangleLeft = [["path", {
  d: "M17 22V2L7 7l10 5"
}]];
const FlagTriangleRight = [["path", {
  d: "M7 22V2l10 5-10 5"
}]];
const Flag = [["path", {
  d: "M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"
}], ["line", {
  x1: "4",
  x2: "4",
  y1: "22",
  y2: "15"
}]];
const FlameKindling = [["path", {
  d: "M12 2c1 3 2.5 3.5 3.5 4.5A5 5 0 0 1 17 10a5 5 0 1 1-10 0c0-.3 0-.6.1-.9a2 2 0 1 0 3.3-2C8 4.5 11 2 12 2Z"
}], ["path", {
  d: "m5 22 14-4"
}], ["path", {
  d: "m5 18 14 4"
}]];
const FlashlightOff = [["path", {
  d: "M16 16v4a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4"
}], ["path", {
  d: "M7 2h11v4c0 2-2 2-2 4v1"
}], ["line", {
  x1: "11",
  x2: "18",
  y1: "6",
  y2: "6"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Flame = [["path", {
  d: "M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"
}]];
const Flashlight = [["path", {
  d: "M18 6c0 2-2 2-2 4v10a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4V2h12z"
}], ["line", {
  x1: "6",
  x2: "18",
  y1: "6",
  y2: "6"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "12",
  y2: "12"
}]];
const FlaskConicalOff = [["path", {
  d: "M10 2v2.343"
}], ["path", {
  d: "M14 2v6.343"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M20 20a2 2 0 0 1-2 2H6a2 2 0 0 1-1.755-2.96l5.227-9.563"
}], ["path", {
  d: "M6.453 15H15"
}], ["path", {
  d: "M8.5 2h7"
}]];
const FlaskConical = [["path", {
  d: "M14 2v6a2 2 0 0 0 .245.96l5.51 10.08A2 2 0 0 1 18 22H6a2 2 0 0 1-1.755-2.96l5.51-10.08A2 2 0 0 0 10 8V2"
}], ["path", {
  d: "M6.453 15h11.094"
}], ["path", {
  d: "M8.5 2h7"
}]];
const FlaskRound = [["path", {
  d: "M10 2v6.292a7 7 0 1 0 4 0V2"
}], ["path", {
  d: "M5 15h14"
}], ["path", {
  d: "M8.5 2h7"
}]];
const FlipHorizontal2 = [["path", {
  d: "m3 7 5 5-5 5V7"
}], ["path", {
  d: "m21 7-5 5 5 5V7"
}], ["path", {
  d: "M12 20v2"
}], ["path", {
  d: "M12 14v2"
}], ["path", {
  d: "M12 8v2"
}], ["path", {
  d: "M12 2v2"
}]];
const FlipHorizontal = [["path", {
  d: "M8 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h3"
}], ["path", {
  d: "M16 3h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-3"
}], ["path", {
  d: "M12 20v2"
}], ["path", {
  d: "M12 14v2"
}], ["path", {
  d: "M12 8v2"
}], ["path", {
  d: "M12 2v2"
}]];
const FlipVertical2 = [["path", {
  d: "m17 3-5 5-5-5h10"
}], ["path", {
  d: "m17 21-5-5-5 5h10"
}], ["path", {
  d: "M4 12H2"
}], ["path", {
  d: "M10 12H8"
}], ["path", {
  d: "M16 12h-2"
}], ["path", {
  d: "M22 12h-2"
}]];
const FlipVertical = [["path", {
  d: "M21 8V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v3"
}], ["path", {
  d: "M21 16v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-3"
}], ["path", {
  d: "M4 12H2"
}], ["path", {
  d: "M10 12H8"
}], ["path", {
  d: "M16 12h-2"
}], ["path", {
  d: "M22 12h-2"
}]];
const Flower2 = [["path", {
  d: "M12 5a3 3 0 1 1 3 3m-3-3a3 3 0 1 0-3 3m3-3v1M9 8a3 3 0 1 0 3 3M9 8h1m5 0a3 3 0 1 1-3 3m3-3h-1m-2 3v-1"
}], ["circle", {
  cx: "12",
  cy: "8",
  r: "2"
}], ["path", {
  d: "M12 10v12"
}], ["path", {
  d: "M12 22c4.2 0 7-1.667 7-5-4.2 0-7 1.667-7 5Z"
}], ["path", {
  d: "M12 22c-4.2 0-7-1.667-7-5 4.2 0 7 1.667 7 5Z"
}]];
const Flower = [["circle", {
  cx: "12",
  cy: "12",
  r: "3"
}], ["path", {
  d: "M12 16.5A4.5 4.5 0 1 1 7.5 12 4.5 4.5 0 1 1 12 7.5a4.5 4.5 0 1 1 4.5 4.5 4.5 4.5 0 1 1-4.5 4.5"
}], ["path", {
  d: "M12 7.5V9"
}], ["path", {
  d: "M7.5 12H9"
}], ["path", {
  d: "M16.5 12H15"
}], ["path", {
  d: "M12 16.5V15"
}], ["path", {
  d: "m8 8 1.88 1.88"
}], ["path", {
  d: "M14.12 9.88 16 8"
}], ["path", {
  d: "m8 16 1.88-1.88"
}], ["path", {
  d: "M14.12 14.12 16 16"
}]];
const Focus = [["circle", {
  cx: "12",
  cy: "12",
  r: "3"
}], ["path", {
  d: "M3 7V5a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M17 3h2a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M21 17v2a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M7 21H5a2 2 0 0 1-2-2v-2"
}]];
const FoldHorizontal = [["path", {
  d: "M2 12h6"
}], ["path", {
  d: "M22 12h-6"
}], ["path", {
  d: "M12 2v2"
}], ["path", {
  d: "M12 8v2"
}], ["path", {
  d: "M12 14v2"
}], ["path", {
  d: "M12 20v2"
}], ["path", {
  d: "m19 9-3 3 3 3"
}], ["path", {
  d: "m5 15 3-3-3-3"
}]];
const FoldVertical = [["path", {
  d: "M12 22v-6"
}], ["path", {
  d: "M12 8V2"
}], ["path", {
  d: "M4 12H2"
}], ["path", {
  d: "M10 12H8"
}], ["path", {
  d: "M16 12h-2"
}], ["path", {
  d: "M22 12h-2"
}], ["path", {
  d: "m15 19-3-3-3 3"
}], ["path", {
  d: "m15 5-3 3-3-3"
}]];
const FolderArchive = [["circle", {
  cx: "15",
  cy: "19",
  r: "2"
}], ["path", {
  d: "M20.9 19.8A2 2 0 0 0 22 18V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2h5.1"
}], ["path", {
  d: "M15 11v-1"
}], ["path", {
  d: "M15 17v-2"
}]];
const FolderCheck = [["path", {
  d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
}], ["path", {
  d: "m9 13 2 2 4-4"
}]];
const FolderClosed = [["path", {
  d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
}], ["path", {
  d: "M2 10h20"
}]];
const FolderClock = [["circle", {
  cx: "16",
  cy: "16",
  r: "6"
}], ["path", {
  d: "M7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2"
}], ["path", {
  d: "M16 14v2l1 1"
}]];
const FolderCode = [["path", {
  d: "M10 10.5 8 13l2 2.5"
}], ["path", {
  d: "m14 10.5 2 2.5-2 2.5"
}], ["path", {
  d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2z"
}]];
const FolderCog = [["circle", {
  cx: "18",
  cy: "18",
  r: "3"
}], ["path", {
  d: "M10.3 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v3.3"
}], ["path", {
  d: "m21.7 19.4-.9-.3"
}], ["path", {
  d: "m15.2 16.9-.9-.3"
}], ["path", {
  d: "m16.6 21.7.3-.9"
}], ["path", {
  d: "m19.1 15.2.3-.9"
}], ["path", {
  d: "m19.6 21.7-.4-1"
}], ["path", {
  d: "m16.8 15.3-.4-1"
}], ["path", {
  d: "m14.3 19.6 1-.4"
}], ["path", {
  d: "m20.7 16.8 1-.4"
}]];
const FolderDot = [["path", {
  d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"
}], ["circle", {
  cx: "12",
  cy: "13",
  r: "1"
}]];
const FolderDown = [["path", {
  d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
}], ["path", {
  d: "M12 10v6"
}], ["path", {
  d: "m15 13-3 3-3-3"
}]];
const FolderGit2 = [["path", {
  d: "M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v5"
}], ["circle", {
  cx: "13",
  cy: "12",
  r: "2"
}], ["path", {
  d: "M18 19c-2.8 0-5-2.2-5-5v8"
}], ["circle", {
  cx: "20",
  cy: "19",
  r: "2"
}]];
const FolderGit = [["circle", {
  cx: "12",
  cy: "13",
  r: "2"
}], ["path", {
  d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
}], ["path", {
  d: "M14 13h3"
}], ["path", {
  d: "M7 13h3"
}]];
const FolderHeart = [["path", {
  d: "M11 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v1.5"
}], ["path", {
  d: "M13.9 17.45c-1.2-1.2-1.14-2.8-.2-3.73a2.43 2.43 0 0 1 3.44 0l.36.34.34-.34a2.43 2.43 0 0 1 3.45-.01c.95.95 1 2.53-.2 3.74L17.5 21Z"
}]];
const FolderInput = [["path", {
  d: "M2 9V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-1"
}], ["path", {
  d: "M2 13h10"
}], ["path", {
  d: "m9 16 3-3-3-3"
}]];
const FolderKanban = [["path", {
  d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"
}], ["path", {
  d: "M8 10v4"
}], ["path", {
  d: "M12 10v2"
}], ["path", {
  d: "M16 10v6"
}]];
const FolderKey = [["circle", {
  cx: "16",
  cy: "20",
  r: "2"
}], ["path", {
  d: "M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "m22 14-4.5 4.5"
}], ["path", {
  d: "m21 15 1 1"
}]];
const FolderMinus = [["path", {
  d: "M9 13h6"
}], ["path", {
  d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
}]];
const FolderLock = [["rect", {
  width: "8",
  height: "5",
  x: "14",
  y: "17",
  rx: "1"
}], ["path", {
  d: "M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2.5"
}], ["path", {
  d: "M20 17v-2a2 2 0 1 0-4 0v2"
}]];
const FolderOpenDot = [["path", {
  d: "m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2"
}], ["circle", {
  cx: "14",
  cy: "15",
  r: "1"
}]];
const FolderOpen = [["path", {
  d: "m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2"
}]];
const FolderOutput = [["path", {
  d: "M2 7.5V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-1.5"
}], ["path", {
  d: "M2 13h10"
}], ["path", {
  d: "m5 10-3 3 3 3"
}]];
const FolderPen = [["path", {
  d: "M2 11.5V5a2 2 0 0 1 2-2h3.9c.7 0 1.3.3 1.7.9l.8 1.2c.4.6 1 .9 1.7.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-9.5"
}], ["path", {
  d: "M11.378 13.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
}]];
const FolderPlus = [["path", {
  d: "M12 10v6"
}], ["path", {
  d: "M9 13h6"
}], ["path", {
  d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
}]];
const FolderRoot = [["path", {
  d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"
}], ["circle", {
  cx: "12",
  cy: "13",
  r: "2"
}], ["path", {
  d: "M12 15v5"
}]];
const FolderSearch2 = [["circle", {
  cx: "11.5",
  cy: "12.5",
  r: "2.5"
}], ["path", {
  d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
}], ["path", {
  d: "M13.3 14.3 15 16"
}]];
const FolderSearch = [["path", {
  d: "M10.7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v4.1"
}], ["path", {
  d: "m21 21-1.9-1.9"
}], ["circle", {
  cx: "17",
  cy: "17",
  r: "3"
}]];
const FolderSymlink = [["path", {
  d: "M2 9V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h7"
}], ["path", {
  d: "m8 16 3-3-3-3"
}]];
const FolderSync = [["path", {
  d: "M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v.5"
}], ["path", {
  d: "M12 10v4h4"
}], ["path", {
  d: "m12 14 1.535-1.605a5 5 0 0 1 8 1.5"
}], ["path", {
  d: "M22 22v-4h-4"
}], ["path", {
  d: "m22 18-1.535 1.605a5 5 0 0 1-8-1.5"
}]];
const FolderTree = [["path", {
  d: "M20 10a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2.5a1 1 0 0 1-.8-.4l-.9-1.2A1 1 0 0 0 15 3h-2a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z"
}], ["path", {
  d: "M20 21a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-2.9a1 1 0 0 1-.88-.55l-.42-.85a1 1 0 0 0-.92-.6H13a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z"
}], ["path", {
  d: "M3 5a2 2 0 0 0 2 2h3"
}], ["path", {
  d: "M3 3v13a2 2 0 0 0 2 2h3"
}]];
const FolderUp = [["path", {
  d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
}], ["path", {
  d: "M12 10v6"
}], ["path", {
  d: "m9 13 3-3 3 3"
}]];
const FolderX = [["path", {
  d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
}], ["path", {
  d: "m9.5 10.5 5 5"
}], ["path", {
  d: "m14.5 10.5-5 5"
}]];
const Folders = [["path", {
  d: "M20 17a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3.9a2 2 0 0 1-1.69-.9l-.81-1.2a2 2 0 0 0-1.67-.9H8a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2Z"
}], ["path", {
  d: "M2 8v11a2 2 0 0 0 2 2h14"
}]];
const Folder = [["path", {
  d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
}]];
const Footprints = [["path", {
  d: "M4 16v-2.38C4 11.5 2.97 10.5 3 8c.03-2.72 1.49-6 4.5-6C9.37 2 10 3.8 10 5.5c0 3.11-2 5.66-2 8.68V16a2 2 0 1 1-4 0Z"
}], ["path", {
  d: "M20 20v-2.38c0-2.12 1.03-3.12 1-5.62-.03-2.72-1.49-6-4.5-6C14.63 6 14 7.8 14 9.5c0 3.11 2 5.66 2 8.68V20a2 2 0 1 0 4 0Z"
}], ["path", {
  d: "M16 17h4"
}], ["path", {
  d: "M4 13h4"
}]];
const Forklift = [["path", {
  d: "M12 12H5a2 2 0 0 0-2 2v5"
}], ["circle", {
  cx: "13",
  cy: "19",
  r: "2"
}], ["circle", {
  cx: "5",
  cy: "19",
  r: "2"
}], ["path", {
  d: "M8 19h3m5-17v17h6M6 12V7c0-1.1.9-2 2-2h3l5 5"
}]];
const Forward = [["polyline", {
  points: "15 17 20 12 15 7"
}], ["path", {
  d: "M4 18v-2a4 4 0 0 1 4-4h12"
}]];
const Frame = [["line", {
  x1: "22",
  x2: "2",
  y1: "6",
  y2: "6"
}], ["line", {
  x1: "22",
  x2: "2",
  y1: "18",
  y2: "18"
}], ["line", {
  x1: "6",
  x2: "6",
  y1: "2",
  y2: "22"
}], ["line", {
  x1: "18",
  x2: "18",
  y1: "2",
  y2: "22"
}]];
const Framer = [["path", {
  d: "M5 16V9h14V2H5l14 14h-7m-7 0 7 7v-7m-7 0h7"
}]];
const Frown = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M16 16s-1.5-2-4-2-4 2-4 2"
}], ["line", {
  x1: "9",
  x2: "9.01",
  y1: "9",
  y2: "9"
}], ["line", {
  x1: "15",
  x2: "15.01",
  y1: "9",
  y2: "9"
}]];
const Fullscreen = [["path", {
  d: "M3 7V5a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M17 3h2a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M21 17v2a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M7 21H5a2 2 0 0 1-2-2v-2"
}], ["rect", {
  width: "10",
  height: "8",
  x: "7",
  y: "8",
  rx: "1"
}]];
const Fuel = [["line", {
  x1: "3",
  x2: "15",
  y1: "22",
  y2: "22"
}], ["line", {
  x1: "4",
  x2: "14",
  y1: "9",
  y2: "9"
}], ["path", {
  d: "M14 22V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v18"
}], ["path", {
  d: "M14 13h2a2 2 0 0 1 2 2v2a2 2 0 0 0 2 2a2 2 0 0 0 2-2V9.83a2 2 0 0 0-.59-1.42L18 5"
}]];
const FunnelPlus = [["path", {
  d: "M13.354 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14v6a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341l1.218-1.348"
}], ["path", {
  d: "M16 6h6"
}], ["path", {
  d: "M19 3v6"
}]];
const Funnel = [["path", {
  d: "M10 20a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341L21.74 4.67A1 1 0 0 0 21 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14z"
}]];
const FunnelX = [["path", {
  d: "M12.531 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14v6a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341l.427-.473"
}], ["path", {
  d: "m16.5 3.5 5 5"
}], ["path", {
  d: "m21.5 3.5-5 5"
}]];
const GalleryHorizontalEnd = [["path", {
  d: "M2 7v10"
}], ["path", {
  d: "M6 5v14"
}], ["rect", {
  width: "12",
  height: "18",
  x: "10",
  y: "3",
  rx: "2"
}]];
const GalleryHorizontal = [["path", {
  d: "M2 3v18"
}], ["rect", {
  width: "12",
  height: "18",
  x: "6",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M22 3v18"
}]];
const GalleryThumbnails = [["rect", {
  width: "18",
  height: "14",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M4 21h1"
}], ["path", {
  d: "M9 21h1"
}], ["path", {
  d: "M14 21h1"
}], ["path", {
  d: "M19 21h1"
}]];
const GalleryVerticalEnd = [["path", {
  d: "M7 2h10"
}], ["path", {
  d: "M5 6h14"
}], ["rect", {
  width: "18",
  height: "12",
  x: "3",
  y: "10",
  rx: "2"
}]];
const GalleryVertical = [["path", {
  d: "M3 2h18"
}], ["rect", {
  width: "18",
  height: "12",
  x: "3",
  y: "6",
  rx: "2"
}], ["path", {
  d: "M3 22h18"
}]];
const Gamepad2 = [["line", {
  x1: "6",
  x2: "10",
  y1: "11",
  y2: "11"
}], ["line", {
  x1: "8",
  x2: "8",
  y1: "9",
  y2: "13"
}], ["line", {
  x1: "15",
  x2: "15.01",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "18",
  x2: "18.01",
  y1: "10",
  y2: "10"
}], ["path", {
  d: "M17.32 5H6.68a4 4 0 0 0-3.978 3.59c-.006.052-.01.101-.017.152C2.604 9.416 2 14.456 2 16a3 3 0 0 0 3 3c1 0 1.5-.5 2-1l1.414-1.414A2 2 0 0 1 9.828 16h4.344a2 2 0 0 1 1.414.586L17 18c.5.5 1 1 2 1a3 3 0 0 0 3-3c0-1.545-.604-6.584-.685-7.258-.007-.05-.011-.1-.017-.151A4 4 0 0 0 17.32 5z"
}]];
const Gamepad = [["line", {
  x1: "6",
  x2: "10",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "8",
  x2: "8",
  y1: "10",
  y2: "14"
}], ["line", {
  x1: "15",
  x2: "15.01",
  y1: "13",
  y2: "13"
}], ["line", {
  x1: "18",
  x2: "18.01",
  y1: "11",
  y2: "11"
}], ["rect", {
  width: "20",
  height: "12",
  x: "2",
  y: "6",
  rx: "2"
}]];
const Gauge = [["path", {
  d: "m12 14 4-4"
}], ["path", {
  d: "M3.34 19a10 10 0 1 1 17.32 0"
}]];
const Gavel = [["path", {
  d: "m14.5 12.5-8 8a2.119 2.119 0 1 1-3-3l8-8"
}], ["path", {
  d: "m16 16 6-6"
}], ["path", {
  d: "m8 8 6-6"
}], ["path", {
  d: "m9 7 8 8"
}], ["path", {
  d: "m21 11-8-8"
}]];
const Gem = [["path", {
  d: "M6 3h12l4 6-10 13L2 9Z"
}], ["path", {
  d: "M11 3 8 9l4 13 4-13-3-6"
}], ["path", {
  d: "M2 9h20"
}]];
const Ghost = [["path", {
  d: "M9 10h.01"
}], ["path", {
  d: "M15 10h.01"
}], ["path", {
  d: "M12 2a8 8 0 0 0-8 8v12l3-3 2.5 2.5L12 19l2.5 2.5L17 19l3 3V10a8 8 0 0 0-8-8z"
}]];
const Gift = [["rect", {
  x: "3",
  y: "8",
  width: "18",
  height: "4",
  rx: "1"
}], ["path", {
  d: "M12 8v13"
}], ["path", {
  d: "M19 12v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-7"
}], ["path", {
  d: "M7.5 8a2.5 2.5 0 0 1 0-5A4.8 8 0 0 1 12 8a4.8 8 0 0 1 4.5-5 2.5 2.5 0 0 1 0 5"
}]];
const GitBranchPlus = [["path", {
  d: "M6 3v12"
}], ["path", {
  d: "M18 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"
}], ["path", {
  d: "M6 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"
}], ["path", {
  d: "M15 6a9 9 0 0 0-9 9"
}], ["path", {
  d: "M18 15v6"
}], ["path", {
  d: "M21 18h-6"
}]];
const GitBranch = [["line", {
  x1: "6",
  x2: "6",
  y1: "3",
  y2: "15"
}], ["circle", {
  cx: "18",
  cy: "6",
  r: "3"
}], ["circle", {
  cx: "6",
  cy: "18",
  r: "3"
}], ["path", {
  d: "M18 9a9 9 0 0 1-9 9"
}]];
const GitCommitHorizontal = [["circle", {
  cx: "12",
  cy: "12",
  r: "3"
}], ["line", {
  x1: "3",
  x2: "9",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "15",
  x2: "21",
  y1: "12",
  y2: "12"
}]];
const GitCommitVertical = [["path", {
  d: "M12 3v6"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "3"
}], ["path", {
  d: "M12 15v6"
}]];
const GitCompareArrows = [["circle", {
  cx: "5",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M12 6h5a2 2 0 0 1 2 2v7"
}], ["path", {
  d: "m15 9-3-3 3-3"
}], ["circle", {
  cx: "19",
  cy: "18",
  r: "3"
}], ["path", {
  d: "M12 18H7a2 2 0 0 1-2-2V9"
}], ["path", {
  d: "m9 15 3 3-3 3"
}]];
const GitFork = [["circle", {
  cx: "12",
  cy: "18",
  r: "3"
}], ["circle", {
  cx: "6",
  cy: "6",
  r: "3"
}], ["circle", {
  cx: "18",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M18 9v2c0 .6-.4 1-1 1H7c-.6 0-1-.4-1-1V9"
}], ["path", {
  d: "M12 12v3"
}]];
const GitCompare = [["circle", {
  cx: "18",
  cy: "18",
  r: "3"
}], ["circle", {
  cx: "6",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M13 6h3a2 2 0 0 1 2 2v7"
}], ["path", {
  d: "M11 18H8a2 2 0 0 1-2-2V9"
}]];
const GitGraph = [["circle", {
  cx: "5",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M5 9v6"
}], ["circle", {
  cx: "5",
  cy: "18",
  r: "3"
}], ["path", {
  d: "M12 3v18"
}], ["circle", {
  cx: "19",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M16 15.7A9 9 0 0 0 19 9"
}]];
const GitMerge = [["circle", {
  cx: "18",
  cy: "18",
  r: "3"
}], ["circle", {
  cx: "6",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M6 21V9a9 9 0 0 0 9 9"
}]];
const GitPullRequestArrow = [["circle", {
  cx: "5",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M5 9v12"
}], ["circle", {
  cx: "19",
  cy: "18",
  r: "3"
}], ["path", {
  d: "m15 9-3-3 3-3"
}], ["path", {
  d: "M12 6h5a2 2 0 0 1 2 2v7"
}]];
const GitPullRequestClosed = [["circle", {
  cx: "6",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M6 9v12"
}], ["path", {
  d: "m21 3-6 6"
}], ["path", {
  d: "m21 9-6-6"
}], ["path", {
  d: "M18 11.5V15"
}], ["circle", {
  cx: "18",
  cy: "18",
  r: "3"
}]];
const GitPullRequestCreateArrow = [["circle", {
  cx: "5",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M5 9v12"
}], ["path", {
  d: "m15 9-3-3 3-3"
}], ["path", {
  d: "M12 6h5a2 2 0 0 1 2 2v3"
}], ["path", {
  d: "M19 15v6"
}], ["path", {
  d: "M22 18h-6"
}]];
const GitPullRequestCreate = [["circle", {
  cx: "6",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M6 9v12"
}], ["path", {
  d: "M13 6h3a2 2 0 0 1 2 2v3"
}], ["path", {
  d: "M18 15v6"
}], ["path", {
  d: "M21 18h-6"
}]];
const GitPullRequest = [["circle", {
  cx: "18",
  cy: "18",
  r: "3"
}], ["circle", {
  cx: "6",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M13 6h3a2 2 0 0 1 2 2v7"
}], ["line", {
  x1: "6",
  x2: "6",
  y1: "9",
  y2: "21"
}]];
const GitPullRequestDraft = [["circle", {
  cx: "18",
  cy: "18",
  r: "3"
}], ["circle", {
  cx: "6",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M18 6V5"
}], ["path", {
  d: "M18 11v-1"
}], ["line", {
  x1: "6",
  x2: "6",
  y1: "9",
  y2: "21"
}]];
const Github = [["path", {
  d: "M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"
}], ["path", {
  d: "M9 18c-4.51 2-5-2-7-2"
}]];
const Gitlab = [["path", {
  d: "m22 13.29-3.33-10a.42.42 0 0 0-.14-.18.38.38 0 0 0-.22-.11.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18l-2.26 6.67H8.32L6.1 3.26a.42.42 0 0 0-.1-.18.38.38 0 0 0-.26-.08.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18L2 13.29a.74.74 0 0 0 .27.83L12 21l9.69-6.88a.71.71 0 0 0 .31-.83Z"
}]];
const GlassWater = [["path", {
  d: "M5.116 4.104A1 1 0 0 1 6.11 3h11.78a1 1 0 0 1 .994 1.105L17.19 20.21A2 2 0 0 1 15.2 22H8.8a2 2 0 0 1-2-1.79z"
}], ["path", {
  d: "M6 12a5 5 0 0 1 6 0 5 5 0 0 0 6 0"
}]];
const Glasses = [["circle", {
  cx: "6",
  cy: "15",
  r: "4"
}], ["circle", {
  cx: "18",
  cy: "15",
  r: "4"
}], ["path", {
  d: "M14 15a2 2 0 0 0-2-2 2 2 0 0 0-2 2"
}], ["path", {
  d: "M2.5 13 5 7c.7-1.3 1.4-2 3-2"
}], ["path", {
  d: "M21.5 13 19 7c-.7-1.3-1.5-2-3-2"
}]];
const GlobeLock = [["path", {
  d: "M15.686 15A14.5 14.5 0 0 1 12 22a14.5 14.5 0 0 1 0-20 10 10 0 1 0 9.542 13"
}], ["path", {
  d: "M2 12h8.5"
}], ["path", {
  d: "M20 6V4a2 2 0 1 0-4 0v2"
}], ["rect", {
  width: "8",
  height: "5",
  x: "14",
  y: "6",
  rx: "1"
}]];
const Globe = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20"
}], ["path", {
  d: "M2 12h20"
}]];
const Goal = [["path", {
  d: "M12 13V2l8 4-8 4"
}], ["path", {
  d: "M20.561 10.222a9 9 0 1 1-12.55-5.29"
}], ["path", {
  d: "M8.002 9.997a5 5 0 1 0 8.9 2.02"
}]];
const Grab = [["path", {
  d: "M18 11.5V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1.4"
}], ["path", {
  d: "M14 10V8a2 2 0 0 0-2-2a2 2 0 0 0-2 2v2"
}], ["path", {
  d: "M10 9.9V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v5"
}], ["path", {
  d: "M6 14a2 2 0 0 0-2-2a2 2 0 0 0-2 2"
}], ["path", {
  d: "M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-4a8 8 0 0 1-8-8 2 2 0 1 1 4 0"
}]];
const Grape = [["path", {
  d: "M22 5V2l-5.89 5.89"
}], ["circle", {
  cx: "16.6",
  cy: "15.89",
  r: "3"
}], ["circle", {
  cx: "8.11",
  cy: "7.4",
  r: "3"
}], ["circle", {
  cx: "12.35",
  cy: "11.65",
  r: "3"
}], ["circle", {
  cx: "13.91",
  cy: "5.85",
  r: "3"
}], ["circle", {
  cx: "18.15",
  cy: "10.09",
  r: "3"
}], ["circle", {
  cx: "6.56",
  cy: "13.2",
  r: "3"
}], ["circle", {
  cx: "10.8",
  cy: "17.44",
  r: "3"
}], ["circle", {
  cx: "5",
  cy: "19",
  r: "3"
}]];
const GraduationCap = [["path", {
  d: "M21.42 10.922a1 1 0 0 0-.019-1.838L12.83 5.18a2 2 0 0 0-1.66 0L2.6 9.08a1 1 0 0 0 0 1.832l8.57 3.908a2 2 0 0 0 1.66 0z"
}], ["path", {
  d: "M22 10v6"
}], ["path", {
  d: "M6 12.5V16a6 3 0 0 0 12 0v-3.5"
}]];
const Grid2x2Check = [["path", {
  d: "M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3"
}], ["path", {
  d: "m16 19 2 2 4-4"
}]];
const Grid2x2Plus = [["path", {
  d: "M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3"
}], ["path", {
  d: "M16 19h6"
}], ["path", {
  d: "M19 22v-6"
}]];
const Grid2x2X = [["path", {
  d: "M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3"
}], ["path", {
  d: "m16 16 5 5"
}], ["path", {
  d: "m16 21 5-5"
}]];
const Grid2x2 = [["path", {
  d: "M12 3v18"
}], ["path", {
  d: "M3 12h18"
}], ["rect", {
  x: "3",
  y: "3",
  width: "18",
  height: "18",
  rx: "2"
}]];
const Grid3x3 = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M3 9h18"
}], ["path", {
  d: "M3 15h18"
}], ["path", {
  d: "M9 3v18"
}], ["path", {
  d: "M15 3v18"
}]];
const GripHorizontal = [["circle", {
  cx: "12",
  cy: "9",
  r: "1"
}], ["circle", {
  cx: "19",
  cy: "9",
  r: "1"
}], ["circle", {
  cx: "5",
  cy: "9",
  r: "1"
}], ["circle", {
  cx: "12",
  cy: "15",
  r: "1"
}], ["circle", {
  cx: "19",
  cy: "15",
  r: "1"
}], ["circle", {
  cx: "5",
  cy: "15",
  r: "1"
}]];
const GripVertical = [["circle", {
  cx: "9",
  cy: "12",
  r: "1"
}], ["circle", {
  cx: "9",
  cy: "5",
  r: "1"
}], ["circle", {
  cx: "9",
  cy: "19",
  r: "1"
}], ["circle", {
  cx: "15",
  cy: "12",
  r: "1"
}], ["circle", {
  cx: "15",
  cy: "5",
  r: "1"
}], ["circle", {
  cx: "15",
  cy: "19",
  r: "1"
}]];
const Grip = [["circle", {
  cx: "12",
  cy: "5",
  r: "1"
}], ["circle", {
  cx: "19",
  cy: "5",
  r: "1"
}], ["circle", {
  cx: "5",
  cy: "5",
  r: "1"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "1"
}], ["circle", {
  cx: "19",
  cy: "12",
  r: "1"
}], ["circle", {
  cx: "5",
  cy: "12",
  r: "1"
}], ["circle", {
  cx: "12",
  cy: "19",
  r: "1"
}], ["circle", {
  cx: "19",
  cy: "19",
  r: "1"
}], ["circle", {
  cx: "5",
  cy: "19",
  r: "1"
}]];
const Group = [["path", {
  d: "M3 7V5c0-1.1.9-2 2-2h2"
}], ["path", {
  d: "M17 3h2c1.1 0 2 .9 2 2v2"
}], ["path", {
  d: "M21 17v2c0 1.1-.9 2-2 2h-2"
}], ["path", {
  d: "M7 21H5c-1.1 0-2-.9-2-2v-2"
}], ["rect", {
  width: "7",
  height: "5",
  x: "7",
  y: "7",
  rx: "1"
}], ["rect", {
  width: "7",
  height: "5",
  x: "10",
  y: "12",
  rx: "1"
}]];
const Guitar = [["path", {
  d: "m11.9 12.1 4.514-4.514"
}], ["path", {
  d: "M20.1 2.3a1 1 0 0 0-1.4 0l-1.114 1.114A2 2 0 0 0 17 4.828v1.344a2 2 0 0 1-.586 1.414A2 2 0 0 1 17.828 7h1.344a2 2 0 0 0 1.414-.586L21.7 5.3a1 1 0 0 0 0-1.4z"
}], ["path", {
  d: "m6 16 2 2"
}], ["path", {
  d: "M8.2 9.9C8.7 8.8 9.8 8 11 8c2.8 0 5 2.2 5 5 0 1.2-.8 2.3-1.9 2.8l-.9.4A2 2 0 0 0 12 18a4 4 0 0 1-4 4c-3.3 0-6-2.7-6-6a4 4 0 0 1 4-4 2 2 0 0 0 1.8-1.2z"
}], ["circle", {
  cx: "11.5",
  cy: "12.5",
  r: ".5",
  fill: "currentColor"
}]];
const Ham = [["path", {
  d: "M13.144 21.144A7.274 10.445 45 1 0 2.856 10.856"
}], ["path", {
  d: "M13.144 21.144A7.274 4.365 45 0 0 2.856 10.856a7.274 4.365 45 0 0 10.288 10.288"
}], ["path", {
  d: "M16.565 10.435 18.6 8.4a2.501 2.501 0 1 0 1.65-4.65 2.5 2.5 0 1 0-4.66 1.66l-2.024 2.025"
}], ["path", {
  d: "m8.5 16.5-1-1"
}]];
const Hammer = [["path", {
  d: "m15 12-8.373 8.373a1 1 0 1 1-3-3L12 9"
}], ["path", {
  d: "m18 15 4-4"
}], ["path", {
  d: "m21.5 11.5-1.914-1.914A2 2 0 0 1 19 8.172V7l-2.26-2.26a6 6 0 0 0-4.202-1.756L9 2.96l.92.82A6.18 6.18 0 0 1 12 8.4V10l2 2h1.172a2 2 0 0 1 1.414.586L18.5 14.5"
}]];
const HandCoins = [["path", {
  d: "M11 15h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 17"
}], ["path", {
  d: "m7 21 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9"
}], ["path", {
  d: "m2 16 6 6"
}], ["circle", {
  cx: "16",
  cy: "9",
  r: "2.9"
}], ["circle", {
  cx: "6",
  cy: "5",
  r: "3"
}]];
const HandHeart = [["path", {
  d: "M11 14h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 16"
}], ["path", {
  d: "m7 20 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9"
}], ["path", {
  d: "m2 15 6 6"
}], ["path", {
  d: "M19.5 8.5c.7-.7 1.5-1.6 1.5-2.7A2.73 2.73 0 0 0 16 4a2.78 2.78 0 0 0-5 1.8c0 1.2.8 2 1.5 2.8L16 12Z"
}]];
const HandMetal = [["path", {
  d: "M18 12.5V10a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1.4"
}], ["path", {
  d: "M14 11V9a2 2 0 1 0-4 0v2"
}], ["path", {
  d: "M10 10.5V5a2 2 0 1 0-4 0v9"
}], ["path", {
  d: "m7 15-1.76-1.76a2 2 0 0 0-2.83 2.82l3.6 3.6C7.5 21.14 9.2 22 12 22h2a8 8 0 0 0 8-8V7a2 2 0 1 0-4 0v5"
}]];
const HandHelping = [["path", {
  d: "M11 12h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 14"
}], ["path", {
  d: "m7 18 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9"
}], ["path", {
  d: "m2 13 6 6"
}]];
const HandPlatter = [["path", {
  d: "M12 3V2"
}], ["path", {
  d: "m15.4 17.4 3.2-2.8a2 2 0 1 1 2.8 2.9l-3.6 3.3c-.7.8-1.7 1.2-2.8 1.2h-4c-1.1 0-2.1-.4-2.8-1.2l-1.302-1.464A1 1 0 0 0 6.151 19H5"
}], ["path", {
  d: "M2 14h12a2 2 0 0 1 0 4h-2"
}], ["path", {
  d: "M4 10h16"
}], ["path", {
  d: "M5 10a7 7 0 0 1 14 0"
}], ["path", {
  d: "M5 14v6a1 1 0 0 1-1 1H2"
}]];
const Hand = [["path", {
  d: "M18 11V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2"
}], ["path", {
  d: "M14 10V4a2 2 0 0 0-2-2a2 2 0 0 0-2 2v2"
}], ["path", {
  d: "M10 10.5V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2v8"
}], ["path", {
  d: "M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15"
}]];
const HardDriveDownload = [["path", {
  d: "M12 2v8"
}], ["path", {
  d: "m16 6-4 4-4-4"
}], ["rect", {
  width: "20",
  height: "8",
  x: "2",
  y: "14",
  rx: "2"
}], ["path", {
  d: "M6 18h.01"
}], ["path", {
  d: "M10 18h.01"
}]];
const Handshake = [["path", {
  d: "m11 17 2 2a1 1 0 1 0 3-3"
}], ["path", {
  d: "m14 14 2.5 2.5a1 1 0 1 0 3-3l-3.88-3.88a3 3 0 0 0-4.24 0l-.88.88a1 1 0 1 1-3-3l2.81-2.81a5.79 5.79 0 0 1 7.06-.87l.47.28a2 2 0 0 0 1.42.25L21 4"
}], ["path", {
  d: "m21 3 1 11h-2"
}], ["path", {
  d: "M3 3 2 14l6.5 6.5a1 1 0 1 0 3-3"
}], ["path", {
  d: "M3 4h8"
}]];
const HardDriveUpload = [["path", {
  d: "m16 6-4-4-4 4"
}], ["path", {
  d: "M12 2v8"
}], ["rect", {
  width: "20",
  height: "8",
  x: "2",
  y: "14",
  rx: "2"
}], ["path", {
  d: "M6 18h.01"
}], ["path", {
  d: "M10 18h.01"
}]];
const HardDrive = [["line", {
  x1: "22",
  x2: "2",
  y1: "12",
  y2: "12"
}], ["path", {
  d: "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"
}], ["line", {
  x1: "6",
  x2: "6.01",
  y1: "16",
  y2: "16"
}], ["line", {
  x1: "10",
  x2: "10.01",
  y1: "16",
  y2: "16"
}]];
const HardHat = [["path", {
  d: "M10 10V5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v5"
}], ["path", {
  d: "M14 6a6 6 0 0 1 6 6v3"
}], ["path", {
  d: "M4 15v-3a6 6 0 0 1 6-6"
}], ["rect", {
  x: "2",
  y: "15",
  width: "20",
  height: "4",
  rx: "1"
}]];
const Hash = [["line", {
  x1: "4",
  x2: "20",
  y1: "9",
  y2: "9"
}], ["line", {
  x1: "4",
  x2: "20",
  y1: "15",
  y2: "15"
}], ["line", {
  x1: "10",
  x2: "8",
  y1: "3",
  y2: "21"
}], ["line", {
  x1: "16",
  x2: "14",
  y1: "3",
  y2: "21"
}]];
const Haze = [["path", {
  d: "m5.2 6.2 1.4 1.4"
}], ["path", {
  d: "M2 13h2"
}], ["path", {
  d: "M20 13h2"
}], ["path", {
  d: "m17.4 7.6 1.4-1.4"
}], ["path", {
  d: "M22 17H2"
}], ["path", {
  d: "M22 21H2"
}], ["path", {
  d: "M16 13a4 4 0 0 0-8 0"
}], ["path", {
  d: "M12 5V2.5"
}]];
const HdmiPort = [["path", {
  d: "M22 9a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h1l2 2h12l2-2h1a1 1 0 0 0 1-1Z"
}], ["path", {
  d: "M7.5 12h9"
}]];
const Heading1 = [["path", {
  d: "M4 12h8"
}], ["path", {
  d: "M4 18V6"
}], ["path", {
  d: "M12 18V6"
}], ["path", {
  d: "m17 12 3-2v8"
}]];
const Heading2 = [["path", {
  d: "M4 12h8"
}], ["path", {
  d: "M4 18V6"
}], ["path", {
  d: "M12 18V6"
}], ["path", {
  d: "M21 18h-4c0-4 4-3 4-6 0-1.5-2-2.5-4-1"
}]];
const Heading3 = [["path", {
  d: "M4 12h8"
}], ["path", {
  d: "M4 18V6"
}], ["path", {
  d: "M12 18V6"
}], ["path", {
  d: "M17.5 10.5c1.7-1 3.5 0 3.5 1.5a2 2 0 0 1-2 2"
}], ["path", {
  d: "M17 17.5c2 1.5 4 .3 4-1.5a2 2 0 0 0-2-2"
}]];
const Heading4 = [["path", {
  d: "M12 18V6"
}], ["path", {
  d: "M17 10v3a1 1 0 0 0 1 1h3"
}], ["path", {
  d: "M21 10v8"
}], ["path", {
  d: "M4 12h8"
}], ["path", {
  d: "M4 18V6"
}]];
const Heading5 = [["path", {
  d: "M4 12h8"
}], ["path", {
  d: "M4 18V6"
}], ["path", {
  d: "M12 18V6"
}], ["path", {
  d: "M17 13v-3h4"
}], ["path", {
  d: "M17 17.7c.4.2.8.3 1.3.3 1.5 0 2.7-1.1 2.7-2.5S19.8 13 18.3 13H17"
}]];
const Heading6 = [["path", {
  d: "M4 12h8"
}], ["path", {
  d: "M4 18V6"
}], ["path", {
  d: "M12 18V6"
}], ["circle", {
  cx: "19",
  cy: "16",
  r: "2"
}], ["path", {
  d: "M20 10c-2 2-3 3.5-3 6"
}]];
const Heading = [["path", {
  d: "M6 12h12"
}], ["path", {
  d: "M6 20V4"
}], ["path", {
  d: "M18 20V4"
}]];
const HeadphoneOff = [["path", {
  d: "M21 14h-1.343"
}], ["path", {
  d: "M9.128 3.47A9 9 0 0 1 21 12v3.343"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M20.414 20.414A2 2 0 0 1 19 21h-1a2 2 0 0 1-2-2v-3"
}], ["path", {
  d: "M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 2.636-6.364"
}]];
const Headphones = [["path", {
  d: "M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 18 0v7a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3"
}]];
const Headset = [["path", {
  d: "M3 11h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5Zm0 0a9 9 0 1 1 18 0m0 0v5a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3Z"
}], ["path", {
  d: "M21 16v2a4 4 0 0 1-4 4h-5"
}]];
const HeartCrack = [["path", {
  d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"
}], ["path", {
  d: "m12 13-1-1 2-2-3-3 2-2"
}]];
const HeartHandshake = [["path", {
  d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"
}], ["path", {
  d: "M12 5 9.04 7.96a2.17 2.17 0 0 0 0 3.08c.82.82 2.13.85 3 .07l2.07-1.9a2.82 2.82 0 0 1 3.79 0l2.96 2.66"
}], ["path", {
  d: "m18 15-2-2"
}], ["path", {
  d: "m15 18-2-2"
}]];
const HeartOff = [["line", {
  x1: "2",
  y1: "2",
  x2: "22",
  y2: "22"
}], ["path", {
  d: "M16.5 16.5 12 21l-7-7c-1.5-1.45-3-3.2-3-5.5a5.5 5.5 0 0 1 2.14-4.35"
}], ["path", {
  d: "M8.76 3.1c1.15.22 2.13.78 3.24 1.9 1.5-1.5 2.74-2 4.5-2A5.5 5.5 0 0 1 22 8.5c0 2.12-1.3 3.78-2.67 5.17"
}]];
const HeartPulse = [["path", {
  d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"
}], ["path", {
  d: "M3.22 12H9.5l.5-1 2 4.5 2-7 1.5 3.5h5.27"
}]];
const Heart = [["path", {
  d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"
}]];
const Heater = [["path", {
  d: "M11 8c2-3-2-3 0-6"
}], ["path", {
  d: "M15.5 8c2-3-2-3 0-6"
}], ["path", {
  d: "M6 10h.01"
}], ["path", {
  d: "M6 14h.01"
}], ["path", {
  d: "M10 16v-4"
}], ["path", {
  d: "M14 16v-4"
}], ["path", {
  d: "M18 16v-4"
}], ["path", {
  d: "M20 6a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3"
}], ["path", {
  d: "M5 20v2"
}], ["path", {
  d: "M19 20v2"
}]];
const Hexagon = [["path", {
  d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"
}]];
const Highlighter = [["path", {
  d: "m9 11-6 6v3h9l3-3"
}], ["path", {
  d: "m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4"
}]];
const History = [["path", {
  d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"
}], ["path", {
  d: "M3 3v5h5"
}], ["path", {
  d: "M12 7v5l4 2"
}]];
const HopOff = [["path", {
  d: "M10.82 16.12c1.69.6 3.91.79 5.18.85.28.01.53-.09.7-.27"
}], ["path", {
  d: "M11.14 20.57c.52.24 2.44 1.12 4.08 1.37.46.06.86-.25.9-.71.12-1.52-.3-3.43-.5-4.28"
}], ["path", {
  d: "M16.13 21.05c1.65.63 3.68.84 4.87.91a.9.9 0 0 0 .7-.26"
}], ["path", {
  d: "M17.99 5.52a20.83 20.83 0 0 1 3.15 4.5.8.8 0 0 1-.68 1.13c-1.17.1-2.5.02-3.9-.25"
}], ["path", {
  d: "M20.57 11.14c.24.52 1.12 2.44 1.37 4.08.04.3-.08.59-.31.75"
}], ["path", {
  d: "M4.93 4.93a10 10 0 0 0-.67 13.4c.35.43.96.4 1.17-.12.69-1.71 1.07-5.07 1.07-6.71 1.34.45 3.1.9 4.88.62a.85.85 0 0 0 .48-.24"
}], ["path", {
  d: "M5.52 17.99c1.05.95 2.91 2.42 4.5 3.15a.8.8 0 0 0 1.13-.68c.2-2.34-.33-5.3-1.57-8.28"
}], ["path", {
  d: "M8.35 2.68a10 10 0 0 1 9.98 1.58c.43.35.4.96-.12 1.17-1.5.6-4.3.98-6.07 1.05"
}], ["path", {
  d: "m2 2 20 20"
}]];
const Hop = [["path", {
  d: "M10.82 16.12c1.69.6 3.91.79 5.18.85.55.03 1-.42.97-.97-.06-1.27-.26-3.5-.85-5.18"
}], ["path", {
  d: "M11.5 6.5c1.64 0 5-.38 6.71-1.07.52-.2.55-.82.12-1.17A10 10 0 0 0 4.26 18.33c.35.43.96.4 1.17-.12.69-1.71 1.07-5.07 1.07-6.71 1.34.45 3.1.9 4.88.62a.88.88 0 0 0 .73-.74c.3-2.14-.15-3.5-.61-4.88"
}], ["path", {
  d: "M15.62 16.95c.2.85.62 2.76.5 4.28a.77.77 0 0 1-.9.7 16.64 16.64 0 0 1-4.08-1.36"
}], ["path", {
  d: "M16.13 21.05c1.65.63 3.68.84 4.87.91a.9.9 0 0 0 .96-.96 17.68 17.68 0 0 0-.9-4.87"
}], ["path", {
  d: "M16.94 15.62c.86.2 2.77.62 4.29.5a.77.77 0 0 0 .7-.9 16.64 16.64 0 0 0-1.36-4.08"
}], ["path", {
  d: "M17.99 5.52a20.82 20.82 0 0 1 3.15 4.5.8.8 0 0 1-.68 1.13c-2.33.2-5.3-.32-8.27-1.57"
}], ["path", {
  d: "M4.93 4.93 3 3a.7.7 0 0 1 0-1"
}], ["path", {
  d: "M9.58 12.18c1.24 2.98 1.77 5.95 1.57 8.28a.8.8 0 0 1-1.13.68 20.82 20.82 0 0 1-4.5-3.15"
}]];
const Hospital = [["path", {
  d: "M12 6v4"
}], ["path", {
  d: "M14 14h-4"
}], ["path", {
  d: "M14 18h-4"
}], ["path", {
  d: "M14 8h-4"
}], ["path", {
  d: "M18 12h2a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-9a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M18 22V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v18"
}]];
const Hotel = [["path", {
  d: "M10 22v-6.57"
}], ["path", {
  d: "M12 11h.01"
}], ["path", {
  d: "M12 7h.01"
}], ["path", {
  d: "M14 15.43V22"
}], ["path", {
  d: "M15 16a5 5 0 0 0-6 0"
}], ["path", {
  d: "M16 11h.01"
}], ["path", {
  d: "M16 7h.01"
}], ["path", {
  d: "M8 11h.01"
}], ["path", {
  d: "M8 7h.01"
}], ["rect", {
  x: "4",
  y: "2",
  width: "16",
  height: "20",
  rx: "2"
}]];
const Hourglass = [["path", {
  d: "M5 22h14"
}], ["path", {
  d: "M5 2h14"
}], ["path", {
  d: "M17 22v-4.172a2 2 0 0 0-.586-1.414L12 12l-4.414 4.414A2 2 0 0 0 7 17.828V22"
}], ["path", {
  d: "M7 2v4.172a2 2 0 0 0 .586 1.414L12 12l4.414-4.414A2 2 0 0 0 17 6.172V2"
}]];
const HousePlug = [["path", {
  d: "M10 12V8.964"
}], ["path", {
  d: "M14 12V8.964"
}], ["path", {
  d: "M15 12a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2a1 1 0 0 1 1-1z"
}], ["path", {
  d: "M8.5 21H5a2 2 0 0 1-2-2v-9a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2h-5a2 2 0 0 1-2-2v-2"
}]];
const HousePlus = [["path", {
  d: "M13.22 2.416a2 2 0 0 0-2.511.057l-7 5.999A2 2 0 0 0 3 10v9a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7.354"
}], ["path", {
  d: "M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8"
}], ["path", {
  d: "M15 6h6"
}], ["path", {
  d: "M18 3v6"
}]];
const HouseWifi = [["path", {
  d: "M9.5 13.866a4 4 0 0 1 5 .01"
}], ["path", {
  d: "M12 17h.01"
}], ["path", {
  d: "M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"
}], ["path", {
  d: "M7 10.754a8 8 0 0 1 10 0"
}]];
const House = [["path", {
  d: "M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8"
}], ["path", {
  d: "M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"
}]];
const IceCreamBowl = [["path", {
  d: "M12 17c5 0 8-2.69 8-6H4c0 3.31 3 6 8 6m-4 4h8m-4-3v3M5.14 11a3.5 3.5 0 1 1 6.71 0"
}], ["path", {
  d: "M12.14 11a3.5 3.5 0 1 1 6.71 0"
}], ["path", {
  d: "M15.5 6.5a3.5 3.5 0 1 0-7 0"
}]];
const IceCreamCone = [["path", {
  d: "m7 11 4.08 10.35a1 1 0 0 0 1.84 0L17 11"
}], ["path", {
  d: "M17 7A5 5 0 0 0 7 7"
}], ["path", {
  d: "M17 7a2 2 0 0 1 0 4H7a2 2 0 0 1 0-4"
}]];
const IdCard = [["path", {
  d: "M16 10h2"
}], ["path", {
  d: "M16 14h2"
}], ["path", {
  d: "M6.17 15a3 3 0 0 1 5.66 0"
}], ["circle", {
  cx: "9",
  cy: "11",
  r: "2"
}], ["rect", {
  x: "2",
  y: "5",
  width: "20",
  height: "14",
  rx: "2"
}]];
const ImageDown = [["path", {
  d: "M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21"
}], ["path", {
  d: "m14 19 3 3v-5.5"
}], ["path", {
  d: "m17 22 3-3"
}], ["circle", {
  cx: "9",
  cy: "9",
  r: "2"
}]];
const ImageMinus = [["path", {
  d: "M21 9v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7"
}], ["line", {
  x1: "16",
  x2: "22",
  y1: "5",
  y2: "5"
}], ["circle", {
  cx: "9",
  cy: "9",
  r: "2"
}], ["path", {
  d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"
}]];
const ImageOff = [["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}], ["path", {
  d: "M10.41 10.41a2 2 0 1 1-2.83-2.83"
}], ["line", {
  x1: "13.5",
  x2: "6",
  y1: "13.5",
  y2: "21"
}], ["line", {
  x1: "18",
  x2: "21",
  y1: "12",
  y2: "15"
}], ["path", {
  d: "M3.59 3.59A1.99 1.99 0 0 0 3 5v14a2 2 0 0 0 2 2h14c.55 0 1.052-.22 1.41-.59"
}], ["path", {
  d: "M21 15V5a2 2 0 0 0-2-2H9"
}]];
const ImagePlay = [["path", {
  d: "m11 16-5 5"
}], ["path", {
  d: "M11 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6.5"
}], ["path", {
  d: "M15.765 22a.5.5 0 0 1-.765-.424V13.38a.5.5 0 0 1 .765-.424l5.878 3.674a1 1 0 0 1 0 1.696z"
}], ["circle", {
  cx: "9",
  cy: "9",
  r: "2"
}]];
const ImagePlus = [["path", {
  d: "M16 5h6"
}], ["path", {
  d: "M19 2v6"
}], ["path", {
  d: "M21 11.5V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7.5"
}], ["path", {
  d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"
}], ["circle", {
  cx: "9",
  cy: "9",
  r: "2"
}]];
const ImageUp = [["path", {
  d: "M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21"
}], ["path", {
  d: "m14 19.5 3-3 3 3"
}], ["path", {
  d: "M17 22v-5.5"
}], ["circle", {
  cx: "9",
  cy: "9",
  r: "2"
}]];
const ImageUpscale = [["path", {
  d: "M16 3h5v5"
}], ["path", {
  d: "M17 21h2a2 2 0 0 0 2-2"
}], ["path", {
  d: "M21 12v3"
}], ["path", {
  d: "m21 3-5 5"
}], ["path", {
  d: "M3 7V5a2 2 0 0 1 2-2"
}], ["path", {
  d: "m5 21 4.144-4.144a1.21 1.21 0 0 1 1.712 0L13 19"
}], ["path", {
  d: "M9 3h3"
}], ["rect", {
  x: "3",
  y: "11",
  width: "10",
  height: "10",
  rx: "1"
}]];
const Image = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}], ["circle", {
  cx: "9",
  cy: "9",
  r: "2"
}], ["path", {
  d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"
}]];
const Images = [["path", {
  d: "M18 22H4a2 2 0 0 1-2-2V6"
}], ["path", {
  d: "m22 13-1.296-1.296a2.41 2.41 0 0 0-3.408 0L11 18"
}], ["circle", {
  cx: "12",
  cy: "8",
  r: "2"
}], ["rect", {
  width: "16",
  height: "16",
  x: "6",
  y: "2",
  rx: "2"
}]];
const Import = [["path", {
  d: "M12 3v12"
}], ["path", {
  d: "m8 11 4 4 4-4"
}], ["path", {
  d: "M8 5H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-4"
}]];
const Inbox = [["polyline", {
  points: "22 12 16 12 14 15 10 15 8 12 2 12"
}], ["path", {
  d: "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"
}]];
const IndentIncrease = [["path", {
  d: "M21 12H11"
}], ["path", {
  d: "M21 18H11"
}], ["path", {
  d: "M21 6H11"
}], ["path", {
  d: "m3 8 4 4-4 4"
}]];
const IndianRupee = [["path", {
  d: "M6 3h12"
}], ["path", {
  d: "M6 8h12"
}], ["path", {
  d: "m6 13 8.5 8"
}], ["path", {
  d: "M6 13h3"
}], ["path", {
  d: "M9 13c6.667 0 6.667-10 0-10"
}]];
const IndentDecrease = [["path", {
  d: "M21 12H11"
}], ["path", {
  d: "M21 18H11"
}], ["path", {
  d: "M21 6H11"
}], ["path", {
  d: "m7 8-4 4 4 4"
}]];
const Info = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M12 16v-4"
}], ["path", {
  d: "M12 8h.01"
}]];
const Infinity = [["path", {
  d: "M6 16c5 0 7-8 12-8a4 4 0 0 1 0 8c-5 0-7-8-12-8a4 4 0 1 0 0 8"
}]];
const InspectionPanel = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M7 7h.01"
}], ["path", {
  d: "M17 7h.01"
}], ["path", {
  d: "M7 17h.01"
}], ["path", {
  d: "M17 17h.01"
}]];
const Instagram = [["rect", {
  width: "20",
  height: "20",
  x: "2",
  y: "2",
  rx: "5",
  ry: "5"
}], ["path", {
  d: "M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"
}], ["line", {
  x1: "17.5",
  x2: "17.51",
  y1: "6.5",
  y2: "6.5"
}]];
const Italic = [["line", {
  x1: "19",
  x2: "10",
  y1: "4",
  y2: "4"
}], ["line", {
  x1: "14",
  x2: "5",
  y1: "20",
  y2: "20"
}], ["line", {
  x1: "15",
  x2: "9",
  y1: "4",
  y2: "20"
}]];
const IterationCcw = [["path", {
  d: "M20 10c0-4.4-3.6-8-8-8s-8 3.6-8 8 3.6 8 8 8h8"
}], ["polyline", {
  points: "16 14 20 18 16 22"
}]];
const IterationCw = [["path", {
  d: "M4 10c0-4.4 3.6-8 8-8s8 3.6 8 8-3.6 8-8 8H4"
}], ["polyline", {
  points: "8 22 4 18 8 14"
}]];
const JapaneseYen = [["path", {
  d: "M12 9.5V21m0-11.5L6 3m6 6.5L18 3"
}], ["path", {
  d: "M6 15h12"
}], ["path", {
  d: "M6 11h12"
}]];
const Joystick = [["path", {
  d: "M21 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-2Z"
}], ["path", {
  d: "M6 15v-2"
}], ["path", {
  d: "M12 15V9"
}], ["circle", {
  cx: "12",
  cy: "6",
  r: "3"
}]];
const Kanban = [["path", {
  d: "M6 5v11"
}], ["path", {
  d: "M12 5v6"
}], ["path", {
  d: "M18 5v14"
}]];
const KeyRound = [["path", {
  d: "M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4z"
}], ["circle", {
  cx: "16.5",
  cy: "7.5",
  r: ".5",
  fill: "currentColor"
}]];
const Key = [["path", {
  d: "m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4"
}], ["path", {
  d: "m21 2-9.6 9.6"
}], ["circle", {
  cx: "7.5",
  cy: "15.5",
  r: "5.5"
}]];
const KeySquare = [["path", {
  d: "M12.4 2.7a2.5 2.5 0 0 1 3.4 0l5.5 5.5a2.5 2.5 0 0 1 0 3.4l-3.7 3.7a2.5 2.5 0 0 1-3.4 0L8.7 9.8a2.5 2.5 0 0 1 0-3.4z"
}], ["path", {
  d: "m14 7 3 3"
}], ["path", {
  d: "m9.4 10.6-6.814 6.814A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814"
}]];
const KeyboardMusic = [["rect", {
  width: "20",
  height: "16",
  x: "2",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M6 8h4"
}], ["path", {
  d: "M14 8h.01"
}], ["path", {
  d: "M18 8h.01"
}], ["path", {
  d: "M2 12h20"
}], ["path", {
  d: "M6 12v4"
}], ["path", {
  d: "M10 12v4"
}], ["path", {
  d: "M14 12v4"
}], ["path", {
  d: "M18 12v4"
}]];
const KeyboardOff = [["path", {
  d: "M 20 4 A2 2 0 0 1 22 6"
}], ["path", {
  d: "M 22 6 L 22 16.41"
}], ["path", {
  d: "M 7 16 L 16 16"
}], ["path", {
  d: "M 9.69 4 L 20 4"
}], ["path", {
  d: "M14 8h.01"
}], ["path", {
  d: "M18 8h.01"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M20 20H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2"
}], ["path", {
  d: "M6 8h.01"
}], ["path", {
  d: "M8 12h.01"
}]];
const Keyboard = [["path", {
  d: "M10 8h.01"
}], ["path", {
  d: "M12 12h.01"
}], ["path", {
  d: "M14 8h.01"
}], ["path", {
  d: "M16 12h.01"
}], ["path", {
  d: "M18 8h.01"
}], ["path", {
  d: "M6 8h.01"
}], ["path", {
  d: "M7 16h10"
}], ["path", {
  d: "M8 12h.01"
}], ["rect", {
  width: "20",
  height: "16",
  x: "2",
  y: "4",
  rx: "2"
}]];
const LampDesk = [["path", {
  d: "m14 5-3 3 2 7 8-8-7-2Z"
}], ["path", {
  d: "m14 5-3 3-3-3 3-3 3 3Z"
}], ["path", {
  d: "M9.5 6.5 4 12l3 6"
}], ["path", {
  d: "M3 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H3Z"
}]];
const LampCeiling = [["path", {
  d: "M12 2v5"
}], ["path", {
  d: "M6 7h12l4 9H2l4-9Z"
}], ["path", {
  d: "M9.17 16a3 3 0 1 0 5.66 0"
}]];
const LampFloor = [["path", {
  d: "M9 2h6l3 7H6l3-7Z"
}], ["path", {
  d: "M12 9v13"
}], ["path", {
  d: "M9 22h6"
}]];
const LampWallDown = [["path", {
  d: "M11 13h6l3 7H8l3-7Z"
}], ["path", {
  d: "M14 13V8a2 2 0 0 0-2-2H8"
}], ["path", {
  d: "M4 9h2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H4v6Z"
}]];
const LampWallUp = [["path", {
  d: "M11 4h6l3 7H8l3-7Z"
}], ["path", {
  d: "M14 11v5a2 2 0 0 1-2 2H8"
}], ["path", {
  d: "M4 15h2a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H4v-6Z"
}]];
const Lamp = [["path", {
  d: "M8 2h8l4 10H4L8 2Z"
}], ["path", {
  d: "M12 12v6"
}], ["path", {
  d: "M8 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H8Z"
}]];
const LandPlot = [["path", {
  d: "m12 8 6-3-6-3v10"
}], ["path", {
  d: "m8 11.99-5.5 3.14a1 1 0 0 0 0 1.74l8.5 4.86a2 2 0 0 0 2 0l8.5-4.86a1 1 0 0 0 0-1.74L16 12"
}], ["path", {
  d: "m6.49 12.85 11.02 6.3"
}], ["path", {
  d: "M17.51 12.85 6.5 19.15"
}]];
const Landmark = [["line", {
  x1: "3",
  x2: "21",
  y1: "22",
  y2: "22"
}], ["line", {
  x1: "6",
  x2: "6",
  y1: "18",
  y2: "11"
}], ["line", {
  x1: "10",
  x2: "10",
  y1: "18",
  y2: "11"
}], ["line", {
  x1: "14",
  x2: "14",
  y1: "18",
  y2: "11"
}], ["line", {
  x1: "18",
  x2: "18",
  y1: "18",
  y2: "11"
}], ["polygon", {
  points: "12 2 20 7 4 7"
}]];
const Languages = [["path", {
  d: "m5 8 6 6"
}], ["path", {
  d: "m4 14 6-6 2-3"
}], ["path", {
  d: "M2 5h12"
}], ["path", {
  d: "M7 2h1"
}], ["path", {
  d: "m22 22-5-10-5 10"
}], ["path", {
  d: "M14 18h6"
}]];
const LaptopMinimalCheck = [["path", {
  d: "M2 20h20"
}], ["path", {
  d: "m9 10 2 2 4-4"
}], ["rect", {
  x: "3",
  y: "4",
  width: "18",
  height: "12",
  rx: "2"
}]];
const LaptopMinimal = [["rect", {
  width: "18",
  height: "12",
  x: "3",
  y: "4",
  rx: "2",
  ry: "2"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "20",
  y2: "20"
}]];
const Laptop = [["path", {
  d: "M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16"
}]];
const LassoSelect = [["path", {
  d: "M7 22a5 5 0 0 1-2-4"
}], ["path", {
  d: "M7 16.93c.96.43 1.96.74 2.99.91"
}], ["path", {
  d: "M3.34 14A6.8 6.8 0 0 1 2 10c0-4.42 4.48-8 10-8s10 3.58 10 8a7.19 7.19 0 0 1-.33 2"
}], ["path", {
  d: "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z"
}], ["path", {
  d: "M14.33 22h-.09a.35.35 0 0 1-.24-.32v-10a.34.34 0 0 1 .33-.34c.08 0 .15.03.21.08l7.34 6a.33.33 0 0 1-.21.59h-4.49l-2.57 3.85a.35.35 0 0 1-.28.14z"
}]];
const Lasso = [["path", {
  d: "M7 22a5 5 0 0 1-2-4"
}], ["path", {
  d: "M3.3 14A6.8 6.8 0 0 1 2 10c0-4.4 4.5-8 10-8s10 3.6 10 8-4.5 8-10 8a12 12 0 0 1-5-1"
}], ["path", {
  d: "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z"
}]];
const Laugh = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M18 13a6 6 0 0 1-6 5 6 6 0 0 1-6-5h12Z"
}], ["line", {
  x1: "9",
  x2: "9.01",
  y1: "9",
  y2: "9"
}], ["line", {
  x1: "15",
  x2: "15.01",
  y1: "9",
  y2: "9"
}]];
const Layers2 = [["path", {
  d: "m16.02 12 5.48 3.13a1 1 0 0 1 0 1.74L13 21.74a2 2 0 0 1-2 0l-8.5-4.87a1 1 0 0 1 0-1.74L7.98 12"
}], ["path", {
  d: "M13 13.74a2 2 0 0 1-2 0L2.5 8.87a1 1 0 0 1 0-1.74L11 2.26a2 2 0 0 1 2 0l8.5 4.87a1 1 0 0 1 0 1.74Z"
}]];
const Layers = [["path", {
  d: "M12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83z"
}], ["path", {
  d: "M2 12a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 12"
}], ["path", {
  d: "M2 17a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 17"
}]];
const LayoutDashboard = [["rect", {
  width: "7",
  height: "9",
  x: "3",
  y: "3",
  rx: "1"
}], ["rect", {
  width: "7",
  height: "5",
  x: "14",
  y: "3",
  rx: "1"
}], ["rect", {
  width: "7",
  height: "9",
  x: "14",
  y: "12",
  rx: "1"
}], ["rect", {
  width: "7",
  height: "5",
  x: "3",
  y: "16",
  rx: "1"
}]];
const LayoutGrid = [["rect", {
  width: "7",
  height: "7",
  x: "3",
  y: "3",
  rx: "1"
}], ["rect", {
  width: "7",
  height: "7",
  x: "14",
  y: "3",
  rx: "1"
}], ["rect", {
  width: "7",
  height: "7",
  x: "14",
  y: "14",
  rx: "1"
}], ["rect", {
  width: "7",
  height: "7",
  x: "3",
  y: "14",
  rx: "1"
}]];
const LayoutList = [["rect", {
  width: "7",
  height: "7",
  x: "3",
  y: "3",
  rx: "1"
}], ["rect", {
  width: "7",
  height: "7",
  x: "3",
  y: "14",
  rx: "1"
}], ["path", {
  d: "M14 4h7"
}], ["path", {
  d: "M14 9h7"
}], ["path", {
  d: "M14 15h7"
}], ["path", {
  d: "M14 20h7"
}]];
const LayoutPanelLeft = [["rect", {
  width: "7",
  height: "18",
  x: "3",
  y: "3",
  rx: "1"
}], ["rect", {
  width: "7",
  height: "7",
  x: "14",
  y: "3",
  rx: "1"
}], ["rect", {
  width: "7",
  height: "7",
  x: "14",
  y: "14",
  rx: "1"
}]];
const LayoutPanelTop = [["rect", {
  width: "18",
  height: "7",
  x: "3",
  y: "3",
  rx: "1"
}], ["rect", {
  width: "7",
  height: "7",
  x: "3",
  y: "14",
  rx: "1"
}], ["rect", {
  width: "7",
  height: "7",
  x: "14",
  y: "14",
  rx: "1"
}]];
const LayoutTemplate = [["rect", {
  width: "18",
  height: "7",
  x: "3",
  y: "3",
  rx: "1"
}], ["rect", {
  width: "9",
  height: "7",
  x: "3",
  y: "14",
  rx: "1"
}], ["rect", {
  width: "5",
  height: "7",
  x: "16",
  y: "14",
  rx: "1"
}]];
const Leaf = [["path", {
  d: "M11 20A7 7 0 0 1 9.8 6.1C15.5 5 17 4.48 19 2c1 2 2 4.18 2 8 0 5.5-4.78 10-10 10Z"
}], ["path", {
  d: "M2 21c0-3 1.85-5.36 5.08-6C9.5 14.52 12 13 13 12"
}]];
const LeafyGreen = [["path", {
  d: "M2 22c1.25-.987 2.27-1.975 3.9-2.2a5.56 5.56 0 0 1 3.8 1.5 4 4 0 0 0 6.187-2.353 3.5 3.5 0 0 0 3.69-5.116A3.5 3.5 0 0 0 20.95 8 3.5 3.5 0 1 0 16 3.05a3.5 3.5 0 0 0-5.831 1.373 3.5 3.5 0 0 0-5.116 3.69 4 4 0 0 0-2.348 6.155C3.499 15.42 4.409 16.712 4.2 18.1 3.926 19.743 3.014 20.732 2 22"
}], ["path", {
  d: "M2 22 17 7"
}]];
const Lectern = [["path", {
  d: "M16 12h3a2 2 0 0 0 1.902-1.38l1.056-3.333A1 1 0 0 0 21 6H3a1 1 0 0 0-.958 1.287l1.056 3.334A2 2 0 0 0 5 12h3"
}], ["path", {
  d: "M18 6V3a1 1 0 0 0-1-1h-3"
}], ["rect", {
  width: "8",
  height: "12",
  x: "8",
  y: "10",
  rx: "1"
}]];
const LetterText = [["path", {
  d: "M15 12h6"
}], ["path", {
  d: "M15 6h6"
}], ["path", {
  d: "m3 13 3.553-7.724a.5.5 0 0 1 .894 0L11 13"
}], ["path", {
  d: "M3 18h18"
}], ["path", {
  d: "M4 11h6"
}]];
const LibraryBig = [["rect", {
  width: "8",
  height: "18",
  x: "3",
  y: "3",
  rx: "1"
}], ["path", {
  d: "M7 3v18"
}], ["path", {
  d: "M20.4 18.9c.2.5-.1 1.1-.6 1.3l-1.9.7c-.5.2-1.1-.1-1.3-.6L11.1 5.1c-.2-.5.1-1.1.6-1.3l1.9-.7c.5-.2 1.1.1 1.3.6Z"
}]];
const Library = [["path", {
  d: "m16 6 4 14"
}], ["path", {
  d: "M12 6v14"
}], ["path", {
  d: "M8 8v12"
}], ["path", {
  d: "M4 4v16"
}]];
const LifeBuoy = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "m4.93 4.93 4.24 4.24"
}], ["path", {
  d: "m14.83 9.17 4.24-4.24"
}], ["path", {
  d: "m14.83 14.83 4.24 4.24"
}], ["path", {
  d: "m9.17 14.83-4.24 4.24"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "4"
}]];
const Ligature = [["path", {
  d: "M8 20V8c0-2.2 1.8-4 4-4 1.5 0 2.8.8 3.5 2"
}], ["path", {
  d: "M6 12h4"
}], ["path", {
  d: "M14 12h2v8"
}], ["path", {
  d: "M6 20h4"
}], ["path", {
  d: "M14 20h4"
}]];
const LightbulbOff = [["path", {
  d: "M16.8 11.2c.8-.9 1.2-2 1.2-3.2a6 6 0 0 0-9.3-5"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M6.3 6.3a4.67 4.67 0 0 0 1.2 5.2c.7.7 1.3 1.5 1.5 2.5"
}], ["path", {
  d: "M9 18h6"
}], ["path", {
  d: "M10 22h4"
}]];
const Lightbulb = [["path", {
  d: "M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5"
}], ["path", {
  d: "M9 18h6"
}], ["path", {
  d: "M10 22h4"
}]];
const Link2Off = [["path", {
  d: "M9 17H7A5 5 0 0 1 7 7"
}], ["path", {
  d: "M15 7h2a5 5 0 0 1 4 8"
}], ["line", {
  x1: "8",
  x2: "12",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Link2 = [["path", {
  d: "M9 17H7A5 5 0 0 1 7 7h2"
}], ["path", {
  d: "M15 7h2a5 5 0 1 1 0 10h-2"
}], ["line", {
  x1: "8",
  x2: "16",
  y1: "12",
  y2: "12"
}]];
const Link = [["path", {
  d: "M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"
}], ["path", {
  d: "M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"
}]];
const Linkedin = [["path", {
  d: "M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"
}], ["rect", {
  width: "4",
  height: "12",
  x: "2",
  y: "9"
}], ["circle", {
  cx: "4",
  cy: "4",
  r: "2"
}]];
const ListCheck = [["path", {
  d: "M11 18H3"
}], ["path", {
  d: "m15 18 2 2 4-4"
}], ["path", {
  d: "M16 12H3"
}], ["path", {
  d: "M16 6H3"
}]];
const ListChecks = [["path", {
  d: "m3 17 2 2 4-4"
}], ["path", {
  d: "m3 7 2 2 4-4"
}], ["path", {
  d: "M13 6h8"
}], ["path", {
  d: "M13 12h8"
}], ["path", {
  d: "M13 18h8"
}]];
const ListCollapse = [["path", {
  d: "m3 10 2.5-2.5L3 5"
}], ["path", {
  d: "m3 19 2.5-2.5L3 14"
}], ["path", {
  d: "M10 6h11"
}], ["path", {
  d: "M10 12h11"
}], ["path", {
  d: "M10 18h11"
}]];
const ListEnd = [["path", {
  d: "M16 12H3"
}], ["path", {
  d: "M16 6H3"
}], ["path", {
  d: "M10 18H3"
}], ["path", {
  d: "M21 6v10a2 2 0 0 1-2 2h-5"
}], ["path", {
  d: "m16 16-2 2 2 2"
}]];
const ListFilterPlus = [["path", {
  d: "M10 18h4"
}], ["path", {
  d: "M11 6H3"
}], ["path", {
  d: "M15 6h6"
}], ["path", {
  d: "M18 9V3"
}], ["path", {
  d: "M7 12h8"
}]];
const ListFilter = [["path", {
  d: "M3 6h18"
}], ["path", {
  d: "M7 12h10"
}], ["path", {
  d: "M10 18h4"
}]];
const ListMinus = [["path", {
  d: "M11 12H3"
}], ["path", {
  d: "M16 6H3"
}], ["path", {
  d: "M16 18H3"
}], ["path", {
  d: "M21 12h-6"
}]];
const ListMusic = [["path", {
  d: "M21 15V6"
}], ["path", {
  d: "M18.5 18a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z"
}], ["path", {
  d: "M12 12H3"
}], ["path", {
  d: "M16 6H3"
}], ["path", {
  d: "M12 18H3"
}]];
const ListOrdered = [["path", {
  d: "M10 12h11"
}], ["path", {
  d: "M10 18h11"
}], ["path", {
  d: "M10 6h11"
}], ["path", {
  d: "M4 10h2"
}], ["path", {
  d: "M4 6h1v4"
}], ["path", {
  d: "M6 18H4c0-1 2-2 2-3s-1-1.5-2-1"
}]];
const ListPlus = [["path", {
  d: "M11 12H3"
}], ["path", {
  d: "M16 6H3"
}], ["path", {
  d: "M16 18H3"
}], ["path", {
  d: "M18 9v6"
}], ["path", {
  d: "M21 12h-6"
}]];
const ListStart = [["path", {
  d: "M16 12H3"
}], ["path", {
  d: "M16 18H3"
}], ["path", {
  d: "M10 6H3"
}], ["path", {
  d: "M21 18V8a2 2 0 0 0-2-2h-5"
}], ["path", {
  d: "m16 8-2-2 2-2"
}]];
const ListRestart = [["path", {
  d: "M21 6H3"
}], ["path", {
  d: "M7 12H3"
}], ["path", {
  d: "M7 18H3"
}], ["path", {
  d: "M12 18a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L11 14"
}], ["path", {
  d: "M11 10v4h4"
}]];
const ListTodo = [["rect", {
  x: "3",
  y: "5",
  width: "6",
  height: "6",
  rx: "1"
}], ["path", {
  d: "m3 17 2 2 4-4"
}], ["path", {
  d: "M13 6h8"
}], ["path", {
  d: "M13 12h8"
}], ["path", {
  d: "M13 18h8"
}]];
const ListTree = [["path", {
  d: "M21 12h-8"
}], ["path", {
  d: "M21 6H8"
}], ["path", {
  d: "M21 18h-8"
}], ["path", {
  d: "M3 6v4c0 1.1.9 2 2 2h3"
}], ["path", {
  d: "M3 10v6c0 1.1.9 2 2 2h3"
}]];
const ListVideo = [["path", {
  d: "M12 12H3"
}], ["path", {
  d: "M16 6H3"
}], ["path", {
  d: "M12 18H3"
}], ["path", {
  d: "m16 12 5 3-5 3v-6Z"
}]];
const List = [["path", {
  d: "M3 12h.01"
}], ["path", {
  d: "M3 18h.01"
}], ["path", {
  d: "M3 6h.01"
}], ["path", {
  d: "M8 12h13"
}], ["path", {
  d: "M8 18h13"
}], ["path", {
  d: "M8 6h13"
}]];
const ListX = [["path", {
  d: "M11 12H3"
}], ["path", {
  d: "M16 6H3"
}], ["path", {
  d: "M16 18H3"
}], ["path", {
  d: "m19 10-4 4"
}], ["path", {
  d: "m15 10 4 4"
}]];
const LoaderCircle = [["path", {
  d: "M21 12a9 9 0 1 1-6.219-8.56"
}]];
const LoaderPinwheel = [["path", {
  d: "M22 12a1 1 0 0 1-10 0 1 1 0 0 0-10 0"
}], ["path", {
  d: "M7 20.7a1 1 0 1 1 5-8.7 1 1 0 1 0 5-8.6"
}], ["path", {
  d: "M7 3.3a1 1 0 1 1 5 8.6 1 1 0 1 0 5 8.6"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}]];
const Loader = [["path", {
  d: "M12 2v4"
}], ["path", {
  d: "m16.2 7.8 2.9-2.9"
}], ["path", {
  d: "M18 12h4"
}], ["path", {
  d: "m16.2 16.2 2.9 2.9"
}], ["path", {
  d: "M12 18v4"
}], ["path", {
  d: "m4.9 19.1 2.9-2.9"
}], ["path", {
  d: "M2 12h4"
}], ["path", {
  d: "m4.9 4.9 2.9 2.9"
}]];
const LocateFixed = [["line", {
  x1: "2",
  x2: "5",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "19",
  x2: "22",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "2",
  y2: "5"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "19",
  y2: "22"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "7"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "3"
}]];
const LocateOff = [["line", {
  x1: "2",
  x2: "5",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "19",
  x2: "22",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "2",
  y2: "5"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "19",
  y2: "22"
}], ["path", {
  d: "M7.11 7.11C5.83 8.39 5 10.1 5 12c0 3.87 3.13 7 7 7 1.9 0 3.61-.83 4.89-2.11"
}], ["path", {
  d: "M18.71 13.96c.19-.63.29-1.29.29-1.96 0-3.87-3.13-7-7-7-.67 0-1.33.1-1.96.29"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Locate = [["line", {
  x1: "2",
  x2: "5",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "19",
  x2: "22",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "2",
  y2: "5"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "19",
  y2: "22"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "7"
}]];
const LockKeyholeOpen = [["circle", {
  cx: "12",
  cy: "16",
  r: "1"
}], ["rect", {
  width: "18",
  height: "12",
  x: "3",
  y: "10",
  rx: "2"
}], ["path", {
  d: "M7 10V7a5 5 0 0 1 9.33-2.5"
}]];
const LockKeyhole = [["circle", {
  cx: "12",
  cy: "16",
  r: "1"
}], ["rect", {
  x: "3",
  y: "10",
  width: "18",
  height: "12",
  rx: "2"
}], ["path", {
  d: "M7 10V7a5 5 0 0 1 10 0v3"
}]];
const LockOpen = [["rect", {
  width: "18",
  height: "11",
  x: "3",
  y: "11",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M7 11V7a5 5 0 0 1 9.9-1"
}]];
const Lock = [["rect", {
  width: "18",
  height: "11",
  x: "3",
  y: "11",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M7 11V7a5 5 0 0 1 10 0v4"
}]];
const LogIn = [["path", {
  d: "M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"
}], ["polyline", {
  points: "10 17 15 12 10 7"
}], ["line", {
  x1: "15",
  x2: "3",
  y1: "12",
  y2: "12"
}]];
const LogOut = [["path", {
  d: "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"
}], ["polyline", {
  points: "16 17 21 12 16 7"
}], ["line", {
  x1: "21",
  x2: "9",
  y1: "12",
  y2: "12"
}]];
const Logs = [["path", {
  d: "M13 12h8"
}], ["path", {
  d: "M13 18h8"
}], ["path", {
  d: "M13 6h8"
}], ["path", {
  d: "M3 12h1"
}], ["path", {
  d: "M3 18h1"
}], ["path", {
  d: "M3 6h1"
}], ["path", {
  d: "M8 12h1"
}], ["path", {
  d: "M8 18h1"
}], ["path", {
  d: "M8 6h1"
}]];
const Lollipop = [["circle", {
  cx: "11",
  cy: "11",
  r: "8"
}], ["path", {
  d: "m21 21-4.3-4.3"
}], ["path", {
  d: "M11 11a2 2 0 0 0 4 0 4 4 0 0 0-8 0 6 6 0 0 0 12 0"
}]];
const Luggage = [["path", {
  d: "M6 20a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2"
}], ["path", {
  d: "M8 18V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v14"
}], ["path", {
  d: "M10 20h4"
}], ["circle", {
  cx: "16",
  cy: "20",
  r: "2"
}], ["circle", {
  cx: "8",
  cy: "20",
  r: "2"
}]];
const Magnet = [["path", {
  d: "m6 15-4-4 6.75-6.77a7.79 7.79 0 0 1 11 11L13 22l-4-4 6.39-6.36a2.14 2.14 0 0 0-3-3L6 15"
}], ["path", {
  d: "m5 8 4 4"
}], ["path", {
  d: "m12 15 4 4"
}]];
const MailCheck = [["path", {
  d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8"
}], ["path", {
  d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"
}], ["path", {
  d: "m16 19 2 2 4-4"
}]];
const MailOpen = [["path", {
  d: "M21.2 8.4c.5.38.8.97.8 1.6v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V10a2 2 0 0 1 .8-1.6l8-6a2 2 0 0 1 2.4 0l8 6Z"
}], ["path", {
  d: "m22 10-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 10"
}]];
const MailMinus = [["path", {
  d: "M22 15V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8"
}], ["path", {
  d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"
}], ["path", {
  d: "M16 19h6"
}]];
const MailPlus = [["path", {
  d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8"
}], ["path", {
  d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"
}], ["path", {
  d: "M19 16v6"
}], ["path", {
  d: "M16 19h6"
}]];
const MailQuestion = [["path", {
  d: "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5"
}], ["path", {
  d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"
}], ["path", {
  d: "M18 15.28c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2"
}], ["path", {
  d: "M20 22v.01"
}]];
const MailSearch = [["path", {
  d: "M22 12.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h7.5"
}], ["path", {
  d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"
}], ["path", {
  d: "M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z"
}], ["circle", {
  cx: "18",
  cy: "18",
  r: "3"
}], ["path", {
  d: "m22 22-1.5-1.5"
}]];
const MailWarning = [["path", {
  d: "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5"
}], ["path", {
  d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"
}], ["path", {
  d: "M20 14v4"
}], ["path", {
  d: "M20 22v.01"
}]];
const MailX = [["path", {
  d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h9"
}], ["path", {
  d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"
}], ["path", {
  d: "m17 17 4 4"
}], ["path", {
  d: "m21 17-4 4"
}]];
const Mail = [["rect", {
  width: "20",
  height: "16",
  x: "2",
  y: "4",
  rx: "2"
}], ["path", {
  d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"
}]];
const Mailbox = [["path", {
  d: "M22 17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.5C2 7 4 5 6.5 5H18c2.2 0 4 1.8 4 4v8Z"
}], ["polyline", {
  points: "15,9 18,9 18,11"
}], ["path", {
  d: "M6.5 5C9 5 11 7 11 9.5V17a2 2 0 0 1-2 2"
}], ["line", {
  x1: "6",
  x2: "7",
  y1: "10",
  y2: "10"
}]];
const Mails = [["rect", {
  width: "16",
  height: "13",
  x: "6",
  y: "4",
  rx: "2"
}], ["path", {
  d: "m22 7-7.1 3.78c-.57.3-1.23.3-1.8 0L6 7"
}], ["path", {
  d: "M2 8v11c0 1.1.9 2 2 2h14"
}]];
const MapPinCheckInside = [["path", {
  d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"
}], ["path", {
  d: "m9 10 2 2 4-4"
}]];
const MapPinCheck = [["path", {
  d: "M19.43 12.935c.357-.967.57-1.955.57-2.935a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32.197 32.197 0 0 0 .813-.728"
}], ["circle", {
  cx: "12",
  cy: "10",
  r: "3"
}], ["path", {
  d: "m16 18 2 2 4-4"
}]];
const MapPinHouse = [["path", {
  d: "M15 22a1 1 0 0 1-1-1v-4a1 1 0 0 1 .445-.832l3-2a1 1 0 0 1 1.11 0l3 2A1 1 0 0 1 22 17v4a1 1 0 0 1-1 1z"
}], ["path", {
  d: "M18 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 .601.2"
}], ["path", {
  d: "M18 22v-3"
}], ["circle", {
  cx: "10",
  cy: "10",
  r: "3"
}]];
const MapPinMinusInside = [["path", {
  d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"
}], ["path", {
  d: "M9 10h6"
}]];
const MapPinMinus = [["path", {
  d: "M18.977 14C19.6 12.701 20 11.343 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738"
}], ["circle", {
  cx: "12",
  cy: "10",
  r: "3"
}], ["path", {
  d: "M16 18h6"
}]];
const MapPinOff = [["path", {
  d: "M12.75 7.09a3 3 0 0 1 2.16 2.16"
}], ["path", {
  d: "M17.072 17.072c-1.634 2.17-3.527 3.912-4.471 4.727a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 1.432-4.568"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M8.475 2.818A8 8 0 0 1 20 10c0 1.183-.31 2.377-.81 3.533"
}], ["path", {
  d: "M9.13 9.13a3 3 0 0 0 3.74 3.74"
}]];
const MapPinPlusInside = [["path", {
  d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"
}], ["path", {
  d: "M12 7v6"
}], ["path", {
  d: "M9 10h6"
}]];
const MapPinPlus = [["path", {
  d: "M19.914 11.105A7.298 7.298 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738"
}], ["circle", {
  cx: "12",
  cy: "10",
  r: "3"
}], ["path", {
  d: "M16 18h6"
}], ["path", {
  d: "M19 15v6"
}]];
const MapPinXInside = [["path", {
  d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"
}], ["path", {
  d: "m14.5 7.5-5 5"
}], ["path", {
  d: "m9.5 7.5 5 5"
}]];
const MapPinX = [["path", {
  d: "M19.752 11.901A7.78 7.78 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 19 19 0 0 0 .09-.077"
}], ["circle", {
  cx: "12",
  cy: "10",
  r: "3"
}], ["path", {
  d: "m21.5 15.5-5 5"
}], ["path", {
  d: "m21.5 20.5-5-5"
}]];
const MapPin = [["path", {
  d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"
}], ["circle", {
  cx: "12",
  cy: "10",
  r: "3"
}]];
const MapPinned = [["path", {
  d: "M18 8c0 3.613-3.869 7.429-5.393 8.795a1 1 0 0 1-1.214 0C9.87 15.429 6 11.613 6 8a6 6 0 0 1 12 0"
}], ["circle", {
  cx: "12",
  cy: "8",
  r: "2"
}], ["path", {
  d: "M8.714 14h-3.71a1 1 0 0 0-.948.683l-2.004 6A1 1 0 0 0 3 22h18a1 1 0 0 0 .948-1.316l-2-6a1 1 0 0 0-.949-.684h-3.712"
}]];
const Map = [["path", {
  d: "M14.106 5.553a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619v12.764a1 1 0 0 1-.553.894l-4.553 2.277a2 2 0 0 1-1.788 0l-4.212-2.106a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0z"
}], ["path", {
  d: "M15 5.764v15"
}], ["path", {
  d: "M9 3.236v15"
}]];
const MapPlus = [["path", {
  d: "m11 19-1.106-.552a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0l4.212 2.106a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619V12"
}], ["path", {
  d: "M15 5.764V12"
}], ["path", {
  d: "M18 15v6"
}], ["path", {
  d: "M21 18h-6"
}], ["path", {
  d: "M9 3.236v15"
}]];
const MarsStroke = [["path", {
  d: "m14 6 4 4"
}], ["path", {
  d: "M17 3h4v4"
}], ["path", {
  d: "m21 3-7.75 7.75"
}], ["circle", {
  cx: "9",
  cy: "15",
  r: "6"
}]];
const Mars = [["path", {
  d: "M16 3h5v5"
}], ["path", {
  d: "m21 3-6.75 6.75"
}], ["circle", {
  cx: "10",
  cy: "14",
  r: "6"
}]];
const Martini = [["path", {
  d: "M8 22h8"
}], ["path", {
  d: "M12 11v11"
}], ["path", {
  d: "m19 3-7 8-7-8Z"
}]];
const Maximize2 = [["polyline", {
  points: "15 3 21 3 21 9"
}], ["polyline", {
  points: "9 21 3 21 3 15"
}], ["line", {
  x1: "21",
  x2: "14",
  y1: "3",
  y2: "10"
}], ["line", {
  x1: "3",
  x2: "10",
  y1: "21",
  y2: "14"
}]];
const Maximize = [["path", {
  d: "M8 3H5a2 2 0 0 0-2 2v3"
}], ["path", {
  d: "M21 8V5a2 2 0 0 0-2-2h-3"
}], ["path", {
  d: "M3 16v3a2 2 0 0 0 2 2h3"
}], ["path", {
  d: "M16 21h3a2 2 0 0 0 2-2v-3"
}]];
const Medal = [["path", {
  d: "M7.21 15 2.66 7.14a2 2 0 0 1 .13-2.2L4.4 2.8A2 2 0 0 1 6 2h12a2 2 0 0 1 1.6.8l1.6 2.14a2 2 0 0 1 .14 2.2L16.79 15"
}], ["path", {
  d: "M11 12 5.12 2.2"
}], ["path", {
  d: "m13 12 5.88-9.8"
}], ["path", {
  d: "M8 7h8"
}], ["circle", {
  cx: "12",
  cy: "17",
  r: "5"
}], ["path", {
  d: "M12 18v-2h-.5"
}]];
const MegaphoneOff = [["path", {
  d: "M9.26 9.26 3 11v3l14.14 3.14"
}], ["path", {
  d: "M21 15.34V6l-7.31 2.03"
}], ["path", {
  d: "M11.6 16.8a3 3 0 1 1-5.8-1.6"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Megaphone = [["path", {
  d: "m3 11 18-5v12L3 14v-3z"
}], ["path", {
  d: "M11.6 16.8a3 3 0 1 1-5.8-1.6"
}]];
const Meh = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["line", {
  x1: "8",
  x2: "16",
  y1: "15",
  y2: "15"
}], ["line", {
  x1: "9",
  x2: "9.01",
  y1: "9",
  y2: "9"
}], ["line", {
  x1: "15",
  x2: "15.01",
  y1: "9",
  y2: "9"
}]];
const MemoryStick = [["path", {
  d: "M6 19v-3"
}], ["path", {
  d: "M10 19v-3"
}], ["path", {
  d: "M14 19v-3"
}], ["path", {
  d: "M18 19v-3"
}], ["path", {
  d: "M8 11V9"
}], ["path", {
  d: "M16 11V9"
}], ["path", {
  d: "M12 11V9"
}], ["path", {
  d: "M2 15h20"
}], ["path", {
  d: "M2 7a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1.1a2 2 0 0 0 0 3.837V17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-5.1a2 2 0 0 0 0-3.837Z"
}]];
const Menu = [["line", {
  x1: "4",
  x2: "20",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "4",
  x2: "20",
  y1: "6",
  y2: "6"
}], ["line", {
  x1: "4",
  x2: "20",
  y1: "18",
  y2: "18"
}]];
const Merge = [["path", {
  d: "m8 6 4-4 4 4"
}], ["path", {
  d: "M12 2v10.3a4 4 0 0 1-1.172 2.872L4 22"
}], ["path", {
  d: "m20 22-5-5"
}]];
const MessageCircleCode = [["path", {
  d: "M10 9.5 8 12l2 2.5"
}], ["path", {
  d: "m14 9.5 2 2.5-2 2.5"
}], ["path", {
  d: "M7.9 20A9 9 0 1 0 4 16.1L2 22z"
}]];
const MessageCircleDashed = [["path", {
  d: "M13.5 3.1c-.5 0-1-.1-1.5-.1s-1 .1-1.5.1"
}], ["path", {
  d: "M19.3 6.8a10.45 10.45 0 0 0-2.1-2.1"
}], ["path", {
  d: "M20.9 13.5c.1-.5.1-1 .1-1.5s-.1-1-.1-1.5"
}], ["path", {
  d: "M17.2 19.3a10.45 10.45 0 0 0 2.1-2.1"
}], ["path", {
  d: "M10.5 20.9c.5.1 1 .1 1.5.1s1-.1 1.5-.1"
}], ["path", {
  d: "M3.5 17.5 2 22l4.5-1.5"
}], ["path", {
  d: "M3.1 10.5c0 .5-.1 1-.1 1.5s.1 1 .1 1.5"
}], ["path", {
  d: "M6.8 4.7a10.45 10.45 0 0 0-2.1 2.1"
}]];
const MessageCircleHeart = [["path", {
  d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z"
}], ["path", {
  d: "M15.8 9.2a2.5 2.5 0 0 0-3.5 0l-.3.4-.35-.3a2.42 2.42 0 1 0-3.2 3.6l3.6 3.5 3.6-3.5c1.2-1.2 1.1-2.7.2-3.7"
}]];
const MessageCircleMore = [["path", {
  d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z"
}], ["path", {
  d: "M8 12h.01"
}], ["path", {
  d: "M12 12h.01"
}], ["path", {
  d: "M16 12h.01"
}]];
const MessageCircleOff = [["path", {
  d: "M20.5 14.9A9 9 0 0 0 9.1 3.5"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M5.6 5.6C3 8.3 2.2 12.5 4 16l-2 6 6-2c3.4 1.8 7.6 1.1 10.3-1.7"
}]];
const MessageCirclePlus = [["path", {
  d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z"
}], ["path", {
  d: "M8 12h8"
}], ["path", {
  d: "M12 8v8"
}]];
const MessageCircleQuestion = [["path", {
  d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z"
}], ["path", {
  d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"
}], ["path", {
  d: "M12 17h.01"
}]];
const MessageCircleReply = [["path", {
  d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z"
}], ["path", {
  d: "m10 15-3-3 3-3"
}], ["path", {
  d: "M7 12h7a2 2 0 0 1 2 2v1"
}]];
const MessageCircleWarning = [["path", {
  d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z"
}], ["path", {
  d: "M12 8v4"
}], ["path", {
  d: "M12 16h.01"
}]];
const MessageCircleX = [["path", {
  d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z"
}], ["path", {
  d: "m15 9-6 6"
}], ["path", {
  d: "m9 9 6 6"
}]];
const MessageCircle = [["path", {
  d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z"
}]];
const MessageSquareCode = [["path", {
  d: "M10 7.5 8 10l2 2.5"
}], ["path", {
  d: "m14 7.5 2 2.5-2 2.5"
}], ["path", {
  d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
}]];
const MessageSquareDashed = [["path", {
  d: "M10 17H7l-4 4v-7"
}], ["path", {
  d: "M14 17h1"
}], ["path", {
  d: "M14 3h1"
}], ["path", {
  d: "M19 3a2 2 0 0 1 2 2"
}], ["path", {
  d: "M21 14v1a2 2 0 0 1-2 2"
}], ["path", {
  d: "M21 9v1"
}], ["path", {
  d: "M3 9v1"
}], ["path", {
  d: "M5 3a2 2 0 0 0-2 2"
}], ["path", {
  d: "M9 3h1"
}]];
const MessageSquareDiff = [["path", {
  d: "m5 19-2 2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2"
}], ["path", {
  d: "M9 10h6"
}], ["path", {
  d: "M12 7v6"
}], ["path", {
  d: "M9 17h6"
}]];
const MessageSquareDot = [["path", {
  d: "M11.7 3H5a2 2 0 0 0-2 2v16l4-4h12a2 2 0 0 0 2-2v-2.7"
}], ["circle", {
  cx: "18",
  cy: "6",
  r: "3"
}]];
const MessageSquareLock = [["path", {
  d: "M19 15v-2a2 2 0 1 0-4 0v2"
}], ["path", {
  d: "M9 17H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v3.5"
}], ["rect", {
  x: "13",
  y: "15",
  width: "8",
  height: "5",
  rx: "1"
}]];
const MessageSquareHeart = [["path", {
  d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
}], ["path", {
  d: "M14.8 7.5a1.84 1.84 0 0 0-2.6 0l-.2.3-.3-.3a1.84 1.84 0 1 0-2.4 2.8L12 13l2.7-2.7c.9-.9.8-2.1.1-2.8"
}]];
const MessageSquareMore = [["path", {
  d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
}], ["path", {
  d: "M8 10h.01"
}], ["path", {
  d: "M12 10h.01"
}], ["path", {
  d: "M16 10h.01"
}]];
const MessageSquareOff = [["path", {
  d: "M21 15V5a2 2 0 0 0-2-2H9"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M3.6 3.6c-.4.3-.6.8-.6 1.4v16l4-4h10"
}]];
const MessageSquareQuote = [["path", {
  d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
}], ["path", {
  d: "M8 12a2 2 0 0 0 2-2V8H8"
}], ["path", {
  d: "M14 12a2 2 0 0 0 2-2V8h-2"
}]];
const MessageSquarePlus = [["path", {
  d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
}], ["path", {
  d: "M12 7v6"
}], ["path", {
  d: "M9 10h6"
}]];
const MessageSquareReply = [["path", {
  d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
}], ["path", {
  d: "m10 7-3 3 3 3"
}], ["path", {
  d: "M17 13v-1a2 2 0 0 0-2-2H7"
}]];
const MessageSquareShare = [["path", {
  d: "M21 12v3a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h7"
}], ["path", {
  d: "M16 3h5v5"
}], ["path", {
  d: "m16 8 5-5"
}]];
const MessageSquareText = [["path", {
  d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
}], ["path", {
  d: "M13 8H7"
}], ["path", {
  d: "M17 12H7"
}]];
const MessageSquareWarning = [["path", {
  d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
}], ["path", {
  d: "M12 7v2"
}], ["path", {
  d: "M12 13h.01"
}]];
const MessageSquareX = [["path", {
  d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
}], ["path", {
  d: "m14.5 7.5-5 5"
}], ["path", {
  d: "m9.5 7.5 5 5"
}]];
const MessageSquare = [["path", {
  d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
}]];
const MessagesSquare = [["path", {
  d: "M14 9a2 2 0 0 1-2 2H6l-4 4V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2z"
}], ["path", {
  d: "M18 9h2a2 2 0 0 1 2 2v11l-4-4h-6a2 2 0 0 1-2-2v-1"
}]];
const MicOff = [["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}], ["path", {
  d: "M18.89 13.23A7.12 7.12 0 0 0 19 12v-2"
}], ["path", {
  d: "M5 10v2a7 7 0 0 0 12 5"
}], ["path", {
  d: "M15 9.34V5a3 3 0 0 0-5.68-1.33"
}], ["path", {
  d: "M9 9v3a3 3 0 0 0 5.12 2.12"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "19",
  y2: "22"
}]];
const MicVocal = [["path", {
  d: "m11 7.601-5.994 8.19a1 1 0 0 0 .1 1.298l.817.818a1 1 0 0 0 1.314.087L15.09 12"
}], ["path", {
  d: "M16.5 21.174C15.5 20.5 14.372 20 13 20c-2.058 0-3.928 2.356-6 2-2.072-.356-2.775-3.369-1.5-4.5"
}], ["circle", {
  cx: "16",
  cy: "7",
  r: "5"
}]];
const Mic = [["path", {
  d: "M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"
}], ["path", {
  d: "M19 10v2a7 7 0 0 1-14 0v-2"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "19",
  y2: "22"
}]];
const Microchip = [["path", {
  d: "M18 12h2"
}], ["path", {
  d: "M18 16h2"
}], ["path", {
  d: "M18 20h2"
}], ["path", {
  d: "M18 4h2"
}], ["path", {
  d: "M18 8h2"
}], ["path", {
  d: "M4 12h2"
}], ["path", {
  d: "M4 16h2"
}], ["path", {
  d: "M4 20h2"
}], ["path", {
  d: "M4 4h2"
}], ["path", {
  d: "M4 8h2"
}], ["path", {
  d: "M8 2a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-1.5c-.276 0-.494.227-.562.495a2 2 0 0 1-3.876 0C9.994 2.227 9.776 2 9.5 2z"
}]];
const Microscope = [["path", {
  d: "M6 18h8"
}], ["path", {
  d: "M3 22h18"
}], ["path", {
  d: "M14 22a7 7 0 1 0 0-14h-1"
}], ["path", {
  d: "M9 14h2"
}], ["path", {
  d: "M9 12a2 2 0 0 1-2-2V6h6v4a2 2 0 0 1-2 2Z"
}], ["path", {
  d: "M12 6V3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3"
}]];
const Microwave = [["rect", {
  width: "20",
  height: "15",
  x: "2",
  y: "4",
  rx: "2"
}], ["rect", {
  width: "8",
  height: "7",
  x: "6",
  y: "8",
  rx: "1"
}], ["path", {
  d: "M18 8v7"
}], ["path", {
  d: "M6 19v2"
}], ["path", {
  d: "M18 19v2"
}]];
const Milestone = [["path", {
  d: "M12 13v8"
}], ["path", {
  d: "M12 3v3"
}], ["path", {
  d: "M4 6a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h13a2 2 0 0 0 1.152-.365l3.424-2.317a1 1 0 0 0 0-1.635l-3.424-2.318A2 2 0 0 0 17 6z"
}]];
const MilkOff = [["path", {
  d: "M8 2h8"
}], ["path", {
  d: "M9 2v1.343M15 2v2.789a4 4 0 0 0 .672 2.219l.656.984a4 4 0 0 1 .672 2.22v1.131M7.8 7.8l-.128.192A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-3"
}], ["path", {
  d: "M7 15a6.47 6.47 0 0 1 5 0 6.472 6.472 0 0 0 3.435.435"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Milk = [["path", {
  d: "M8 2h8"
}], ["path", {
  d: "M9 2v2.789a4 4 0 0 1-.672 2.219l-.656.984A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-9.789a4 4 0 0 0-.672-2.219l-.656-.984A4 4 0 0 1 15 4.788V2"
}], ["path", {
  d: "M7 15a6.472 6.472 0 0 1 5 0 6.47 6.47 0 0 0 5 0"
}]];
const Minimize2 = [["polyline", {
  points: "4 14 10 14 10 20"
}], ["polyline", {
  points: "20 10 14 10 14 4"
}], ["line", {
  x1: "14",
  x2: "21",
  y1: "10",
  y2: "3"
}], ["line", {
  x1: "3",
  x2: "10",
  y1: "21",
  y2: "14"
}]];
const Minimize = [["path", {
  d: "M8 3v3a2 2 0 0 1-2 2H3"
}], ["path", {
  d: "M21 8h-3a2 2 0 0 1-2-2V3"
}], ["path", {
  d: "M3 16h3a2 2 0 0 1 2 2v3"
}], ["path", {
  d: "M16 21v-3a2 2 0 0 1 2-2h3"
}]];
const Minus = [["path", {
  d: "M5 12h14"
}]];
const MonitorCheck = [["path", {
  d: "m9 10 2 2 4-4"
}], ["rect", {
  width: "20",
  height: "14",
  x: "2",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M12 17v4"
}], ["path", {
  d: "M8 21h8"
}]];
const MonitorCog = [["path", {
  d: "M12 17v4"
}], ["path", {
  d: "m15.2 4.9-.9-.4"
}], ["path", {
  d: "m15.2 7.1-.9.4"
}], ["path", {
  d: "m16.9 3.2-.4-.9"
}], ["path", {
  d: "m16.9 8.8-.4.9"
}], ["path", {
  d: "m19.5 2.3-.4.9"
}], ["path", {
  d: "m19.5 9.7-.4-.9"
}], ["path", {
  d: "m21.7 4.5-.9.4"
}], ["path", {
  d: "m21.7 7.5-.9-.4"
}], ["path", {
  d: "M22 13v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7"
}], ["path", {
  d: "M8 21h8"
}], ["circle", {
  cx: "18",
  cy: "6",
  r: "3"
}]];
const MonitorDot = [["circle", {
  cx: "19",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M22 12v3a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h9"
}], ["path", {
  d: "M12 17v4"
}], ["path", {
  d: "M8 21h8"
}]];
const MonitorDown = [["path", {
  d: "M12 13V7"
}], ["path", {
  d: "m15 10-3 3-3-3"
}], ["rect", {
  width: "20",
  height: "14",
  x: "2",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M12 17v4"
}], ["path", {
  d: "M8 21h8"
}]];
const MonitorOff = [["path", {
  d: "M17 17H4a2 2 0 0 1-2-2V5c0-1.5 1-2 1-2"
}], ["path", {
  d: "M22 15V5a2 2 0 0 0-2-2H9"
}], ["path", {
  d: "M8 21h8"
}], ["path", {
  d: "M12 17v4"
}], ["path", {
  d: "m2 2 20 20"
}]];
const MonitorPause = [["path", {
  d: "M10 13V7"
}], ["path", {
  d: "M14 13V7"
}], ["rect", {
  width: "20",
  height: "14",
  x: "2",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M12 17v4"
}], ["path", {
  d: "M8 21h8"
}]];
const MonitorPlay = [["path", {
  d: "M10 7.75a.75.75 0 0 1 1.142-.638l3.664 2.249a.75.75 0 0 1 0 1.278l-3.664 2.25a.75.75 0 0 1-1.142-.64z"
}], ["path", {
  d: "M12 17v4"
}], ["path", {
  d: "M8 21h8"
}], ["rect", {
  x: "2",
  y: "3",
  width: "20",
  height: "14",
  rx: "2"
}]];
const MonitorSmartphone = [["path", {
  d: "M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8"
}], ["path", {
  d: "M10 19v-3.96 3.15"
}], ["path", {
  d: "M7 19h5"
}], ["rect", {
  width: "6",
  height: "10",
  x: "16",
  y: "12",
  rx: "2"
}]];
const MonitorSpeaker = [["path", {
  d: "M5.5 20H8"
}], ["path", {
  d: "M17 9h.01"
}], ["rect", {
  width: "10",
  height: "16",
  x: "12",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M8 6H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4"
}], ["circle", {
  cx: "17",
  cy: "15",
  r: "1"
}]];
const MonitorStop = [["path", {
  d: "M12 17v4"
}], ["path", {
  d: "M8 21h8"
}], ["rect", {
  x: "2",
  y: "3",
  width: "20",
  height: "14",
  rx: "2"
}], ["rect", {
  x: "9",
  y: "7",
  width: "6",
  height: "6",
  rx: "1"
}]];
const MonitorUp = [["path", {
  d: "m9 10 3-3 3 3"
}], ["path", {
  d: "M12 13V7"
}], ["rect", {
  width: "20",
  height: "14",
  x: "2",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M12 17v4"
}], ["path", {
  d: "M8 21h8"
}]];
const MonitorX = [["path", {
  d: "m14.5 12.5-5-5"
}], ["path", {
  d: "m9.5 12.5 5-5"
}], ["rect", {
  width: "20",
  height: "14",
  x: "2",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M12 17v4"
}], ["path", {
  d: "M8 21h8"
}]];
const Monitor = [["rect", {
  width: "20",
  height: "14",
  x: "2",
  y: "3",
  rx: "2"
}], ["line", {
  x1: "8",
  x2: "16",
  y1: "21",
  y2: "21"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "17",
  y2: "21"
}]];
const MoonStar = [["path", {
  d: "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9"
}], ["path", {
  d: "M20 3v4"
}], ["path", {
  d: "M22 5h-4"
}]];
const Moon = [["path", {
  d: "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"
}]];
const MountainSnow = [["path", {
  d: "m8 3 4 8 5-5 5 15H2L8 3z"
}], ["path", {
  d: "M4.14 15.08c2.62-1.57 5.24-1.43 7.86.42 2.74 1.94 5.49 2 8.23.19"
}]];
const Mountain = [["path", {
  d: "m8 3 4 8 5-5 5 15H2L8 3z"
}]];
const MouseOff = [["path", {
  d: "M12 6v.343"
}], ["path", {
  d: "M18.218 18.218A7 7 0 0 1 5 15V9a7 7 0 0 1 .782-3.218"
}], ["path", {
  d: "M19 13.343V9A7 7 0 0 0 8.56 2.902"
}], ["path", {
  d: "M22 22 2 2"
}]];
const MousePointer2 = [["path", {
  d: "M4.037 4.688a.495.495 0 0 1 .651-.651l16 6.5a.5.5 0 0 1-.063.947l-6.124 1.58a2 2 0 0 0-1.438 1.435l-1.579 6.126a.5.5 0 0 1-.947.063z"
}]];
const MousePointerBan = [["path", {
  d: "M2.034 2.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.944L8.204 7.545a1 1 0 0 0-.66.66l-1.066 3.443a.5.5 0 0 1-.944.033z"
}], ["circle", {
  cx: "16",
  cy: "16",
  r: "6"
}], ["path", {
  d: "m11.8 11.8 8.4 8.4"
}]];
const MousePointerClick = [["path", {
  d: "M14 4.1 12 6"
}], ["path", {
  d: "m5.1 8-2.9-.8"
}], ["path", {
  d: "m6 12-1.9 2"
}], ["path", {
  d: "M7.2 2.2 8 5.1"
}], ["path", {
  d: "M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z"
}]];
const MousePointer = [["path", {
  d: "M12.586 12.586 19 19"
}], ["path", {
  d: "M3.688 3.037a.497.497 0 0 0-.651.651l6.5 15.999a.501.501 0 0 0 .947-.062l1.569-6.083a2 2 0 0 1 1.448-1.479l6.124-1.579a.5.5 0 0 0 .063-.947z"
}]];
const Mouse = [["rect", {
  x: "5",
  y: "2",
  width: "14",
  height: "20",
  rx: "7"
}], ["path", {
  d: "M12 6v4"
}]];
const Move3d = [["path", {
  d: "M5 3v16h16"
}], ["path", {
  d: "m5 19 6-6"
}], ["path", {
  d: "m2 6 3-3 3 3"
}], ["path", {
  d: "m18 16 3 3-3 3"
}]];
const MoveDiagonal2 = [["path", {
  d: "M19 13v6h-6"
}], ["path", {
  d: "M5 11V5h6"
}], ["path", {
  d: "m5 5 14 14"
}]];
const MoveDiagonal = [["path", {
  d: "M11 19H5v-6"
}], ["path", {
  d: "M13 5h6v6"
}], ["path", {
  d: "M19 5 5 19"
}]];
const MoveDownLeft = [["path", {
  d: "M11 19H5V13"
}], ["path", {
  d: "M19 5L5 19"
}]];
const MoveDownRight = [["path", {
  d: "M19 13V19H13"
}], ["path", {
  d: "M5 5L19 19"
}]];
const MoveDown = [["path", {
  d: "M8 18L12 22L16 18"
}], ["path", {
  d: "M12 2V22"
}]];
const MoveHorizontal = [["path", {
  d: "m18 8 4 4-4 4"
}], ["path", {
  d: "M2 12h20"
}], ["path", {
  d: "m6 8-4 4 4 4"
}]];
const MoveLeft = [["path", {
  d: "M6 8L2 12L6 16"
}], ["path", {
  d: "M2 12H22"
}]];
const MoveRight = [["path", {
  d: "M18 8L22 12L18 16"
}], ["path", {
  d: "M2 12H22"
}]];
const MoveUpLeft = [["path", {
  d: "M5 11V5H11"
}], ["path", {
  d: "M5 5L19 19"
}]];
const MoveUpRight = [["path", {
  d: "M13 5H19V11"
}], ["path", {
  d: "M19 5L5 19"
}]];
const MoveUp = [["path", {
  d: "M8 6L12 2L16 6"
}], ["path", {
  d: "M12 2V22"
}]];
const MoveVertical = [["path", {
  d: "M12 2v20"
}], ["path", {
  d: "m8 18 4 4 4-4"
}], ["path", {
  d: "m8 6 4-4 4 4"
}]];
const Move = [["path", {
  d: "M12 2v20"
}], ["path", {
  d: "m15 19-3 3-3-3"
}], ["path", {
  d: "m19 9 3 3-3 3"
}], ["path", {
  d: "M2 12h20"
}], ["path", {
  d: "m5 9-3 3 3 3"
}], ["path", {
  d: "m9 5 3-3 3 3"
}]];
const Music2 = [["circle", {
  cx: "8",
  cy: "18",
  r: "4"
}], ["path", {
  d: "M12 18V2l7 4"
}]];
const Music3 = [["circle", {
  cx: "12",
  cy: "18",
  r: "4"
}], ["path", {
  d: "M16 18V2"
}]];
const Music4 = [["path", {
  d: "M9 18V5l12-2v13"
}], ["path", {
  d: "m9 9 12-2"
}], ["circle", {
  cx: "6",
  cy: "18",
  r: "3"
}], ["circle", {
  cx: "18",
  cy: "16",
  r: "3"
}]];
const Music = [["path", {
  d: "M9 18V5l12-2v13"
}], ["circle", {
  cx: "6",
  cy: "18",
  r: "3"
}], ["circle", {
  cx: "18",
  cy: "16",
  r: "3"
}]];
const Navigation2Off = [["path", {
  d: "M9.31 9.31 5 21l7-4 7 4-1.17-3.17"
}], ["path", {
  d: "M14.53 8.88 12 2l-1.17 3.17"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Navigation2 = [["polygon", {
  points: "12 2 19 21 12 17 5 21 12 2"
}]];
const NavigationOff = [["path", {
  d: "M8.43 8.43 3 11l8 2 2 8 2.57-5.43"
}], ["path", {
  d: "M17.39 11.73 22 2l-9.73 4.61"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Navigation = [["polygon", {
  points: "3 11 22 2 13 21 11 13 3 11"
}]];
const Network = [["rect", {
  x: "16",
  y: "16",
  width: "6",
  height: "6",
  rx: "1"
}], ["rect", {
  x: "2",
  y: "16",
  width: "6",
  height: "6",
  rx: "1"
}], ["rect", {
  x: "9",
  y: "2",
  width: "6",
  height: "6",
  rx: "1"
}], ["path", {
  d: "M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3"
}], ["path", {
  d: "M12 12V8"
}]];
const Newspaper = [["path", {
  d: "M15 18h-5"
}], ["path", {
  d: "M18 14h-8"
}], ["path", {
  d: "M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-4 0v-9a2 2 0 0 1 2-2h2"
}], ["rect", {
  x: "10",
  y: "6",
  width: "8",
  height: "4",
  rx: "1"
}]];
const Nfc = [["path", {
  d: "M6 8.32a7.43 7.43 0 0 1 0 7.36"
}], ["path", {
  d: "M9.46 6.21a11.76 11.76 0 0 1 0 11.58"
}], ["path", {
  d: "M12.91 4.1a15.91 15.91 0 0 1 .01 15.8"
}], ["path", {
  d: "M16.37 2a20.16 20.16 0 0 1 0 20"
}]];
const NonBinary = [["path", {
  d: "M12 2v10"
}], ["path", {
  d: "m9 4 6 4"
}], ["path", {
  d: "m9 8 6-4"
}], ["circle", {
  cx: "12",
  cy: "17",
  r: "5"
}]];
const NotebookPen = [["path", {
  d: "M13.4 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-7.4"
}], ["path", {
  d: "M2 6h4"
}], ["path", {
  d: "M2 10h4"
}], ["path", {
  d: "M2 14h4"
}], ["path", {
  d: "M2 18h4"
}], ["path", {
  d: "M21.378 5.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
}]];
const NotebookTabs = [["path", {
  d: "M2 6h4"
}], ["path", {
  d: "M2 10h4"
}], ["path", {
  d: "M2 14h4"
}], ["path", {
  d: "M2 18h4"
}], ["rect", {
  width: "16",
  height: "20",
  x: "4",
  y: "2",
  rx: "2"
}], ["path", {
  d: "M15 2v20"
}], ["path", {
  d: "M15 7h5"
}], ["path", {
  d: "M15 12h5"
}], ["path", {
  d: "M15 17h5"
}]];
const NotebookText = [["path", {
  d: "M2 6h4"
}], ["path", {
  d: "M2 10h4"
}], ["path", {
  d: "M2 14h4"
}], ["path", {
  d: "M2 18h4"
}], ["rect", {
  width: "16",
  height: "20",
  x: "4",
  y: "2",
  rx: "2"
}], ["path", {
  d: "M9.5 8h5"
}], ["path", {
  d: "M9.5 12H16"
}], ["path", {
  d: "M9.5 16H14"
}]];
const Notebook = [["path", {
  d: "M2 6h4"
}], ["path", {
  d: "M2 10h4"
}], ["path", {
  d: "M2 14h4"
}], ["path", {
  d: "M2 18h4"
}], ["rect", {
  width: "16",
  height: "20",
  x: "4",
  y: "2",
  rx: "2"
}], ["path", {
  d: "M16 2v20"
}]];
const NotepadTextDashed = [["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M12 2v4"
}], ["path", {
  d: "M16 2v4"
}], ["path", {
  d: "M16 4h2a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M20 12v2"
}], ["path", {
  d: "M20 18v2a2 2 0 0 1-2 2h-1"
}], ["path", {
  d: "M13 22h-2"
}], ["path", {
  d: "M7 22H6a2 2 0 0 1-2-2v-2"
}], ["path", {
  d: "M4 14v-2"
}], ["path", {
  d: "M4 8V6a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M8 10h6"
}], ["path", {
  d: "M8 14h8"
}], ["path", {
  d: "M8 18h5"
}]];
const NotepadText = [["path", {
  d: "M8 2v4"
}], ["path", {
  d: "M12 2v4"
}], ["path", {
  d: "M16 2v4"
}], ["rect", {
  width: "16",
  height: "18",
  x: "4",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M8 10h6"
}], ["path", {
  d: "M8 14h8"
}], ["path", {
  d: "M8 18h5"
}]];
const NutOff = [["path", {
  d: "M12 4V2"
}], ["path", {
  d: "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592a7.01 7.01 0 0 0 4.125-2.939"
}], ["path", {
  d: "M19 10v3.343"
}], ["path", {
  d: "M12 12c-1.349-.573-1.905-1.005-2.5-2-.546.902-1.048 1.353-2.5 2-1.018-.644-1.46-1.08-2-2-1.028.71-1.69.918-3 1 1.081-1.048 1.757-2.03 2-3 .194-.776.84-1.551 1.79-2.21m11.654 5.997c.887-.457 1.28-.891 1.556-1.787 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4-.74 0-1.461.068-2.15.192"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Nut = [["path", {
  d: "M12 4V2"
}], ["path", {
  d: "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592A7.003 7.003 0 0 0 19 14v-4"
}], ["path", {
  d: "M12 4C8 4 4.5 6 4 8c-.243.97-.919 1.952-2 3 1.31-.082 1.972-.29 3-1 .54.92.982 1.356 2 2 1.452-.647 1.954-1.098 2.5-2 .595.995 1.151 1.427 2.5 2 1.31-.621 1.862-1.058 2.5-2 .629.977 1.162 1.423 2.5 2 1.209-.548 1.68-.967 2-2 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4Z"
}]];
const OctagonAlert = [["path", {
  d: "M12 16h.01"
}], ["path", {
  d: "M12 8v4"
}], ["path", {
  d: "M15.312 2a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586l-4.688-4.688A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2z"
}]];
const OctagonMinus = [["path", {
  d: "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z"
}], ["path", {
  d: "M8 12h8"
}]];
const OctagonPause = [["path", {
  d: "M10 15V9"
}], ["path", {
  d: "M14 15V9"
}], ["path", {
  d: "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z"
}]];
const OctagonX = [["path", {
  d: "m15 9-6 6"
}], ["path", {
  d: "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z"
}], ["path", {
  d: "m9 9 6 6"
}]];
const Octagon = [["path", {
  d: "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z"
}]];
const Omega = [["path", {
  d: "M3 20h4.5a.5.5 0 0 0 .5-.5v-.282a.52.52 0 0 0-.247-.437 8 8 0 1 1 8.494-.001.52.52 0 0 0-.247.438v.282a.5.5 0 0 0 .5.5H21"
}]];
const Option = [["path", {
  d: "M3 3h6l6 18h6"
}], ["path", {
  d: "M14 3h7"
}]];
const Orbit = [["circle", {
  cx: "12",
  cy: "12",
  r: "3"
}], ["circle", {
  cx: "19",
  cy: "5",
  r: "2"
}], ["circle", {
  cx: "5",
  cy: "19",
  r: "2"
}], ["path", {
  d: "M10.4 21.9a10 10 0 0 0 9.941-15.416"
}], ["path", {
  d: "M13.5 2.1a10 10 0 0 0-9.841 15.416"
}]];
const Origami = [["path", {
  d: "M12 12V4a1 1 0 0 1 1-1h6.297a1 1 0 0 1 .651 1.759l-4.696 4.025"
}], ["path", {
  d: "m12 21-7.414-7.414A2 2 0 0 1 4 12.172V6.415a1.002 1.002 0 0 1 1.707-.707L20 20.009"
}], ["path", {
  d: "m12.214 3.381 8.414 14.966a1 1 0 0 1-.167 1.199l-1.168 1.163a1 1 0 0 1-.706.291H6.351a1 1 0 0 1-.625-.219L3.25 18.8a1 1 0 0 1 .631-1.781l4.165.027"
}]];
const Package2 = [["path", {
  d: "M3 9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9Z"
}], ["path", {
  d: "m3 9 2.45-4.9A2 2 0 0 1 7.24 3h9.52a2 2 0 0 1 1.8 1.1L21 9"
}], ["path", {
  d: "M12 3v6"
}]];
const PackageCheck = [["path", {
  d: "m16 16 2 2 4-4"
}], ["path", {
  d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"
}], ["path", {
  d: "m7.5 4.27 9 5.15"
}], ["polyline", {
  points: "3.29 7 12 12 20.71 7"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "22",
  y2: "12"
}]];
const PackageMinus = [["path", {
  d: "M16 16h6"
}], ["path", {
  d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"
}], ["path", {
  d: "m7.5 4.27 9 5.15"
}], ["polyline", {
  points: "3.29 7 12 12 20.71 7"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "22",
  y2: "12"
}]];
const PackageOpen = [["path", {
  d: "M12 22v-9"
}], ["path", {
  d: "M15.17 2.21a1.67 1.67 0 0 1 1.63 0L21 4.57a1.93 1.93 0 0 1 0 3.36L8.82 14.79a1.655 1.655 0 0 1-1.64 0L3 12.43a1.93 1.93 0 0 1 0-3.36z"
}], ["path", {
  d: "M20 13v3.87a2.06 2.06 0 0 1-1.11 1.83l-6 3.08a1.93 1.93 0 0 1-1.78 0l-6-3.08A2.06 2.06 0 0 1 4 16.87V13"
}], ["path", {
  d: "M21 12.43a1.93 1.93 0 0 0 0-3.36L8.83 2.2a1.64 1.64 0 0 0-1.63 0L3 4.57a1.93 1.93 0 0 0 0 3.36l12.18 6.86a1.636 1.636 0 0 0 1.63 0z"
}]];
const PackagePlus = [["path", {
  d: "M16 16h6"
}], ["path", {
  d: "M19 13v6"
}], ["path", {
  d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"
}], ["path", {
  d: "m7.5 4.27 9 5.15"
}], ["polyline", {
  points: "3.29 7 12 12 20.71 7"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "22",
  y2: "12"
}]];
const PackageSearch = [["path", {
  d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"
}], ["path", {
  d: "m7.5 4.27 9 5.15"
}], ["polyline", {
  points: "3.29 7 12 12 20.71 7"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "22",
  y2: "12"
}], ["circle", {
  cx: "18.5",
  cy: "15.5",
  r: "2.5"
}], ["path", {
  d: "M20.27 17.27 22 19"
}]];
const PackageX = [["path", {
  d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"
}], ["path", {
  d: "m7.5 4.27 9 5.15"
}], ["polyline", {
  points: "3.29 7 12 12 20.71 7"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "22",
  y2: "12"
}], ["path", {
  d: "m17 13 5 5m-5 0 5-5"
}]];
const Package = [["path", {
  d: "M11 21.73a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73z"
}], ["path", {
  d: "M12 22V12"
}], ["polyline", {
  points: "3.29 7 12 12 20.71 7"
}], ["path", {
  d: "m7.5 4.27 9 5.15"
}]];
const PaintBucket = [["path", {
  d: "m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z"
}], ["path", {
  d: "m5 2 5 5"
}], ["path", {
  d: "M2 13h15"
}], ["path", {
  d: "M22 20a2 2 0 1 1-4 0c0-1.6 1.7-2.4 2-4 .3 1.6 2 2.4 2 4Z"
}]];
const PaintRoller = [["rect", {
  width: "16",
  height: "6",
  x: "2",
  y: "2",
  rx: "2"
}], ["path", {
  d: "M10 16v-2a2 2 0 0 1 2-2h8a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2"
}], ["rect", {
  width: "4",
  height: "6",
  x: "8",
  y: "16",
  rx: "1"
}]];
const PaintbrushVertical = [["path", {
  d: "M10 2v2"
}], ["path", {
  d: "M14 2v4"
}], ["path", {
  d: "M17 2a1 1 0 0 1 1 1v9H6V3a1 1 0 0 1 1-1z"
}], ["path", {
  d: "M6 12a1 1 0 0 0-1 1v1a2 2 0 0 0 2 2h2a1 1 0 0 1 1 1v2.9a2 2 0 1 0 4 0V17a1 1 0 0 1 1-1h2a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1"
}]];
const Paintbrush = [["path", {
  d: "m14.622 17.897-10.68-2.913"
}], ["path", {
  d: "M18.376 2.622a1 1 0 1 1 3.002 3.002L17.36 9.643a.5.5 0 0 0 0 .707l.944.944a2.41 2.41 0 0 1 0 3.408l-.944.944a.5.5 0 0 1-.707 0L8.354 7.348a.5.5 0 0 1 0-.707l.944-.944a2.41 2.41 0 0 1 3.408 0l.944.944a.5.5 0 0 0 .707 0z"
}], ["path", {
  d: "M9 8c-1.804 2.71-3.97 3.46-6.583 3.948a.507.507 0 0 0-.302.819l7.32 8.883a1 1 0 0 0 1.185.204C12.735 20.405 16 16.792 16 15"
}]];
const Palette = [["circle", {
  cx: "13.5",
  cy: "6.5",
  r: ".5",
  fill: "currentColor"
}], ["circle", {
  cx: "17.5",
  cy: "10.5",
  r: ".5",
  fill: "currentColor"
}], ["circle", {
  cx: "8.5",
  cy: "7.5",
  r: ".5",
  fill: "currentColor"
}], ["circle", {
  cx: "6.5",
  cy: "12.5",
  r: ".5",
  fill: "currentColor"
}], ["path", {
  d: "M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.437-1.125-.29-.289-.438-.652-.438-1.125a1.64 1.64 0 0 1 1.668-1.668h1.996c3.051 0 5.555-2.503 5.555-5.554C21.965 6.012 17.461 2 12 2z"
}]];
const PanelBottomClose = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M3 15h18"
}], ["path", {
  d: "m15 8-3 3-3-3"
}]];
const PanelBottomDashed = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M14 15h1"
}], ["path", {
  d: "M19 15h2"
}], ["path", {
  d: "M3 15h2"
}], ["path", {
  d: "M9 15h1"
}]];
const PanelBottomOpen = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M3 15h18"
}], ["path", {
  d: "m9 10 3-3 3 3"
}]];
const PanelBottom = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M3 15h18"
}]];
const PanelLeftClose = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M9 3v18"
}], ["path", {
  d: "m16 15-3-3 3-3"
}]];
const PanelLeftDashed = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M9 14v1"
}], ["path", {
  d: "M9 19v2"
}], ["path", {
  d: "M9 3v2"
}], ["path", {
  d: "M9 9v1"
}]];
const PanelLeftOpen = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M9 3v18"
}], ["path", {
  d: "m14 9 3 3-3 3"
}]];
const PanelLeft = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M9 3v18"
}]];
const PanelRightClose = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M15 3v18"
}], ["path", {
  d: "m8 9 3 3-3 3"
}]];
const PanelRightDashed = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M15 14v1"
}], ["path", {
  d: "M15 19v2"
}], ["path", {
  d: "M15 3v2"
}], ["path", {
  d: "M15 9v1"
}]];
const PanelRightOpen = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M15 3v18"
}], ["path", {
  d: "m10 15-3-3 3-3"
}]];
const PanelRight = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M15 3v18"
}]];
const PanelTopClose = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M3 9h18"
}], ["path", {
  d: "m9 16 3-3 3 3"
}]];
const PanelTopOpen = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M3 9h18"
}], ["path", {
  d: "m15 14-3 3-3-3"
}]];
const PanelTopDashed = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M14 9h1"
}], ["path", {
  d: "M19 9h2"
}], ["path", {
  d: "M3 9h2"
}], ["path", {
  d: "M9 9h1"
}]];
const PanelTop = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M3 9h18"
}]];
const PanelsLeftBottom = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M9 3v18"
}], ["path", {
  d: "M9 15h12"
}]];
const PanelsRightBottom = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M3 15h12"
}], ["path", {
  d: "M15 3v18"
}]];
const PanelsTopLeft = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M3 9h18"
}], ["path", {
  d: "M9 21V9"
}]];
const Paperclip = [["path", {
  d: "M13.234 20.252 21 12.3"
}], ["path", {
  d: "m16 6-8.414 8.586a2 2 0 0 0 0 2.828 2 2 0 0 0 2.828 0l8.414-8.586a4 4 0 0 0 0-5.656 4 4 0 0 0-5.656 0l-8.415 8.585a6 6 0 1 0 8.486 8.486"
}]];
const Parentheses = [["path", {
  d: "M8 21s-4-3-4-9 4-9 4-9"
}], ["path", {
  d: "M16 3s4 3 4 9-4 9-4 9"
}]];
const ParkingMeter = [["path", {
  d: "M11 15h2"
}], ["path", {
  d: "M12 12v3"
}], ["path", {
  d: "M12 19v3"
}], ["path", {
  d: "M15.282 19a1 1 0 0 0 .948-.68l2.37-6.988a7 7 0 1 0-13.2 0l2.37 6.988a1 1 0 0 0 .948.68z"
}], ["path", {
  d: "M9 9a3 3 0 1 1 6 0"
}]];
const PartyPopper = [["path", {
  d: "M5.8 11.3 2 22l10.7-3.79"
}], ["path", {
  d: "M4 3h.01"
}], ["path", {
  d: "M22 8h.01"
}], ["path", {
  d: "M15 2h.01"
}], ["path", {
  d: "M22 20h.01"
}], ["path", {
  d: "m22 2-2.24.75a2.9 2.9 0 0 0-1.96 3.12c.1.86-.57 1.63-1.45 1.63h-.38c-.86 0-1.6.6-1.76 1.44L14 10"
}], ["path", {
  d: "m22 13-.82-.33c-.86-.34-1.82.2-1.98 1.11c-.11.7-.72 1.22-1.43 1.22H17"
}], ["path", {
  d: "m11 2 .33.82c.34.86-.2 1.82-1.11 1.98C9.52 4.9 9 5.52 9 6.23V7"
}], ["path", {
  d: "M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z"
}]];
const Pause = [["rect", {
  x: "14",
  y: "4",
  width: "4",
  height: "16",
  rx: "1"
}], ["rect", {
  x: "6",
  y: "4",
  width: "4",
  height: "16",
  rx: "1"
}]];
const PawPrint = [["circle", {
  cx: "11",
  cy: "4",
  r: "2"
}], ["circle", {
  cx: "18",
  cy: "8",
  r: "2"
}], ["circle", {
  cx: "20",
  cy: "16",
  r: "2"
}], ["path", {
  d: "M9 10a5 5 0 0 1 5 5v3.5a3.5 3.5 0 0 1-6.84 1.045Q6.52 17.48 4.46 16.84A3.5 3.5 0 0 1 5.5 10Z"
}]];
const PcCase = [["rect", {
  width: "14",
  height: "20",
  x: "5",
  y: "2",
  rx: "2"
}], ["path", {
  d: "M15 14h.01"
}], ["path", {
  d: "M9 6h6"
}], ["path", {
  d: "M9 10h6"
}]];
const PenLine = [["path", {
  d: "M12 20h9"
}], ["path", {
  d: "M16.376 3.622a1 1 0 0 1 3.002 3.002L7.368 18.635a2 2 0 0 1-.855.506l-2.872.838a.5.5 0 0 1-.62-.62l.838-2.872a2 2 0 0 1 .506-.854z"
}]];
const PenOff = [["path", {
  d: "m10 10-6.157 6.162a2 2 0 0 0-.5.833l-1.322 4.36a.5.5 0 0 0 .622.624l4.358-1.323a2 2 0 0 0 .83-.5L14 13.982"
}], ["path", {
  d: "m12.829 7.172 4.359-4.346a1 1 0 1 1 3.986 3.986l-4.353 4.353"
}], ["path", {
  d: "m2 2 20 20"
}]];
const PenTool = [["path", {
  d: "M15.707 21.293a1 1 0 0 1-1.414 0l-1.586-1.586a1 1 0 0 1 0-1.414l5.586-5.586a1 1 0 0 1 1.414 0l1.586 1.586a1 1 0 0 1 0 1.414z"
}], ["path", {
  d: "m18 13-1.375-6.874a1 1 0 0 0-.746-.776L3.235 2.028a1 1 0 0 0-1.207 1.207L5.35 15.879a1 1 0 0 0 .776.746L13 18"
}], ["path", {
  d: "m2.3 2.3 7.286 7.286"
}], ["circle", {
  cx: "11",
  cy: "11",
  r: "2"
}]];
const Pen = [["path", {
  d: "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"
}]];
const PencilLine = [["path", {
  d: "M12 20h9"
}], ["path", {
  d: "M16.376 3.622a1 1 0 0 1 3.002 3.002L7.368 18.635a2 2 0 0 1-.855.506l-2.872.838a.5.5 0 0 1-.62-.62l.838-2.872a2 2 0 0 1 .506-.854z"
}], ["path", {
  d: "m15 5 3 3"
}]];
const PencilOff = [["path", {
  d: "m10 10-6.157 6.162a2 2 0 0 0-.5.833l-1.322 4.36a.5.5 0 0 0 .622.624l4.358-1.323a2 2 0 0 0 .83-.5L14 13.982"
}], ["path", {
  d: "m12.829 7.172 4.359-4.346a1 1 0 1 1 3.986 3.986l-4.353 4.353"
}], ["path", {
  d: "m15 5 4 4"
}], ["path", {
  d: "m2 2 20 20"
}]];
const PencilRuler = [["path", {
  d: "M13 7 8.7 2.7a2.41 2.41 0 0 0-3.4 0L2.7 5.3a2.41 2.41 0 0 0 0 3.4L7 13"
}], ["path", {
  d: "m8 6 2-2"
}], ["path", {
  d: "m18 16 2-2"
}], ["path", {
  d: "m17 11 4.3 4.3c.94.94.94 2.46 0 3.4l-2.6 2.6c-.94.94-2.46.94-3.4 0L11 17"
}], ["path", {
  d: "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"
}], ["path", {
  d: "m15 5 4 4"
}]];
const Pencil = [["path", {
  d: "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"
}], ["path", {
  d: "m15 5 4 4"
}]];
const Pentagon = [["path", {
  d: "M10.83 2.38a2 2 0 0 1 2.34 0l8 5.74a2 2 0 0 1 .73 2.25l-3.04 9.26a2 2 0 0 1-1.9 1.37H7.04a2 2 0 0 1-1.9-1.37L2.1 10.37a2 2 0 0 1 .73-2.25z"
}]];
const Percent = [["line", {
  x1: "19",
  x2: "5",
  y1: "5",
  y2: "19"
}], ["circle", {
  cx: "6.5",
  cy: "6.5",
  r: "2.5"
}], ["circle", {
  cx: "17.5",
  cy: "17.5",
  r: "2.5"
}]];
const PersonStanding = [["circle", {
  cx: "12",
  cy: "5",
  r: "1"
}], ["path", {
  d: "m9 20 3-6 3 6"
}], ["path", {
  d: "m6 8 6 2 6-2"
}], ["path", {
  d: "M12 10v4"
}]];
const PhilippinePeso = [["path", {
  d: "M20 11H4"
}], ["path", {
  d: "M20 7H4"
}], ["path", {
  d: "M7 21V4a1 1 0 0 1 1-1h4a1 1 0 0 1 0 12H7"
}]];
const PhoneCall = [["path", {
  d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
}], ["path", {
  d: "M14.05 2a9 9 0 0 1 8 7.94"
}], ["path", {
  d: "M14.05 6A5 5 0 0 1 18 10"
}]];
const PhoneForwarded = [["polyline", {
  points: "18 2 22 6 18 10"
}], ["line", {
  x1: "14",
  x2: "22",
  y1: "6",
  y2: "6"
}], ["path", {
  d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
}]];
const PhoneIncoming = [["polyline", {
  points: "16 2 16 8 22 8"
}], ["line", {
  x1: "22",
  x2: "16",
  y1: "2",
  y2: "8"
}], ["path", {
  d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
}]];
const PhoneMissed = [["line", {
  x1: "22",
  x2: "16",
  y1: "2",
  y2: "8"
}], ["line", {
  x1: "16",
  x2: "22",
  y1: "2",
  y2: "8"
}], ["path", {
  d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
}]];
const PhoneOff = [["path", {
  d: "M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"
}], ["line", {
  x1: "22",
  x2: "2",
  y1: "2",
  y2: "22"
}]];
const PhoneOutgoing = [["polyline", {
  points: "22 8 22 2 16 2"
}], ["line", {
  x1: "16",
  x2: "22",
  y1: "8",
  y2: "2"
}], ["path", {
  d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
}]];
const Phone = [["path", {
  d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
}]];
const Pi = [["line", {
  x1: "9",
  x2: "9",
  y1: "4",
  y2: "20"
}], ["path", {
  d: "M4 7c0-1.7 1.3-3 3-3h13"
}], ["path", {
  d: "M18 20c-1.7 0-3-1.3-3-3V4"
}]];
const Piano = [["path", {
  d: "M18.5 8c-1.4 0-2.6-.8-3.2-2A6.87 6.87 0 0 0 2 9v11a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-8.5C22 9.6 20.4 8 18.5 8"
}], ["path", {
  d: "M2 14h20"
}], ["path", {
  d: "M6 14v4"
}], ["path", {
  d: "M10 14v4"
}], ["path", {
  d: "M14 14v4"
}], ["path", {
  d: "M18 14v4"
}]];
const Pickaxe = [["path", {
  d: "M14.531 12.469 6.619 20.38a1 1 0 1 1-3-3l7.912-7.912"
}], ["path", {
  d: "M15.686 4.314A12.5 12.5 0 0 0 5.461 2.958 1 1 0 0 0 5.58 4.71a22 22 0 0 1 6.318 3.393"
}], ["path", {
  d: "M17.7 3.7a1 1 0 0 0-1.4 0l-4.6 4.6a1 1 0 0 0 0 1.4l2.6 2.6a1 1 0 0 0 1.4 0l4.6-4.6a1 1 0 0 0 0-1.4z"
}], ["path", {
  d: "M19.686 8.314a12.501 12.501 0 0 1 1.356 10.225 1 1 0 0 1-1.751-.119 22 22 0 0 0-3.393-6.319"
}]];
const PictureInPicture2 = [["path", {
  d: "M21 9V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10c0 1.1.9 2 2 2h4"
}], ["rect", {
  width: "10",
  height: "7",
  x: "12",
  y: "13",
  rx: "2"
}]];
const PictureInPicture = [["path", {
  d: "M2 10h6V4"
}], ["path", {
  d: "m2 4 6 6"
}], ["path", {
  d: "M21 10V7a2 2 0 0 0-2-2h-7"
}], ["path", {
  d: "M3 14v2a2 2 0 0 0 2 2h3"
}], ["rect", {
  x: "12",
  y: "14",
  width: "10",
  height: "7",
  rx: "1"
}]];
const PiggyBank = [["path", {
  d: "M19 5c-1.5 0-2.8 1.4-3 2-3.5-1.5-11-.3-11 5 0 1.8 0 3 2 4.5V20h4v-2h3v2h4v-4c1-.5 1.7-1 2-2h2v-4h-2c0-1-.5-1.5-1-2V5z"
}], ["path", {
  d: "M2 9v1c0 1.1.9 2 2 2h1"
}], ["path", {
  d: "M16 11h.01"
}]];
const PilcrowLeft = [["path", {
  d: "M14 3v11"
}], ["path", {
  d: "M14 9h-3a3 3 0 0 1 0-6h9"
}], ["path", {
  d: "M18 3v11"
}], ["path", {
  d: "M22 18H2l4-4"
}], ["path", {
  d: "m6 22-4-4"
}]];
const PilcrowRight = [["path", {
  d: "M10 3v11"
}], ["path", {
  d: "M10 9H7a1 1 0 0 1 0-6h8"
}], ["path", {
  d: "M14 3v11"
}], ["path", {
  d: "m18 14 4 4H2"
}], ["path", {
  d: "m22 18-4 4"
}]];
const Pilcrow = [["path", {
  d: "M13 4v16"
}], ["path", {
  d: "M17 4v16"
}], ["path", {
  d: "M19 4H9.5a4.5 4.5 0 0 0 0 9H13"
}]];
const PillBottle = [["path", {
  d: "M18 11h-4a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h4"
}], ["path", {
  d: "M6 7v13a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7"
}], ["rect", {
  width: "16",
  height: "5",
  x: "4",
  y: "2",
  rx: "1"
}]];
const Pill = [["path", {
  d: "m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z"
}], ["path", {
  d: "m8.5 8.5 7 7"
}]];
const PinOff = [["path", {
  d: "M12 17v5"
}], ["path", {
  d: "M15 9.34V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H7.89"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M9 9v1.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h11"
}]];
const Pin = [["path", {
  d: "M12 17v5"
}], ["path", {
  d: "M9 10.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H8a2 2 0 0 0 0 4 1 1 0 0 1 1 1z"
}]];
const Pipette = [["path", {
  d: "m2 22 1-1h3l9-9"
}], ["path", {
  d: "M3 21v-3l9-9"
}], ["path", {
  d: "m15 6 3.4-3.4a2.1 2.1 0 1 1 3 3L18 9l.4.4a2.1 2.1 0 1 1-3 3l-3.8-3.8a2.1 2.1 0 1 1 3-3l.4.4Z"
}]];
const PlaneLanding = [["path", {
  d: "M2 22h20"
}], ["path", {
  d: "M3.77 10.77 2 9l2-4.5 1.1.55c.55.28.9.84.9 1.45s.35 1.17.9 1.45L8 8.5l3-6 1.05.53a2 2 0 0 1 1.09 1.52l.72 5.4a2 2 0 0 0 1.09 1.52l4.4 2.2c.42.22.78.55 1.01.96l.6 1.03c.49.88-.06 1.98-1.06 2.1l-1.18.15c-.47.06-.95-.02-1.37-.24L4.29 11.15a2 2 0 0 1-.52-.38Z"
}]];
const Pizza = [["path", {
  d: "m12 14-1 1"
}], ["path", {
  d: "m13.75 18.25-1.25 1.42"
}], ["path", {
  d: "M17.775 5.654a15.68 15.68 0 0 0-12.121 12.12"
}], ["path", {
  d: "M18.8 9.3a1 1 0 0 0 2.1 7.7"
}], ["path", {
  d: "M21.964 20.732a1 1 0 0 1-1.232 1.232l-18-5a1 1 0 0 1-.695-1.232A19.68 19.68 0 0 1 15.732 2.037a1 1 0 0 1 1.232.695z"
}]];
const PlaneTakeoff = [["path", {
  d: "M2 22h20"
}], ["path", {
  d: "M6.36 17.4 4 17l-2-4 1.1-.55a2 2 0 0 1 1.8 0l.17.1a2 2 0 0 0 1.8 0L8 12 5 6l.9-.45a2 2 0 0 1 2.09.2l4.02 3a2 2 0 0 0 2.1.2l4.19-2.06a2.41 2.41 0 0 1 1.73-.17L21 7a1.4 1.4 0 0 1 .87 1.99l-.38.76c-.23.46-.6.84-1.07 1.08L7.58 17.2a2 2 0 0 1-1.22.18Z"
}]];
const Plane = [["path", {
  d: "M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z"
}]];
const Play = [["polygon", {
  points: "6 3 20 12 6 21 6 3"
}]];
const Plug2 = [["path", {
  d: "M9 2v6"
}], ["path", {
  d: "M15 2v6"
}], ["path", {
  d: "M12 17v5"
}], ["path", {
  d: "M5 8h14"
}], ["path", {
  d: "M6 11V8h12v3a6 6 0 1 1-12 0Z"
}]];
const PlugZap = [["path", {
  d: "M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z"
}], ["path", {
  d: "m2 22 3-3"
}], ["path", {
  d: "M7.5 13.5 10 11"
}], ["path", {
  d: "M10.5 16.5 13 14"
}], ["path", {
  d: "m18 3-4 4h6l-4 4"
}]];
const Plus = [["path", {
  d: "M5 12h14"
}], ["path", {
  d: "M12 5v14"
}]];
const PocketKnife = [["path", {
  d: "M3 2v1c0 1 2 1 2 2S3 6 3 7s2 1 2 2-2 1-2 2 2 1 2 2"
}], ["path", {
  d: "M18 6h.01"
}], ["path", {
  d: "M6 18h.01"
}], ["path", {
  d: "M20.83 8.83a4 4 0 0 0-5.66-5.66l-12 12a4 4 0 1 0 5.66 5.66Z"
}], ["path", {
  d: "M18 11.66V22a4 4 0 0 0 4-4V6"
}]];
const Plug = [["path", {
  d: "M12 22v-5"
}], ["path", {
  d: "M9 8V2"
}], ["path", {
  d: "M15 8V2"
}], ["path", {
  d: "M18 8v5a4 4 0 0 1-4 4h-4a4 4 0 0 1-4-4V8Z"
}]];
const Pocket = [["path", {
  d: "M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"
}], ["polyline", {
  points: "8 10 12 14 16 10"
}]];
const Podcast = [["path", {
  d: "M16.85 18.58a9 9 0 1 0-9.7 0"
}], ["path", {
  d: "M8 14a5 5 0 1 1 8 0"
}], ["circle", {
  cx: "12",
  cy: "11",
  r: "1"
}], ["path", {
  d: "M13 17a1 1 0 1 0-2 0l.5 4.5a.5.5 0 1 0 1 0Z"
}]];
const PointerOff = [["path", {
  d: "M10 4.5V4a2 2 0 0 0-2.41-1.957"
}], ["path", {
  d: "M13.9 8.4a2 2 0 0 0-1.26-1.295"
}], ["path", {
  d: "M21.7 16.2A8 8 0 0 0 22 14v-3a2 2 0 1 0-4 0v-1a2 2 0 0 0-3.63-1.158"
}], ["path", {
  d: "m7 15-1.8-1.8a2 2 0 0 0-2.79 2.86L6 19.7a7.74 7.74 0 0 0 6 2.3h2a8 8 0 0 0 5.657-2.343"
}], ["path", {
  d: "M6 6v8"
}], ["path", {
  d: "m2 2 20 20"
}]];
const Pointer = [["path", {
  d: "M22 14a8 8 0 0 1-8 8"
}], ["path", {
  d: "M18 11v-1a2 2 0 0 0-2-2a2 2 0 0 0-2 2"
}], ["path", {
  d: "M14 10V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1"
}], ["path", {
  d: "M10 9.5V4a2 2 0 0 0-2-2a2 2 0 0 0-2 2v10"
}], ["path", {
  d: "M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15"
}]];
const Popcorn = [["path", {
  d: "M18 8a2 2 0 0 0 0-4 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0 0 4"
}], ["path", {
  d: "M10 22 9 8"
}], ["path", {
  d: "m14 22 1-14"
}], ["path", {
  d: "M20 8c.5 0 .9.4.8 1l-2.6 12c-.1.5-.7 1-1.2 1H7c-.6 0-1.1-.4-1.2-1L3.2 9c-.1-.6.3-1 .8-1Z"
}]];
const Popsicle = [["path", {
  d: "M18.6 14.4c.8-.8.8-2 0-2.8l-8.1-8.1a4.95 4.95 0 1 0-7.1 7.1l8.1 8.1c.9.7 2.1.7 2.9-.1Z"
}], ["path", {
  d: "m22 22-5.5-5.5"
}]];
const PoundSterling = [["path", {
  d: "M18 7c0-5.333-8-5.333-8 0"
}], ["path", {
  d: "M10 7v14"
}], ["path", {
  d: "M6 21h12"
}], ["path", {
  d: "M6 13h10"
}]];
const PowerOff = [["path", {
  d: "M18.36 6.64A9 9 0 0 1 20.77 15"
}], ["path", {
  d: "M6.16 6.16a9 9 0 1 0 12.68 12.68"
}], ["path", {
  d: "M12 2v4"
}], ["path", {
  d: "m2 2 20 20"
}]];
const Power = [["path", {
  d: "M12 2v10"
}], ["path", {
  d: "M18.4 6.6a9 9 0 1 1-12.77.04"
}]];
const Presentation = [["path", {
  d: "M2 3h20"
}], ["path", {
  d: "M21 3v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V3"
}], ["path", {
  d: "m7 21 5-5 5 5"
}]];
const PrinterCheck = [["path", {
  d: "M13.5 22H7a1 1 0 0 1-1-1v-6a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v.5"
}], ["path", {
  d: "m16 19 2 2 4-4"
}], ["path", {
  d: "M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M6 9V3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6"
}]];
const Printer = [["path", {
  d: "M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M6 9V3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6"
}], ["rect", {
  x: "6",
  y: "14",
  width: "12",
  height: "8",
  rx: "1"
}]];
const Projector = [["path", {
  d: "M5 7 3 5"
}], ["path", {
  d: "M9 6V3"
}], ["path", {
  d: "m13 7 2-2"
}], ["circle", {
  cx: "9",
  cy: "13",
  r: "3"
}], ["path", {
  d: "M11.83 12H20a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h2.17"
}], ["path", {
  d: "M16 16h2"
}]];
const Puzzle = [["path", {
  d: "M15.39 4.39a1 1 0 0 0 1.68-.474 2.5 2.5 0 1 1 3.014 3.015 1 1 0 0 0-.474 1.68l1.683 1.682a2.414 2.414 0 0 1 0 3.414L19.61 15.39a1 1 0 0 1-1.68-.474 2.5 2.5 0 1 0-3.014 3.015 1 1 0 0 1 .474 1.68l-1.683 1.682a2.414 2.414 0 0 1-3.414 0L8.61 19.61a1 1 0 0 0-1.68.474 2.5 2.5 0 1 1-3.014-3.015 1 1 0 0 0 .474-1.68l-1.683-1.682a2.414 2.414 0 0 1 0-3.414L4.39 8.61a1 1 0 0 1 1.68.474 2.5 2.5 0 1 0 3.014-3.015 1 1 0 0 1-.474-1.68l1.683-1.682a2.414 2.414 0 0 1 3.414 0z"
}]];
const Proportions = [["rect", {
  width: "20",
  height: "16",
  x: "2",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M12 9v11"
}], ["path", {
  d: "M2 9h13a2 2 0 0 1 2 2v9"
}]];
const Pyramid = [["path", {
  d: "M2.5 16.88a1 1 0 0 1-.32-1.43l9-13.02a1 1 0 0 1 1.64 0l9 13.01a1 1 0 0 1-.32 1.44l-8.51 4.86a2 2 0 0 1-1.98 0Z"
}], ["path", {
  d: "M12 2v20"
}]];
const QrCode = [["rect", {
  width: "5",
  height: "5",
  x: "3",
  y: "3",
  rx: "1"
}], ["rect", {
  width: "5",
  height: "5",
  x: "16",
  y: "3",
  rx: "1"
}], ["rect", {
  width: "5",
  height: "5",
  x: "3",
  y: "16",
  rx: "1"
}], ["path", {
  d: "M21 16h-3a2 2 0 0 0-2 2v3"
}], ["path", {
  d: "M21 21v.01"
}], ["path", {
  d: "M12 7v3a2 2 0 0 1-2 2H7"
}], ["path", {
  d: "M3 12h.01"
}], ["path", {
  d: "M12 3h.01"
}], ["path", {
  d: "M12 16v.01"
}], ["path", {
  d: "M16 12h1"
}], ["path", {
  d: "M21 12v.01"
}], ["path", {
  d: "M12 21v-1"
}]];
const Quote = [["path", {
  d: "M16 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z"
}], ["path", {
  d: "M5 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z"
}]];
const Rabbit = [["path", {
  d: "M13 16a3 3 0 0 1 2.24 5"
}], ["path", {
  d: "M18 12h.01"
}], ["path", {
  d: "M18 21h-8a4 4 0 0 1-4-4 7 7 0 0 1 7-7h.2L9.6 6.4a1 1 0 1 1 2.8-2.8L15.8 7h.2c3.3 0 6 2.7 6 6v1a2 2 0 0 1-2 2h-1a3 3 0 0 0-3 3"
}], ["path", {
  d: "M20 8.54V4a2 2 0 1 0-4 0v3"
}], ["path", {
  d: "M7.612 12.524a3 3 0 1 0-1.6 4.3"
}]];
const Radar = [["path", {
  d: "M19.07 4.93A10 10 0 0 0 6.99 3.34"
}], ["path", {
  d: "M4 6h.01"
}], ["path", {
  d: "M2.29 9.62A10 10 0 1 0 21.31 8.35"
}], ["path", {
  d: "M16.24 7.76A6 6 0 1 0 8.23 16.67"
}], ["path", {
  d: "M12 18h.01"
}], ["path", {
  d: "M17.99 11.66A6 6 0 0 1 15.77 16.67"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "2"
}], ["path", {
  d: "m13.41 10.59 5.66-5.66"
}]];
const Radiation = [["path", {
  d: "M12 12h.01"
}], ["path", {
  d: "M7.5 4.2c-.3-.5-.9-.7-1.3-.4C3.9 5.5 2.3 8.1 2 11c-.1.5.4 1 1 1h5c0-1.5.8-2.8 2-3.4-1.1-1.9-2-3.5-2.5-4.4z"
}], ["path", {
  d: "M21 12c.6 0 1-.4 1-1-.3-2.9-1.8-5.5-4.1-7.1-.4-.3-1.1-.2-1.3.3-.6.9-1.5 2.5-2.6 4.3 1.2.7 2 2 2 3.5h5z"
}], ["path", {
  d: "M7.5 19.8c-.3.5-.1 1.1.4 1.3 2.6 1.2 5.6 1.2 8.2 0 .5-.2.7-.8.4-1.3-.5-.9-1.4-2.5-2.5-4.3-1.2.7-2.8.7-4 0-1.1 1.8-2 3.4-2.5 4.3z"
}]];
const Radical = [["path", {
  d: "M3 12h3.28a1 1 0 0 1 .948.684l2.298 7.934a.5.5 0 0 0 .96-.044L13.82 4.771A1 1 0 0 1 14.792 4H21"
}]];
const RadioReceiver = [["path", {
  d: "M5 16v2"
}], ["path", {
  d: "M19 16v2"
}], ["rect", {
  width: "20",
  height: "8",
  x: "2",
  y: "8",
  rx: "2"
}], ["path", {
  d: "M18 12h.01"
}]];
const RadioTower = [["path", {
  d: "M4.9 16.1C1 12.2 1 5.8 4.9 1.9"
}], ["path", {
  d: "M7.8 4.7a6.14 6.14 0 0 0-.8 7.5"
}], ["circle", {
  cx: "12",
  cy: "9",
  r: "2"
}], ["path", {
  d: "M16.2 4.8c2 2 2.26 5.11.8 7.47"
}], ["path", {
  d: "M19.1 1.9a9.96 9.96 0 0 1 0 14.1"
}], ["path", {
  d: "M9.5 18h5"
}], ["path", {
  d: "m8 22 4-11 4 11"
}]];
const Radius = [["path", {
  d: "M20.34 17.52a10 10 0 1 0-2.82 2.82"
}], ["circle", {
  cx: "19",
  cy: "19",
  r: "2"
}], ["path", {
  d: "m13.41 13.41 4.18 4.18"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "2"
}]];
const Radio = [["path", {
  d: "M4.9 19.1C1 15.2 1 8.8 4.9 4.9"
}], ["path", {
  d: "M7.8 16.2c-2.3-2.3-2.3-6.1 0-8.5"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "2"
}], ["path", {
  d: "M16.2 7.8c2.3 2.3 2.3 6.1 0 8.5"
}], ["path", {
  d: "M19.1 4.9C23 8.8 23 15.1 19.1 19"
}]];
const RailSymbol = [["path", {
  d: "M5 15h14"
}], ["path", {
  d: "M5 9h14"
}], ["path", {
  d: "m14 20-5-5 6-6-5-5"
}]];
const Rainbow = [["path", {
  d: "M22 17a10 10 0 0 0-20 0"
}], ["path", {
  d: "M6 17a6 6 0 0 1 12 0"
}], ["path", {
  d: "M10 17a2 2 0 0 1 4 0"
}]];
const Rat = [["path", {
  d: "M13 22H4a2 2 0 0 1 0-4h12"
}], ["path", {
  d: "M13.236 18a3 3 0 0 0-2.2-5"
}], ["path", {
  d: "M16 9h.01"
}], ["path", {
  d: "M16.82 3.94a3 3 0 1 1 3.237 4.868l1.815 2.587a1.5 1.5 0 0 1-1.5 2.1l-2.872-.453a3 3 0 0 0-3.5 3"
}], ["path", {
  d: "M17 4.988a3 3 0 1 0-5.2 2.052A7 7 0 0 0 4 14.015 4 4 0 0 0 8 18"
}]];
const Ratio = [["rect", {
  width: "12",
  height: "20",
  x: "6",
  y: "2",
  rx: "2"
}], ["rect", {
  width: "20",
  height: "12",
  x: "2",
  y: "6",
  rx: "2"
}]];
const ReceiptCent = [["path", {
  d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
}], ["path", {
  d: "M12 6.5v11"
}], ["path", {
  d: "M15 9.4a4 4 0 1 0 0 5.2"
}]];
const ReceiptEuro = [["path", {
  d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
}], ["path", {
  d: "M8 12h5"
}], ["path", {
  d: "M16 9.5a4 4 0 1 0 0 5.2"
}]];
const ReceiptIndianRupee = [["path", {
  d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
}], ["path", {
  d: "M8 7h8"
}], ["path", {
  d: "M12 17.5 8 15h1a4 4 0 0 0 0-8"
}], ["path", {
  d: "M8 11h8"
}]];
const ReceiptJapaneseYen = [["path", {
  d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
}], ["path", {
  d: "m12 10 3-3"
}], ["path", {
  d: "m9 7 3 3v7.5"
}], ["path", {
  d: "M9 11h6"
}], ["path", {
  d: "M9 15h6"
}]];
const ReceiptPoundSterling = [["path", {
  d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
}], ["path", {
  d: "M8 13h5"
}], ["path", {
  d: "M10 17V9.5a2.5 2.5 0 0 1 5 0"
}], ["path", {
  d: "M8 17h7"
}]];
const ReceiptRussianRuble = [["path", {
  d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
}], ["path", {
  d: "M8 15h5"
}], ["path", {
  d: "M8 11h5a2 2 0 1 0 0-4h-3v10"
}]];
const ReceiptSwissFranc = [["path", {
  d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
}], ["path", {
  d: "M10 17V7h5"
}], ["path", {
  d: "M10 11h4"
}], ["path", {
  d: "M8 15h5"
}]];
const ReceiptText = [["path", {
  d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
}], ["path", {
  d: "M14 8H8"
}], ["path", {
  d: "M16 12H8"
}], ["path", {
  d: "M13 16H8"
}]];
const Receipt = [["path", {
  d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
}], ["path", {
  d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8"
}], ["path", {
  d: "M12 17.5v-11"
}]];
const RectangleHorizontal = [["rect", {
  width: "20",
  height: "12",
  x: "2",
  y: "6",
  rx: "2"
}]];
const RectangleVertical = [["rect", {
  width: "12",
  height: "20",
  x: "6",
  y: "2",
  rx: "2"
}]];
const RectangleEllipsis = [["rect", {
  width: "20",
  height: "12",
  x: "2",
  y: "6",
  rx: "2"
}], ["path", {
  d: "M12 12h.01"
}], ["path", {
  d: "M17 12h.01"
}], ["path", {
  d: "M7 12h.01"
}]];
const Recycle = [["path", {
  d: "M7 19H4.815a1.83 1.83 0 0 1-1.57-.881 1.785 1.785 0 0 1-.004-1.784L7.196 9.5"
}], ["path", {
  d: "M11 19h8.203a1.83 1.83 0 0 0 1.556-.89 1.784 1.784 0 0 0 0-1.775l-1.226-2.12"
}], ["path", {
  d: "m14 16-3 3 3 3"
}], ["path", {
  d: "M8.293 13.596 7.196 9.5 3.1 10.598"
}], ["path", {
  d: "m9.344 5.811 1.093-1.892A1.83 1.83 0 0 1 11.985 3a1.784 1.784 0 0 1 1.546.888l3.943 6.843"
}], ["path", {
  d: "m13.378 9.633 4.096 1.098 1.097-4.096"
}]];
const Redo2 = [["path", {
  d: "m15 14 5-5-5-5"
}], ["path", {
  d: "M20 9H9.5A5.5 5.5 0 0 0 4 14.5A5.5 5.5 0 0 0 9.5 20H13"
}]];
const RedoDot = [["circle", {
  cx: "12",
  cy: "17",
  r: "1"
}], ["path", {
  d: "M21 7v6h-6"
}], ["path", {
  d: "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7"
}]];
const Redo = [["path", {
  d: "M21 7v6h-6"
}], ["path", {
  d: "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7"
}]];
const RefreshCcwDot = [["path", {
  d: "M3 2v6h6"
}], ["path", {
  d: "M21 12A9 9 0 0 0 6 5.3L3 8"
}], ["path", {
  d: "M21 22v-6h-6"
}], ["path", {
  d: "M3 12a9 9 0 0 0 15 6.7l3-2.7"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "1"
}]];
const RefreshCcw = [["path", {
  d: "M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"
}], ["path", {
  d: "M3 3v5h5"
}], ["path", {
  d: "M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16"
}], ["path", {
  d: "M16 16h5v5"
}]];
const RefreshCwOff = [["path", {
  d: "M21 8L18.74 5.74A9.75 9.75 0 0 0 12 3C11 3 10.03 3.16 9.13 3.47"
}], ["path", {
  d: "M8 16H3v5"
}], ["path", {
  d: "M3 12C3 9.51 4 7.26 5.64 5.64"
}], ["path", {
  d: "m3 16 2.26 2.26A9.75 9.75 0 0 0 12 21c2.49 0 4.74-1 6.36-2.64"
}], ["path", {
  d: "M21 12c0 1-.16 1.97-.47 2.87"
}], ["path", {
  d: "M21 3v5h-5"
}], ["path", {
  d: "M22 22 2 2"
}]];
const RefreshCw = [["path", {
  d: "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"
}], ["path", {
  d: "M21 3v5h-5"
}], ["path", {
  d: "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"
}], ["path", {
  d: "M8 16H3v5"
}]];
const Refrigerator = [["path", {
  d: "M5 6a4 4 0 0 1 4-4h6a4 4 0 0 1 4 4v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6Z"
}], ["path", {
  d: "M5 10h14"
}], ["path", {
  d: "M15 7v6"
}]];
const Regex = [["path", {
  d: "M17 3v10"
}], ["path", {
  d: "m12.67 5.5 8.66 5"
}], ["path", {
  d: "m12.67 10.5 8.66-5"
}], ["path", {
  d: "M9 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2z"
}]];
const RemoveFormatting = [["path", {
  d: "M4 7V4h16v3"
}], ["path", {
  d: "M5 20h6"
}], ["path", {
  d: "M13 4 8 20"
}], ["path", {
  d: "m15 15 5 5"
}], ["path", {
  d: "m20 15-5 5"
}]];
const Repeat1 = [["path", {
  d: "m17 2 4 4-4 4"
}], ["path", {
  d: "M3 11v-1a4 4 0 0 1 4-4h14"
}], ["path", {
  d: "m7 22-4-4 4-4"
}], ["path", {
  d: "M21 13v1a4 4 0 0 1-4 4H3"
}], ["path", {
  d: "M11 10h1v4"
}]];
const Repeat2 = [["path", {
  d: "m2 9 3-3 3 3"
}], ["path", {
  d: "M13 18H7a2 2 0 0 1-2-2V6"
}], ["path", {
  d: "m22 15-3 3-3-3"
}], ["path", {
  d: "M11 6h6a2 2 0 0 1 2 2v10"
}]];
const Repeat = [["path", {
  d: "m17 2 4 4-4 4"
}], ["path", {
  d: "M3 11v-1a4 4 0 0 1 4-4h14"
}], ["path", {
  d: "m7 22-4-4 4-4"
}], ["path", {
  d: "M21 13v1a4 4 0 0 1-4 4H3"
}]];
const ReplaceAll = [["path", {
  d: "M14 14a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2"
}], ["path", {
  d: "M14 4a2 2 0 0 1 2-2"
}], ["path", {
  d: "M16 10a2 2 0 0 1-2-2"
}], ["path", {
  d: "M20 14a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2"
}], ["path", {
  d: "M20 2a2 2 0 0 1 2 2"
}], ["path", {
  d: "M22 8a2 2 0 0 1-2 2"
}], ["path", {
  d: "m3 7 3 3 3-3"
}], ["path", {
  d: "M6 10V5a 3 3 0 0 1 3-3h1"
}], ["rect", {
  x: "2",
  y: "14",
  width: "8",
  height: "8",
  rx: "2"
}]];
const Replace = [["path", {
  d: "M14 4a2 2 0 0 1 2-2"
}], ["path", {
  d: "M16 10a2 2 0 0 1-2-2"
}], ["path", {
  d: "M20 2a2 2 0 0 1 2 2"
}], ["path", {
  d: "M22 8a2 2 0 0 1-2 2"
}], ["path", {
  d: "m3 7 3 3 3-3"
}], ["path", {
  d: "M6 10V5a3 3 0 0 1 3-3h1"
}], ["rect", {
  x: "2",
  y: "14",
  width: "8",
  height: "8",
  rx: "2"
}]];
const ReplyAll = [["polyline", {
  points: "7 17 2 12 7 7"
}], ["polyline", {
  points: "12 17 7 12 12 7"
}], ["path", {
  d: "M22 18v-2a4 4 0 0 0-4-4H7"
}]];
const Reply = [["polyline", {
  points: "9 17 4 12 9 7"
}], ["path", {
  d: "M20 18v-2a4 4 0 0 0-4-4H4"
}]];
const Rewind = [["polygon", {
  points: "11 19 2 12 11 5 11 19"
}], ["polygon", {
  points: "22 19 13 12 22 5 22 19"
}]];
const Ribbon = [["path", {
  d: "M12 11.22C11 9.997 10 9 10 8a2 2 0 0 1 4 0c0 1-.998 2.002-2.01 3.22"
}], ["path", {
  d: "m12 18 2.57-3.5"
}], ["path", {
  d: "M6.243 9.016a7 7 0 0 1 11.507-.009"
}], ["path", {
  d: "M9.35 14.53 12 11.22"
}], ["path", {
  d: "M9.35 14.53C7.728 12.246 6 10.221 6 7a6 5 0 0 1 12 0c-.005 3.22-1.778 5.235-3.43 7.5l3.557 4.527a1 1 0 0 1-.203 1.43l-1.894 1.36a1 1 0 0 1-1.384-.215L12 18l-2.679 3.593a1 1 0 0 1-1.39.213l-1.865-1.353a1 1 0 0 1-.203-1.422z"
}]];
const Rocket = [["path", {
  d: "M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"
}], ["path", {
  d: "m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"
}], ["path", {
  d: "M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"
}], ["path", {
  d: "M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"
}]];
const RockingChair = [["polyline", {
  points: "3.5 2 6.5 12.5 18 12.5"
}], ["line", {
  x1: "9.5",
  x2: "5.5",
  y1: "12.5",
  y2: "20"
}], ["line", {
  x1: "15",
  x2: "18.5",
  y1: "12.5",
  y2: "20"
}], ["path", {
  d: "M2.75 18a13 13 0 0 0 18.5 0"
}]];
const Rotate3d = [["path", {
  d: "M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2"
}], ["path", {
  d: "m15.194 13.707 3.814 1.86-1.86 3.814"
}], ["path", {
  d: "M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4"
}]];
const RollerCoaster = [["path", {
  d: "M6 19V5"
}], ["path", {
  d: "M10 19V6.8"
}], ["path", {
  d: "M14 19v-7.8"
}], ["path", {
  d: "M18 5v4"
}], ["path", {
  d: "M18 19v-6"
}], ["path", {
  d: "M22 19V9"
}], ["path", {
  d: "M2 19V9a4 4 0 0 1 4-4c2 0 4 1.33 6 4s4 4 6 4a4 4 0 1 0-3-6.65"
}]];
const RotateCcwSquare = [["path", {
  d: "M20 9V7a2 2 0 0 0-2-2h-6"
}], ["path", {
  d: "m15 2-3 3 3 3"
}], ["path", {
  d: "M20 13v5a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2"
}]];
const RotateCcw = [["path", {
  d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"
}], ["path", {
  d: "M3 3v5h5"
}]];
const RotateCwSquare = [["path", {
  d: "M12 5H6a2 2 0 0 0-2 2v3"
}], ["path", {
  d: "m9 8 3-3-3-3"
}], ["path", {
  d: "M4 14v4a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2"
}]];
const RotateCw = [["path", {
  d: "M21 12a9 9 0 1 1-9-9c2.52 0 4.93 1 6.74 2.74L21 8"
}], ["path", {
  d: "M21 3v5h-5"
}]];
const RouteOff = [["circle", {
  cx: "6",
  cy: "19",
  r: "3"
}], ["path", {
  d: "M9 19h8.5c.4 0 .9-.1 1.3-.2"
}], ["path", {
  d: "M5.2 5.2A3.5 3.53 0 0 0 6.5 12H12"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M21 15.3a3.5 3.5 0 0 0-3.3-3.3"
}], ["path", {
  d: "M15 5h-4.3"
}], ["circle", {
  cx: "18",
  cy: "5",
  r: "3"
}]];
const Route = [["circle", {
  cx: "6",
  cy: "19",
  r: "3"
}], ["path", {
  d: "M9 19h8.5a3.5 3.5 0 0 0 0-7h-11a3.5 3.5 0 0 1 0-7H15"
}], ["circle", {
  cx: "18",
  cy: "5",
  r: "3"
}]];
const Router = [["rect", {
  width: "20",
  height: "8",
  x: "2",
  y: "14",
  rx: "2"
}], ["path", {
  d: "M6.01 18H6"
}], ["path", {
  d: "M10.01 18H10"
}], ["path", {
  d: "M15 10v4"
}], ["path", {
  d: "M17.84 7.17a4 4 0 0 0-5.66 0"
}], ["path", {
  d: "M20.66 4.34a8 8 0 0 0-11.31 0"
}]];
const Rows2 = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M3 12h18"
}]];
const Rows3 = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M21 9H3"
}], ["path", {
  d: "M21 15H3"
}]];
const Rows4 = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M21 7.5H3"
}], ["path", {
  d: "M21 12H3"
}], ["path", {
  d: "M21 16.5H3"
}]];
const Rss = [["path", {
  d: "M4 11a9 9 0 0 1 9 9"
}], ["path", {
  d: "M4 4a16 16 0 0 1 16 16"
}], ["circle", {
  cx: "5",
  cy: "19",
  r: "1"
}]];
const Ruler = [["path", {
  d: "M21.3 15.3a2.4 2.4 0 0 1 0 3.4l-2.6 2.6a2.4 2.4 0 0 1-3.4 0L2.7 8.7a2.41 2.41 0 0 1 0-3.4l2.6-2.6a2.41 2.41 0 0 1 3.4 0Z"
}], ["path", {
  d: "m14.5 12.5 2-2"
}], ["path", {
  d: "m11.5 9.5 2-2"
}], ["path", {
  d: "m8.5 6.5 2-2"
}], ["path", {
  d: "m17.5 15.5 2-2"
}]];
const Sailboat = [["path", {
  d: "M22 18H2a4 4 0 0 0 4 4h12a4 4 0 0 0 4-4Z"
}], ["path", {
  d: "M21 14 10 2 3 14h18Z"
}], ["path", {
  d: "M10 2v16"
}]];
const RussianRuble = [["path", {
  d: "M6 11h8a4 4 0 0 0 0-8H9v18"
}], ["path", {
  d: "M6 15h8"
}]];
const Salad = [["path", {
  d: "M7 21h10"
}], ["path", {
  d: "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z"
}], ["path", {
  d: "M11.38 12a2.4 2.4 0 0 1-.4-4.77 2.4 2.4 0 0 1 3.2-2.77 2.4 2.4 0 0 1 3.47-.63 2.4 2.4 0 0 1 3.37 3.37 2.4 2.4 0 0 1-1.1 3.7 2.51 2.51 0 0 1 .03 1.1"
}], ["path", {
  d: "m13 12 4-4"
}], ["path", {
  d: "M10.9 7.25A3.99 3.99 0 0 0 4 10c0 .73.2 1.41.54 2"
}]];
const Sandwich = [["path", {
  d: "m2.37 11.223 8.372-6.777a2 2 0 0 1 2.516 0l8.371 6.777"
}], ["path", {
  d: "M21 15a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-5.25"
}], ["path", {
  d: "M3 15a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h9"
}], ["path", {
  d: "m6.67 15 6.13 4.6a2 2 0 0 0 2.8-.4l3.15-4.2"
}], ["rect", {
  width: "20",
  height: "4",
  x: "2",
  y: "11",
  rx: "1"
}]];
const SatelliteDish = [["path", {
  d: "M4 10a7.31 7.31 0 0 0 10 10Z"
}], ["path", {
  d: "m9 15 3-3"
}], ["path", {
  d: "M17 13a6 6 0 0 0-6-6"
}], ["path", {
  d: "M21 13A10 10 0 0 0 11 3"
}]];
const Satellite = [["path", {
  d: "M13 7 9 3 5 7l4 4"
}], ["path", {
  d: "m17 11 4 4-4 4-4-4"
}], ["path", {
  d: "m8 12 4 4 6-6-4-4Z"
}], ["path", {
  d: "m16 8 3-3"
}], ["path", {
  d: "M9 21a6 6 0 0 0-6-6"
}]];
const SaudiRiyal = [["path", {
  d: "m20 19.5-5.5 1.2"
}], ["path", {
  d: "M14.5 4v11.22a1 1 0 0 0 1.242.97L20 15.2"
}], ["path", {
  d: "m2.978 19.351 5.549-1.363A2 2 0 0 0 10 16V2"
}], ["path", {
  d: "M20 10 4 13.5"
}]];
const SaveAll = [["path", {
  d: "M10 2v3a1 1 0 0 0 1 1h5"
}], ["path", {
  d: "M18 18v-6a1 1 0 0 0-1-1h-6a1 1 0 0 0-1 1v6"
}], ["path", {
  d: "M18 22H4a2 2 0 0 1-2-2V6"
}], ["path", {
  d: "M8 18a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9.172a2 2 0 0 1 1.414.586l2.828 2.828A2 2 0 0 1 22 6.828V16a2 2 0 0 1-2.01 2z"
}]];
const SaveOff = [["path", {
  d: "M13 13H8a1 1 0 0 0-1 1v7"
}], ["path", {
  d: "M14 8h1"
}], ["path", {
  d: "M17 21v-4"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M20.41 20.41A2 2 0 0 1 19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 .59-1.41"
}], ["path", {
  d: "M29.5 11.5s5 5 4 5"
}], ["path", {
  d: "M9 3h6.2a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V15"
}]];
const Save = [["path", {
  d: "M15.2 3a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2z"
}], ["path", {
  d: "M17 21v-7a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v7"
}], ["path", {
  d: "M7 3v4a1 1 0 0 0 1 1h7"
}]];
const Scale3d = [["path", {
  d: "M5 7v11a1 1 0 0 0 1 1h11"
}], ["path", {
  d: "M5.293 18.707 11 13"
}], ["circle", {
  cx: "19",
  cy: "19",
  r: "2"
}], ["circle", {
  cx: "5",
  cy: "5",
  r: "2"
}]];
const Scale = [["path", {
  d: "m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"
}], ["path", {
  d: "m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"
}], ["path", {
  d: "M7 21h10"
}], ["path", {
  d: "M12 3v18"
}], ["path", {
  d: "M3 7h2c2 0 5-1 7-2 2 1 5 2 7 2h2"
}]];
const Scaling = [["path", {
  d: "M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"
}], ["path", {
  d: "M14 15H9v-5"
}], ["path", {
  d: "M16 3h5v5"
}], ["path", {
  d: "M21 3 9 15"
}]];
const ScanBarcode = [["path", {
  d: "M3 7V5a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M17 3h2a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M21 17v2a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M7 21H5a2 2 0 0 1-2-2v-2"
}], ["path", {
  d: "M8 7v10"
}], ["path", {
  d: "M12 7v10"
}], ["path", {
  d: "M17 7v10"
}]];
const ScanEye = [["path", {
  d: "M3 7V5a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M17 3h2a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M21 17v2a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M7 21H5a2 2 0 0 1-2-2v-2"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "1"
}], ["path", {
  d: "M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0"
}]];
const ScanFace = [["path", {
  d: "M3 7V5a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M17 3h2a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M21 17v2a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M7 21H5a2 2 0 0 1-2-2v-2"
}], ["path", {
  d: "M8 14s1.5 2 4 2 4-2 4-2"
}], ["path", {
  d: "M9 9h.01"
}], ["path", {
  d: "M15 9h.01"
}]];
const ScanHeart = [["path", {
  d: "M11.246 16.657a1 1 0 0 0 1.508 0l3.57-4.101A2.75 2.75 0 1 0 12 9.168a2.75 2.75 0 1 0-4.324 3.388z"
}], ["path", {
  d: "M17 3h2a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M21 17v2a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M3 7V5a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M7 21H5a2 2 0 0 1-2-2v-2"
}]];
const ScanLine = [["path", {
  d: "M3 7V5a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M17 3h2a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M21 17v2a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M7 21H5a2 2 0 0 1-2-2v-2"
}], ["path", {
  d: "M7 12h10"
}]];
const ScanQrCode = [["path", {
  d: "M17 12v4a1 1 0 0 1-1 1h-4"
}], ["path", {
  d: "M17 3h2a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M17 8V7"
}], ["path", {
  d: "M21 17v2a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M3 7V5a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M7 17h.01"
}], ["path", {
  d: "M7 21H5a2 2 0 0 1-2-2v-2"
}], ["rect", {
  x: "7",
  y: "7",
  width: "5",
  height: "5",
  rx: "1"
}]];
const ScanSearch = [["path", {
  d: "M3 7V5a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M17 3h2a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M21 17v2a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M7 21H5a2 2 0 0 1-2-2v-2"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "3"
}], ["path", {
  d: "m16 16-1.9-1.9"
}]];
const Scan = [["path", {
  d: "M3 7V5a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M17 3h2a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M21 17v2a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M7 21H5a2 2 0 0 1-2-2v-2"
}]];
const ScanText = [["path", {
  d: "M3 7V5a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "M17 3h2a2 2 0 0 1 2 2v2"
}], ["path", {
  d: "M21 17v2a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M7 21H5a2 2 0 0 1-2-2v-2"
}], ["path", {
  d: "M7 8h8"
}], ["path", {
  d: "M7 12h10"
}], ["path", {
  d: "M7 16h6"
}]];
const School = [["path", {
  d: "M14 22v-4a2 2 0 1 0-4 0v4"
}], ["path", {
  d: "m18 10 3.447 1.724a1 1 0 0 1 .553.894V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-7.382a1 1 0 0 1 .553-.894L6 10"
}], ["path", {
  d: "M18 5v17"
}], ["path", {
  d: "m4 6 7.106-3.553a2 2 0 0 1 1.788 0L20 6"
}], ["path", {
  d: "M6 5v17"
}], ["circle", {
  cx: "12",
  cy: "9",
  r: "2"
}]];
const ScissorsLineDashed = [["path", {
  d: "M5.42 9.42 8 12"
}], ["circle", {
  cx: "4",
  cy: "8",
  r: "2"
}], ["path", {
  d: "m14 6-8.58 8.58"
}], ["circle", {
  cx: "4",
  cy: "16",
  r: "2"
}], ["path", {
  d: "M10.8 14.8 14 18"
}], ["path", {
  d: "M16 12h-2"
}], ["path", {
  d: "M22 12h-2"
}]];
const Scissors = [["circle", {
  cx: "6",
  cy: "6",
  r: "3"
}], ["path", {
  d: "M8.12 8.12 12 12"
}], ["path", {
  d: "M20 4 8.12 15.88"
}], ["circle", {
  cx: "6",
  cy: "18",
  r: "3"
}], ["path", {
  d: "M14.8 14.8 20 20"
}]];
const ScreenShareOff = [["path", {
  d: "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3"
}], ["path", {
  d: "M8 21h8"
}], ["path", {
  d: "M12 17v4"
}], ["path", {
  d: "m22 3-5 5"
}], ["path", {
  d: "m17 3 5 5"
}]];
const ScreenShare = [["path", {
  d: "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3"
}], ["path", {
  d: "M8 21h8"
}], ["path", {
  d: "M12 17v4"
}], ["path", {
  d: "m17 8 5-5"
}], ["path", {
  d: "M17 3h5v5"
}]];
const ScrollText = [["path", {
  d: "M15 12h-5"
}], ["path", {
  d: "M15 8h-5"
}], ["path", {
  d: "M19 17V5a2 2 0 0 0-2-2H4"
}], ["path", {
  d: "M8 21h12a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v1a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v2a1 1 0 0 0 1 1h3"
}]];
const Scroll = [["path", {
  d: "M19 17V5a2 2 0 0 0-2-2H4"
}], ["path", {
  d: "M8 21h12a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v1a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v2a1 1 0 0 0 1 1h3"
}]];
const SearchCheck = [["path", {
  d: "m8 11 2 2 4-4"
}], ["circle", {
  cx: "11",
  cy: "11",
  r: "8"
}], ["path", {
  d: "m21 21-4.3-4.3"
}]];
const SearchCode = [["path", {
  d: "m13 13.5 2-2.5-2-2.5"
}], ["path", {
  d: "m21 21-4.3-4.3"
}], ["path", {
  d: "M9 8.5 7 11l2 2.5"
}], ["circle", {
  cx: "11",
  cy: "11",
  r: "8"
}]];
const SearchSlash = [["path", {
  d: "m13.5 8.5-5 5"
}], ["circle", {
  cx: "11",
  cy: "11",
  r: "8"
}], ["path", {
  d: "m21 21-4.3-4.3"
}]];
const SearchX = [["path", {
  d: "m13.5 8.5-5 5"
}], ["path", {
  d: "m8.5 8.5 5 5"
}], ["circle", {
  cx: "11",
  cy: "11",
  r: "8"
}], ["path", {
  d: "m21 21-4.3-4.3"
}]];
const Search = [["circle", {
  cx: "11",
  cy: "11",
  r: "8"
}], ["path", {
  d: "m21 21-4.3-4.3"
}]];
const SendHorizontal = [["path", {
  d: "M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z"
}], ["path", {
  d: "M6 12h16"
}]];
const Section = [["path", {
  d: "M16 5a4 3 0 0 0-8 0c0 4 8 3 8 7a4 3 0 0 1-8 0"
}], ["path", {
  d: "M8 19a4 3 0 0 0 8 0c0-4-8-3-8-7a4 3 0 0 1 8 0"
}]];
const SendToBack = [["rect", {
  x: "14",
  y: "14",
  width: "8",
  height: "8",
  rx: "2"
}], ["rect", {
  x: "2",
  y: "2",
  width: "8",
  height: "8",
  rx: "2"
}], ["path", {
  d: "M7 14v1a2 2 0 0 0 2 2h1"
}], ["path", {
  d: "M14 7h1a2 2 0 0 1 2 2v1"
}]];
const Send = [["path", {
  d: "M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z"
}], ["path", {
  d: "m21.854 2.147-10.94 10.939"
}]];
const SeparatorHorizontal = [["line", {
  x1: "3",
  x2: "21",
  y1: "12",
  y2: "12"
}], ["polyline", {
  points: "8 8 12 4 16 8"
}], ["polyline", {
  points: "16 16 12 20 8 16"
}]];
const SeparatorVertical = [["line", {
  x1: "12",
  x2: "12",
  y1: "3",
  y2: "21"
}], ["polyline", {
  points: "8 8 4 12 8 16"
}], ["polyline", {
  points: "16 16 20 12 16 8"
}]];
const ServerCog = [["circle", {
  cx: "12",
  cy: "12",
  r: "3"
}], ["path", {
  d: "M4.5 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-.5"
}], ["path", {
  d: "M4.5 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-.5"
}], ["path", {
  d: "M6 6h.01"
}], ["path", {
  d: "M6 18h.01"
}], ["path", {
  d: "m15.7 13.4-.9-.3"
}], ["path", {
  d: "m9.2 10.9-.9-.3"
}], ["path", {
  d: "m10.6 15.7.3-.9"
}], ["path", {
  d: "m13.6 15.7-.4-1"
}], ["path", {
  d: "m10.8 9.3-.4-1"
}], ["path", {
  d: "m8.3 13.6 1-.4"
}], ["path", {
  d: "m14.7 10.8 1-.4"
}], ["path", {
  d: "m13.4 8.3-.3.9"
}]];
const ServerCrash = [["path", {
  d: "M6 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-2"
}], ["path", {
  d: "M6 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2"
}], ["path", {
  d: "M6 6h.01"
}], ["path", {
  d: "M6 18h.01"
}], ["path", {
  d: "m13 6-4 6h6l-4 6"
}]];
const ServerOff = [["path", {
  d: "M7 2h13a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-5"
}], ["path", {
  d: "M10 10 2.5 2.5C2 2 2 2.5 2 5v3a2 2 0 0 0 2 2h6z"
}], ["path", {
  d: "M22 17v-1a2 2 0 0 0-2-2h-1"
}], ["path", {
  d: "M4 14a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16.5l1-.5.5.5-8-8H4z"
}], ["path", {
  d: "M6 18h.01"
}], ["path", {
  d: "m2 2 20 20"
}]];
const Server = [["rect", {
  width: "20",
  height: "8",
  x: "2",
  y: "2",
  rx: "2",
  ry: "2"
}], ["rect", {
  width: "20",
  height: "8",
  x: "2",
  y: "14",
  rx: "2",
  ry: "2"
}], ["line", {
  x1: "6",
  x2: "6.01",
  y1: "6",
  y2: "6"
}], ["line", {
  x1: "6",
  x2: "6.01",
  y1: "18",
  y2: "18"
}]];
const Settings2 = [["path", {
  d: "M20 7h-9"
}], ["path", {
  d: "M14 17H5"
}], ["circle", {
  cx: "17",
  cy: "17",
  r: "3"
}], ["circle", {
  cx: "7",
  cy: "7",
  r: "3"
}]];
const Settings = [["path", {
  d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "3"
}]];
const Shapes = [["path", {
  d: "M8.3 10a.7.7 0 0 1-.626-1.079L11.4 3a.7.7 0 0 1 1.198-.043L16.3 8.9a.7.7 0 0 1-.572 1.1Z"
}], ["rect", {
  x: "3",
  y: "14",
  width: "7",
  height: "7",
  rx: "1"
}], ["circle", {
  cx: "17.5",
  cy: "17.5",
  r: "3.5"
}]];
const Share2 = [["circle", {
  cx: "18",
  cy: "5",
  r: "3"
}], ["circle", {
  cx: "6",
  cy: "12",
  r: "3"
}], ["circle", {
  cx: "18",
  cy: "19",
  r: "3"
}], ["line", {
  x1: "8.59",
  x2: "15.42",
  y1: "13.51",
  y2: "17.49"
}], ["line", {
  x1: "15.41",
  x2: "8.59",
  y1: "6.51",
  y2: "10.49"
}]];
const Share = [["path", {
  d: "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"
}], ["polyline", {
  points: "16 6 12 2 8 6"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "2",
  y2: "15"
}]];
const Sheet = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}], ["line", {
  x1: "3",
  x2: "21",
  y1: "9",
  y2: "9"
}], ["line", {
  x1: "3",
  x2: "21",
  y1: "15",
  y2: "15"
}], ["line", {
  x1: "9",
  x2: "9",
  y1: "9",
  y2: "21"
}], ["line", {
  x1: "15",
  x2: "15",
  y1: "9",
  y2: "21"
}]];
const Shell = [["path", {
  d: "M14 11a2 2 0 1 1-4 0 4 4 0 0 1 8 0 6 6 0 0 1-12 0 8 8 0 0 1 16 0 10 10 0 1 1-20 0 11.93 11.93 0 0 1 2.42-7.22 2 2 0 1 1 3.16 2.44"
}]];
const ShieldAlert = [["path", {
  d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
}], ["path", {
  d: "M12 8v4"
}], ["path", {
  d: "M12 16h.01"
}]];
const ShieldBan = [["path", {
  d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
}], ["path", {
  d: "m4.243 5.21 14.39 12.472"
}]];
const ShieldCheck = [["path", {
  d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
}], ["path", {
  d: "m9 12 2 2 4-4"
}]];
const ShieldEllipsis = [["path", {
  d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
}], ["path", {
  d: "M8 12h.01"
}], ["path", {
  d: "M12 12h.01"
}], ["path", {
  d: "M16 12h.01"
}]];
const ShieldHalf = [["path", {
  d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
}], ["path", {
  d: "M12 22V2"
}]];
const ShieldMinus = [["path", {
  d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
}], ["path", {
  d: "M9 12h6"
}]];
const ShieldOff = [["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M5 5a1 1 0 0 0-1 1v7c0 5 3.5 7.5 7.67 8.94a1 1 0 0 0 .67.01c2.35-.82 4.48-1.97 5.9-3.71"
}], ["path", {
  d: "M9.309 3.652A12.252 12.252 0 0 0 11.24 2.28a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1v7a9.784 9.784 0 0 1-.08 1.264"
}]];
const ShieldPlus = [["path", {
  d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
}], ["path", {
  d: "M9 12h6"
}], ["path", {
  d: "M12 9v6"
}]];
const ShieldUser = [["path", {
  d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
}], ["path", {
  d: "M6.376 18.91a6 6 0 0 1 11.249.003"
}], ["circle", {
  cx: "12",
  cy: "11",
  r: "4"
}]];
const ShieldQuestion = [["path", {
  d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
}], ["path", {
  d: "M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3"
}], ["path", {
  d: "M12 17h.01"
}]];
const ShieldX = [["path", {
  d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
}], ["path", {
  d: "m14.5 9.5-5 5"
}], ["path", {
  d: "m9.5 9.5 5 5"
}]];
const Shield = [["path", {
  d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
}]];
const ShipWheel = [["circle", {
  cx: "12",
  cy: "12",
  r: "8"
}], ["path", {
  d: "M12 2v7.5"
}], ["path", {
  d: "m19 5-5.23 5.23"
}], ["path", {
  d: "M22 12h-7.5"
}], ["path", {
  d: "m19 19-5.23-5.23"
}], ["path", {
  d: "M12 14.5V22"
}], ["path", {
  d: "M10.23 13.77 5 19"
}], ["path", {
  d: "M9.5 12H2"
}], ["path", {
  d: "M10.23 10.23 5 5"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "2.5"
}]];
const Ship = [["path", {
  d: "M12 10.189V14"
}], ["path", {
  d: "M12 2v3"
}], ["path", {
  d: "M19 13V7a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v6"
}], ["path", {
  d: "M19.38 20A11.6 11.6 0 0 0 21 14l-8.188-3.639a2 2 0 0 0-1.624 0L3 14a11.6 11.6 0 0 0 2.81 7.76"
}], ["path", {
  d: "M2 21c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1s1.2 1 2.5 1c2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
}]];
const Shirt = [["path", {
  d: "M20.38 3.46 16 2a4 4 0 0 1-8 0L3.62 3.46a2 2 0 0 0-1.34 2.23l.58 3.47a1 1 0 0 0 .99.84H6v10c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V10h2.15a1 1 0 0 0 .99-.84l.58-3.47a2 2 0 0 0-1.34-2.23z"
}]];
const ShoppingBag = [["path", {
  d: "M6 2 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4Z"
}], ["path", {
  d: "M3 6h18"
}], ["path", {
  d: "M16 10a4 4 0 0 1-8 0"
}]];
const ShoppingBasket = [["path", {
  d: "m15 11-1 9"
}], ["path", {
  d: "m19 11-4-7"
}], ["path", {
  d: "M2 11h20"
}], ["path", {
  d: "m3.5 11 1.6 7.4a2 2 0 0 0 2 1.6h9.8a2 2 0 0 0 2-1.6l1.7-7.4"
}], ["path", {
  d: "M4.5 15.5h15"
}], ["path", {
  d: "m5 11 4-7"
}], ["path", {
  d: "m9 11 1 9"
}]];
const ShoppingCart = [["circle", {
  cx: "8",
  cy: "21",
  r: "1"
}], ["circle", {
  cx: "19",
  cy: "21",
  r: "1"
}], ["path", {
  d: "M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12"
}]];
const Shovel = [["path", {
  d: "M2 22v-5l5-5 5 5-5 5z"
}], ["path", {
  d: "M9.5 14.5 16 8"
}], ["path", {
  d: "m17 2 5 5-.5.5a3.53 3.53 0 0 1-5 0s0 0 0 0a3.53 3.53 0 0 1 0-5L17 2"
}]];
const ShowerHead = [["path", {
  d: "m4 4 2.5 2.5"
}], ["path", {
  d: "M13.5 6.5a4.95 4.95 0 0 0-7 7"
}], ["path", {
  d: "M15 5 5 15"
}], ["path", {
  d: "M14 17v.01"
}], ["path", {
  d: "M10 16v.01"
}], ["path", {
  d: "M13 13v.01"
}], ["path", {
  d: "M16 10v.01"
}], ["path", {
  d: "M11 20v.01"
}], ["path", {
  d: "M17 14v.01"
}], ["path", {
  d: "M20 11v.01"
}]];
const Shrimp = [["path", {
  d: "M11 12h.01"
}], ["path", {
  d: "M13 22c.5-.5 1.12-1 2.5-1-1.38 0-2-.5-2.5-1"
}], ["path", {
  d: "M14 2a3.276 3.276 0 0 1-3.227 1.798l-6.17-.561A2.387 2.387 0 1 0 4.387 8H15.5a1 1 0 0 1 0 13 1 1 0 0 0 0-5H12a7 7 0 0 1-7-7V8"
}], ["path", {
  d: "M14 8a8.5 8.5 0 0 1 0 8"
}], ["path", {
  d: "M16 16c2 0 4.5-4 4-6"
}]];
const Shrink = [["path", {
  d: "m15 15 6 6m-6-6v4.8m0-4.8h4.8"
}], ["path", {
  d: "M9 19.8V15m0 0H4.2M9 15l-6 6"
}], ["path", {
  d: "M15 4.2V9m0 0h4.8M15 9l6-6"
}], ["path", {
  d: "M9 4.2V9m0 0H4.2M9 9 3 3"
}]];
const Shrub = [["path", {
  d: "M12 22v-7l-2-2"
}], ["path", {
  d: "M17 8v.8A6 6 0 0 1 13.8 20H10A6.5 6.5 0 0 1 7 8a5 5 0 0 1 10 0Z"
}], ["path", {
  d: "m14 14-2 2"
}]];
const Shuffle = [["path", {
  d: "m18 14 4 4-4 4"
}], ["path", {
  d: "m18 2 4 4-4 4"
}], ["path", {
  d: "M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22"
}], ["path", {
  d: "M2 6h1.972a4 4 0 0 1 3.6 2.2"
}], ["path", {
  d: "M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45"
}]];
const Sigma = [["path", {
  d: "M18 7V5a1 1 0 0 0-1-1H6.5a.5.5 0 0 0-.4.8l4.5 6a2 2 0 0 1 0 2.4l-4.5 6a.5.5 0 0 0 .4.8H17a1 1 0 0 0 1-1v-2"
}]];
const SignalHigh = [["path", {
  d: "M2 20h.01"
}], ["path", {
  d: "M7 20v-4"
}], ["path", {
  d: "M12 20v-8"
}], ["path", {
  d: "M17 20V8"
}]];
const SignalLow = [["path", {
  d: "M2 20h.01"
}], ["path", {
  d: "M7 20v-4"
}]];
const SignalMedium = [["path", {
  d: "M2 20h.01"
}], ["path", {
  d: "M7 20v-4"
}], ["path", {
  d: "M12 20v-8"
}]];
const SignalZero = [["path", {
  d: "M2 20h.01"
}]];
const Signal = [["path", {
  d: "M2 20h.01"
}], ["path", {
  d: "M7 20v-4"
}], ["path", {
  d: "M12 20v-8"
}], ["path", {
  d: "M17 20V8"
}], ["path", {
  d: "M22 4v16"
}]];
const Signature = [["path", {
  d: "m21 17-2.156-1.868A.5.5 0 0 0 18 15.5v.5a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1c0-2.545-3.991-3.97-8.5-4a1 1 0 0 0 0 5c4.153 0 4.745-11.295 5.708-13.5a2.5 2.5 0 1 1 3.31 3.284"
}], ["path", {
  d: "M3 21h18"
}]];
const SignpostBig = [["path", {
  d: "M10 9H4L2 7l2-2h6"
}], ["path", {
  d: "M14 5h6l2 2-2 2h-6"
}], ["path", {
  d: "M10 22V4a2 2 0 1 1 4 0v18"
}], ["path", {
  d: "M8 22h8"
}]];
const Signpost = [["path", {
  d: "M12 13v8"
}], ["path", {
  d: "M12 3v3"
}], ["path", {
  d: "M18 6a2 2 0 0 1 1.387.56l2.307 2.22a1 1 0 0 1 0 1.44l-2.307 2.22A2 2 0 0 1 18 13H6a2 2 0 0 1-1.387-.56l-2.306-2.22a1 1 0 0 1 0-1.44l2.306-2.22A2 2 0 0 1 6 6z"
}]];
const Siren = [["path", {
  d: "M7 18v-6a5 5 0 1 1 10 0v6"
}], ["path", {
  d: "M5 21a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2z"
}], ["path", {
  d: "M21 12h1"
}], ["path", {
  d: "M18.5 4.5 18 5"
}], ["path", {
  d: "M2 12h1"
}], ["path", {
  d: "M12 2v1"
}], ["path", {
  d: "m4.929 4.929.707.707"
}], ["path", {
  d: "M12 12v6"
}]];
const SkipBack = [["polygon", {
  points: "19 20 9 12 19 4 19 20"
}], ["line", {
  x1: "5",
  x2: "5",
  y1: "19",
  y2: "5"
}]];
const SkipForward = [["polygon", {
  points: "5 4 15 12 5 20 5 4"
}], ["line", {
  x1: "19",
  x2: "19",
  y1: "5",
  y2: "19"
}]];
const Slack = [["rect", {
  width: "3",
  height: "8",
  x: "13",
  y: "2",
  rx: "1.5"
}], ["path", {
  d: "M19 8.5V10h1.5A1.5 1.5 0 1 0 19 8.5"
}], ["rect", {
  width: "3",
  height: "8",
  x: "8",
  y: "14",
  rx: "1.5"
}], ["path", {
  d: "M5 15.5V14H3.5A1.5 1.5 0 1 0 5 15.5"
}], ["rect", {
  width: "8",
  height: "3",
  x: "14",
  y: "13",
  rx: "1.5"
}], ["path", {
  d: "M15.5 19H14v1.5a1.5 1.5 0 1 0 1.5-1.5"
}], ["rect", {
  width: "8",
  height: "3",
  x: "2",
  y: "8",
  rx: "1.5"
}], ["path", {
  d: "M8.5 5H10V3.5A1.5 1.5 0 1 0 8.5 5"
}]];
const Slash = [["path", {
  d: "M22 2 2 22"
}]];
const Skull = [["path", {
  d: "m12.5 17-.5-1-.5 1h1z"
}], ["path", {
  d: "M15 22a1 1 0 0 0 1-1v-1a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20v1a1 1 0 0 0 1 1z"
}], ["circle", {
  cx: "15",
  cy: "12",
  r: "1"
}], ["circle", {
  cx: "9",
  cy: "12",
  r: "1"
}]];
const Slice = [["path", {
  d: "M11 16.586V19a1 1 0 0 1-1 1H2L18.37 3.63a1 1 0 1 1 3 3l-9.663 9.663a1 1 0 0 1-1.414 0L8 14"
}]];
const SlidersHorizontal = [["line", {
  x1: "21",
  x2: "14",
  y1: "4",
  y2: "4"
}], ["line", {
  x1: "10",
  x2: "3",
  y1: "4",
  y2: "4"
}], ["line", {
  x1: "21",
  x2: "12",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "8",
  x2: "3",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "21",
  x2: "16",
  y1: "20",
  y2: "20"
}], ["line", {
  x1: "12",
  x2: "3",
  y1: "20",
  y2: "20"
}], ["line", {
  x1: "14",
  x2: "14",
  y1: "2",
  y2: "6"
}], ["line", {
  x1: "8",
  x2: "8",
  y1: "10",
  y2: "14"
}], ["line", {
  x1: "16",
  x2: "16",
  y1: "18",
  y2: "22"
}]];
const SlidersVertical = [["line", {
  x1: "4",
  x2: "4",
  y1: "21",
  y2: "14"
}], ["line", {
  x1: "4",
  x2: "4",
  y1: "10",
  y2: "3"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "21",
  y2: "12"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "8",
  y2: "3"
}], ["line", {
  x1: "20",
  x2: "20",
  y1: "21",
  y2: "16"
}], ["line", {
  x1: "20",
  x2: "20",
  y1: "12",
  y2: "3"
}], ["line", {
  x1: "2",
  x2: "6",
  y1: "14",
  y2: "14"
}], ["line", {
  x1: "10",
  x2: "14",
  y1: "8",
  y2: "8"
}], ["line", {
  x1: "18",
  x2: "22",
  y1: "16",
  y2: "16"
}]];
const SmartphoneCharging = [["rect", {
  width: "14",
  height: "20",
  x: "5",
  y: "2",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M12.667 8 10 12h4l-2.667 4"
}]];
const SmartphoneNfc = [["rect", {
  width: "7",
  height: "12",
  x: "2",
  y: "6",
  rx: "1"
}], ["path", {
  d: "M13 8.32a7.43 7.43 0 0 1 0 7.36"
}], ["path", {
  d: "M16.46 6.21a11.76 11.76 0 0 1 0 11.58"
}], ["path", {
  d: "M19.91 4.1a15.91 15.91 0 0 1 .01 15.8"
}]];
const SmilePlus = [["path", {
  d: "M22 11v1a10 10 0 1 1-9-10"
}], ["path", {
  d: "M8 14s1.5 2 4 2 4-2 4-2"
}], ["line", {
  x1: "9",
  x2: "9.01",
  y1: "9",
  y2: "9"
}], ["line", {
  x1: "15",
  x2: "15.01",
  y1: "9",
  y2: "9"
}], ["path", {
  d: "M16 5h6"
}], ["path", {
  d: "M19 2v6"
}]];
const Smartphone = [["rect", {
  width: "14",
  height: "20",
  x: "5",
  y: "2",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M12 18h.01"
}]];
const Smile = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["path", {
  d: "M8 14s1.5 2 4 2 4-2 4-2"
}], ["line", {
  x1: "9",
  x2: "9.01",
  y1: "9",
  y2: "9"
}], ["line", {
  x1: "15",
  x2: "15.01",
  y1: "9",
  y2: "9"
}]];
const Snail = [["path", {
  d: "M2 13a6 6 0 1 0 12 0 4 4 0 1 0-8 0 2 2 0 0 0 4 0"
}], ["circle", {
  cx: "10",
  cy: "13",
  r: "8"
}], ["path", {
  d: "M2 21h12c4.4 0 8-3.6 8-8V7a2 2 0 1 0-4 0v6"
}], ["path", {
  d: "M18 3 19.1 5.2"
}], ["path", {
  d: "M22 3 20.9 5.2"
}]];
const Snowflake = [["path", {
  d: "m10 20-1.25-2.5L6 18"
}], ["path", {
  d: "M10 4 8.75 6.5 6 6"
}], ["path", {
  d: "m14 20 1.25-2.5L18 18"
}], ["path", {
  d: "m14 4 1.25 2.5L18 6"
}], ["path", {
  d: "m17 21-3-6h-4"
}], ["path", {
  d: "m17 3-3 6 1.5 3"
}], ["path", {
  d: "M2 12h6.5L10 9"
}], ["path", {
  d: "m20 10-1.5 2 1.5 2"
}], ["path", {
  d: "M22 12h-6.5L14 15"
}], ["path", {
  d: "m4 10 1.5 2L4 14"
}], ["path", {
  d: "m7 21 3-6-1.5-3"
}], ["path", {
  d: "m7 3 3 6h4"
}]];
const Sofa = [["path", {
  d: "M20 9V6a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v3"
}], ["path", {
  d: "M2 16a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v1.5a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5V11a2 2 0 0 0-4 0z"
}], ["path", {
  d: "M4 18v2"
}], ["path", {
  d: "M20 18v2"
}], ["path", {
  d: "M12 4v9"
}]];
const Space = [["path", {
  d: "M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1"
}]];
const Spade = [["path", {
  d: "M5 9c-1.5 1.5-3 3.2-3 5.5A5.5 5.5 0 0 0 7.5 20c1.8 0 3-.5 4.5-2 1.5 1.5 2.7 2 4.5 2a5.5 5.5 0 0 0 5.5-5.5c0-2.3-1.5-4-3-5.5l-7-7-7 7Z"
}], ["path", {
  d: "M12 18v4"
}]];
const Soup = [["path", {
  d: "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z"
}], ["path", {
  d: "M7 21h10"
}], ["path", {
  d: "M19.5 12 22 6"
}], ["path", {
  d: "M16.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.73 1.62"
}], ["path", {
  d: "M11.25 3c.27.1.8.53.74 1.36-.05.83-.93 1.2-.98 2.02-.06.78.33 1.24.72 1.62"
}], ["path", {
  d: "M6.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.74 1.62"
}]];
const Sparkle = [["path", {
  d: "M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z"
}]];
const Sparkles = [["path", {
  d: "M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z"
}], ["path", {
  d: "M20 3v4"
}], ["path", {
  d: "M22 5h-4"
}], ["path", {
  d: "M4 17v2"
}], ["path", {
  d: "M5 18H3"
}]];
const Speaker = [["rect", {
  width: "16",
  height: "20",
  x: "4",
  y: "2",
  rx: "2"
}], ["path", {
  d: "M12 6h.01"
}], ["circle", {
  cx: "12",
  cy: "14",
  r: "4"
}], ["path", {
  d: "M12 14h.01"
}]];
const Speech = [["path", {
  d: "M8.8 20v-4.1l1.9.2a2.3 2.3 0 0 0 2.164-2.1V8.3A5.37 5.37 0 0 0 2 8.25c0 2.8.656 3.054 1 4.55a5.77 5.77 0 0 1 .029 2.758L2 20"
}], ["path", {
  d: "M19.8 17.8a7.5 7.5 0 0 0 .003-10.603"
}], ["path", {
  d: "M17 15a3.5 3.5 0 0 0-.025-4.975"
}]];
const SpellCheck2 = [["path", {
  d: "m6 16 6-12 6 12"
}], ["path", {
  d: "M8 12h8"
}], ["path", {
  d: "M4 21c1.1 0 1.1-1 2.3-1s1.1 1 2.3 1c1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1"
}]];
const SpellCheck = [["path", {
  d: "m6 16 6-12 6 12"
}], ["path", {
  d: "M8 12h8"
}], ["path", {
  d: "m16 20 2 2 4-4"
}]];
const Spline = [["circle", {
  cx: "19",
  cy: "5",
  r: "2"
}], ["circle", {
  cx: "5",
  cy: "19",
  r: "2"
}], ["path", {
  d: "M5 17A12 12 0 0 1 17 5"
}]];
const Split = [["path", {
  d: "M16 3h5v5"
}], ["path", {
  d: "M8 3H3v5"
}], ["path", {
  d: "M12 22v-8.3a4 4 0 0 0-1.172-2.872L3 3"
}], ["path", {
  d: "m15 9 6-6"
}]];
const SprayCan = [["path", {
  d: "M3 3h.01"
}], ["path", {
  d: "M7 5h.01"
}], ["path", {
  d: "M11 7h.01"
}], ["path", {
  d: "M3 7h.01"
}], ["path", {
  d: "M7 9h.01"
}], ["path", {
  d: "M3 11h.01"
}], ["rect", {
  width: "4",
  height: "4",
  x: "15",
  y: "5"
}], ["path", {
  d: "m19 9 2 2v10c0 .6-.4 1-1 1h-6c-.6 0-1-.4-1-1V11l2-2"
}], ["path", {
  d: "m13 14 8-2"
}], ["path", {
  d: "m13 19 8-2"
}]];
const Sprout = [["path", {
  d: "M7 20h10"
}], ["path", {
  d: "M10 20c5.5-2.5.8-6.4 3-10"
}], ["path", {
  d: "M9.5 9.4c1.1.8 1.8 2.2 2.3 3.7-2 .4-3.5.4-4.8-.3-1.2-.6-2.3-1.9-3-4.2 2.8-.5 4.4 0 5.5.8z"
}], ["path", {
  d: "M14.1 6a7 7 0 0 0-1.1 4c1.9-.1 3.3-.6 4.3-1.4 1-1 1.6-2.3 1.7-4.6-2.7.1-4 1-4.9 2z"
}]];
const SquareActivity = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M17 12h-2l-2 5-2-10-2 5H7"
}]];
const SquareArrowDownLeft = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "m16 8-8 8"
}], ["path", {
  d: "M16 16H8V8"
}]];
const SquareArrowDownRight = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "m8 8 8 8"
}], ["path", {
  d: "M16 8v8H8"
}]];
const SquareArrowDown = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M12 8v8"
}], ["path", {
  d: "m8 12 4 4 4-4"
}]];
const SquareArrowLeft = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "m12 8-4 4 4 4"
}], ["path", {
  d: "M16 12H8"
}]];
const SquareArrowOutDownLeft = [["path", {
  d: "M13 21h6a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v6"
}], ["path", {
  d: "m3 21 9-9"
}], ["path", {
  d: "M9 21H3v-6"
}]];
const SquareArrowOutDownRight = [["path", {
  d: "M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6"
}], ["path", {
  d: "m21 21-9-9"
}], ["path", {
  d: "M21 15v6h-6"
}]];
const SquareArrowOutUpLeft = [["path", {
  d: "M13 3h6a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-6"
}], ["path", {
  d: "m3 3 9 9"
}], ["path", {
  d: "M3 9V3h6"
}]];
const SquareArrowOutUpRight = [["path", {
  d: "M21 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h6"
}], ["path", {
  d: "m21 3-9 9"
}], ["path", {
  d: "M15 3h6v6"
}]];
const SquareArrowRight = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M8 12h8"
}], ["path", {
  d: "m12 16 4-4-4-4"
}]];
const SquareArrowUpLeft = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M8 16V8h8"
}], ["path", {
  d: "M16 16 8 8"
}]];
const SquareArrowUpRight = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M8 8h8v8"
}], ["path", {
  d: "m8 16 8-8"
}]];
const SquareArrowUp = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "m16 12-4-4-4 4"
}], ["path", {
  d: "M12 16V8"
}]];
const SquareAsterisk = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M12 8v8"
}], ["path", {
  d: "m8.5 14 7-4"
}], ["path", {
  d: "m8.5 10 7 4"
}]];
const SquareChartGantt = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M9 8h7"
}], ["path", {
  d: "M8 12h6"
}], ["path", {
  d: "M11 16h5"
}]];
const SquareBottomDashedScissors = [["path", {
  d: "M4 22a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2"
}], ["path", {
  d: "M10 22H8"
}], ["path", {
  d: "M16 22h-2"
}], ["circle", {
  cx: "8",
  cy: "8",
  r: "2"
}], ["path", {
  d: "M9.414 9.414 12 12"
}], ["path", {
  d: "M14.8 14.8 18 18"
}], ["circle", {
  cx: "8",
  cy: "16",
  r: "2"
}], ["path", {
  d: "m18 6-8.586 8.586"
}]];
const SquareCheckBig = [["path", {
  d: "M21 10.5V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h12.5"
}], ["path", {
  d: "m9 11 3 3L22 4"
}]];
const SquareCheck = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "m9 12 2 2 4-4"
}]];
const SquareChevronDown = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "m16 10-4 4-4-4"
}]];
const SquareChevronLeft = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "m14 16-4-4 4-4"
}]];
const SquareChevronRight = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "m10 8 4 4-4 4"
}]];
const SquareChevronUp = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "m8 14 4-4 4 4"
}]];
const SquareCode = [["path", {
  d: "M10 9.5 8 12l2 2.5"
}], ["path", {
  d: "m14 9.5 2 2.5-2 2.5"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}]];
const SquareDashedBottomCode = [["path", {
  d: "M10 9.5 8 12l2 2.5"
}], ["path", {
  d: "M14 21h1"
}], ["path", {
  d: "m14 9.5 2 2.5-2 2.5"
}], ["path", {
  d: "M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2"
}], ["path", {
  d: "M9 21h1"
}]];
const SquareDashedBottom = [["path", {
  d: "M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2"
}], ["path", {
  d: "M9 21h1"
}], ["path", {
  d: "M14 21h1"
}]];
const SquareDashedKanban = [["path", {
  d: "M8 7v7"
}], ["path", {
  d: "M12 7v4"
}], ["path", {
  d: "M16 7v9"
}], ["path", {
  d: "M5 3a2 2 0 0 0-2 2"
}], ["path", {
  d: "M9 3h1"
}], ["path", {
  d: "M14 3h1"
}], ["path", {
  d: "M19 3a2 2 0 0 1 2 2"
}], ["path", {
  d: "M21 9v1"
}], ["path", {
  d: "M21 14v1"
}], ["path", {
  d: "M21 19a2 2 0 0 1-2 2"
}], ["path", {
  d: "M14 21h1"
}], ["path", {
  d: "M9 21h1"
}], ["path", {
  d: "M5 21a2 2 0 0 1-2-2"
}], ["path", {
  d: "M3 14v1"
}], ["path", {
  d: "M3 9v1"
}]];
const SquareDashedMousePointer = [["path", {
  d: "M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z"
}], ["path", {
  d: "M5 3a2 2 0 0 0-2 2"
}], ["path", {
  d: "M19 3a2 2 0 0 1 2 2"
}], ["path", {
  d: "M5 21a2 2 0 0 1-2-2"
}], ["path", {
  d: "M9 3h1"
}], ["path", {
  d: "M9 21h2"
}], ["path", {
  d: "M14 3h1"
}], ["path", {
  d: "M3 9v1"
}], ["path", {
  d: "M21 9v2"
}], ["path", {
  d: "M3 14v1"
}]];
const SquareDivide = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}], ["line", {
  x1: "8",
  x2: "16",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "16",
  y2: "16"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "8",
  y2: "8"
}]];
const SquareDashed = [["path", {
  d: "M5 3a2 2 0 0 0-2 2"
}], ["path", {
  d: "M19 3a2 2 0 0 1 2 2"
}], ["path", {
  d: "M21 19a2 2 0 0 1-2 2"
}], ["path", {
  d: "M5 21a2 2 0 0 1-2-2"
}], ["path", {
  d: "M9 3h1"
}], ["path", {
  d: "M9 21h1"
}], ["path", {
  d: "M14 3h1"
}], ["path", {
  d: "M14 21h1"
}], ["path", {
  d: "M3 9v1"
}], ["path", {
  d: "M21 9v1"
}], ["path", {
  d: "M3 14v1"
}], ["path", {
  d: "M21 14v1"
}]];
const SquareDot = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "1"
}]];
const SquareEqual = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M7 10h10"
}], ["path", {
  d: "M7 14h10"
}]];
const SquareFunction = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3"
}], ["path", {
  d: "M9 11.2h5.7"
}]];
const SquareKanban = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M8 7v7"
}], ["path", {
  d: "M12 7v4"
}], ["path", {
  d: "M16 7v9"
}]];
const SquareLibrary = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M7 7v10"
}], ["path", {
  d: "M11 7v10"
}], ["path", {
  d: "m15 7 2 10"
}]];
const SquareM = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M8 16V8l4 4 4-4v8"
}]];
const SquareMenu = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M7 8h10"
}], ["path", {
  d: "M7 12h10"
}], ["path", {
  d: "M7 16h10"
}]];
const SquareMinus = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M8 12h8"
}]];
const SquareMousePointer = [["path", {
  d: "M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z"
}], ["path", {
  d: "M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6"
}]];
const SquareParkingOff = [["path", {
  d: "M3.6 3.6A2 2 0 0 1 5 3h14a2 2 0 0 1 2 2v14a2 2 0 0 1-.59 1.41"
}], ["path", {
  d: "M3 8.7V19a2 2 0 0 0 2 2h10.3"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M13 13a3 3 0 1 0 0-6H9v2"
}], ["path", {
  d: "M9 17v-2.3"
}]];
const SquareParking = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M9 17V7h4a3 3 0 0 1 0 6H9"
}]];
const SquarePercent = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "m15 9-6 6"
}], ["path", {
  d: "M9 9h.01"
}], ["path", {
  d: "M15 15h.01"
}]];
const SquarePen = [["path", {
  d: "M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"
}], ["path", {
  d: "M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z"
}]];
const SquarePi = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M7 7h10"
}], ["path", {
  d: "M10 7v10"
}], ["path", {
  d: "M16 17a2 2 0 0 1-2-2V7"
}]];
const SquarePlay = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "m9 8 6 4-6 4Z"
}]];
const SquarePilcrow = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M12 12H9.5a2.5 2.5 0 0 1 0-5H17"
}], ["path", {
  d: "M12 7v10"
}], ["path", {
  d: "M16 7v10"
}]];
const SquarePlus = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M8 12h8"
}], ["path", {
  d: "M12 8v8"
}]];
const SquarePower = [["path", {
  d: "M12 7v4"
}], ["path", {
  d: "M7.998 9.003a5 5 0 1 0 8-.005"
}], ["rect", {
  x: "3",
  y: "3",
  width: "18",
  height: "18",
  rx: "2"
}]];
const SquareRadical = [["path", {
  d: "M7 12h2l2 5 2-10h4"
}], ["rect", {
  x: "3",
  y: "3",
  width: "18",
  height: "18",
  rx: "2"
}]];
const SquareRoundCorner = [["path", {
  d: "M21 11a8 8 0 0 0-8-8"
}], ["path", {
  d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"
}]];
const SquareScissors = [["rect", {
  width: "20",
  height: "20",
  x: "2",
  y: "2",
  rx: "2"
}], ["circle", {
  cx: "8",
  cy: "8",
  r: "2"
}], ["path", {
  d: "M9.414 9.414 12 12"
}], ["path", {
  d: "M14.8 14.8 18 18"
}], ["circle", {
  cx: "8",
  cy: "16",
  r: "2"
}], ["path", {
  d: "m18 6-8.586 8.586"
}]];
const SquareSigma = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M16 8.9V7H8l4 5-4 5h8v-1.9"
}]];
const SquareSlash = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["line", {
  x1: "9",
  x2: "15",
  y1: "15",
  y2: "9"
}]];
const SquareSplitHorizontal = [["path", {
  d: "M8 19H5c-1 0-2-1-2-2V7c0-1 1-2 2-2h3"
}], ["path", {
  d: "M16 5h3c1 0 2 1 2 2v10c0 1-1 2-2 2h-3"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "4",
  y2: "20"
}]];
const SquareSplitVertical = [["path", {
  d: "M5 8V5c0-1 1-2 2-2h10c1 0 2 1 2 2v3"
}], ["path", {
  d: "M19 16v3c0 1-1 2-2 2H7c-1 0-2-1-2-2v-3"
}], ["line", {
  x1: "4",
  x2: "20",
  y1: "12",
  y2: "12"
}]];
const SquareSquare = [["rect", {
  x: "3",
  y: "3",
  width: "18",
  height: "18",
  rx: "2"
}], ["rect", {
  x: "8",
  y: "8",
  width: "8",
  height: "8",
  rx: "1"
}]];
const SquareStack = [["path", {
  d: "M4 10c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2"
}], ["path", {
  d: "M10 16c-1.1 0-2-.9-2-2v-4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2"
}], ["rect", {
  width: "8",
  height: "8",
  x: "14",
  y: "14",
  rx: "2"
}]];
const SquareTerminal = [["path", {
  d: "m7 11 2-2-2-2"
}], ["path", {
  d: "M11 13h4"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}]];
const SquareUserRound = [["path", {
  d: "M18 21a6 6 0 0 0-12 0"
}], ["circle", {
  cx: "12",
  cy: "11",
  r: "4"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}]];
const SquareUser = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["circle", {
  cx: "12",
  cy: "10",
  r: "3"
}], ["path", {
  d: "M7 21v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2"
}]];
const SquareX = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}], ["path", {
  d: "m15 9-6 6"
}], ["path", {
  d: "m9 9 6 6"
}]];
const Square = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}]];
const Squircle = [["path", {
  d: "M12 3c7.2 0 9 1.8 9 9s-1.8 9-9 9-9-1.8-9-9 1.8-9 9-9"
}]];
const Squirrel = [["path", {
  d: "M15.236 22a3 3 0 0 0-2.2-5"
}], ["path", {
  d: "M16 20a3 3 0 0 1 3-3h1a2 2 0 0 0 2-2v-2a4 4 0 0 0-4-4V4"
}], ["path", {
  d: "M18 13h.01"
}], ["path", {
  d: "M18 6a4 4 0 0 0-4 4 7 7 0 0 0-7 7c0-5 4-5 4-10.5a4.5 4.5 0 1 0-9 0 2.5 2.5 0 0 0 5 0C7 10 3 11 3 17c0 2.8 2.2 5 5 5h10"
}]];
const Stamp = [["path", {
  d: "M5 22h14"
}], ["path", {
  d: "M19.27 13.73A2.5 2.5 0 0 0 17.5 13h-11A2.5 2.5 0 0 0 4 15.5V17a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-1.5c0-.66-.26-1.3-.73-1.77Z"
}], ["path", {
  d: "M14 13V8.5C14 7 15 7 15 5a3 3 0 0 0-3-3c-1.66 0-3 1-3 3s1 2 1 3.5V13"
}]];
const StarHalf = [["path", {
  d: "M12 18.338a2.1 2.1 0 0 0-.987.244L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.12 2.12 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.12 2.12 0 0 0 1.597-1.16l2.309-4.679A.53.53 0 0 1 12 2"
}]];
const StarOff = [["path", {
  d: "M8.34 8.34 2 9.27l5 4.87L5.82 21 12 17.77 18.18 21l-.59-3.43"
}], ["path", {
  d: "M18.42 12.76 22 9.27l-6.91-1L12 2l-1.44 2.91"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Star = [["path", {
  d: "M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z"
}]];
const StepBack = [["line", {
  x1: "18",
  x2: "18",
  y1: "20",
  y2: "4"
}], ["polygon", {
  points: "14,20 4,12 14,4"
}]];
const StepForward = [["line", {
  x1: "6",
  x2: "6",
  y1: "4",
  y2: "20"
}], ["polygon", {
  points: "10,4 20,12 10,20"
}]];
const Stethoscope = [["path", {
  d: "M11 2v2"
}], ["path", {
  d: "M5 2v2"
}], ["path", {
  d: "M5 3H4a2 2 0 0 0-2 2v4a6 6 0 0 0 12 0V5a2 2 0 0 0-2-2h-1"
}], ["path", {
  d: "M8 15a6 6 0 0 0 12 0v-3"
}], ["circle", {
  cx: "20",
  cy: "10",
  r: "2"
}]];
const Sticker = [["path", {
  d: "M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z"
}], ["path", {
  d: "M14 3v4a2 2 0 0 0 2 2h4"
}], ["path", {
  d: "M8 13h.01"
}], ["path", {
  d: "M16 13h.01"
}], ["path", {
  d: "M10 16s.8 1 2 1c1.3 0 2-1 2-1"
}]];
const StickyNote = [["path", {
  d: "M16 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V8Z"
}], ["path", {
  d: "M15 3v4a2 2 0 0 0 2 2h4"
}]];
const Store = [["path", {
  d: "m2 7 4.41-4.41A2 2 0 0 1 7.83 2h8.34a2 2 0 0 1 1.42.59L22 7"
}], ["path", {
  d: "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"
}], ["path", {
  d: "M15 22v-4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4"
}], ["path", {
  d: "M2 7h20"
}], ["path", {
  d: "M22 7v3a2 2 0 0 1-2 2a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 16 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 12 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 8 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 4 12a2 2 0 0 1-2-2V7"
}]];
const StretchHorizontal = [["rect", {
  width: "20",
  height: "6",
  x: "2",
  y: "4",
  rx: "2"
}], ["rect", {
  width: "20",
  height: "6",
  x: "2",
  y: "14",
  rx: "2"
}]];
const StretchVertical = [["rect", {
  width: "6",
  height: "20",
  x: "4",
  y: "2",
  rx: "2"
}], ["rect", {
  width: "6",
  height: "20",
  x: "14",
  y: "2",
  rx: "2"
}]];
const Strikethrough = [["path", {
  d: "M16 4H9a3 3 0 0 0-2.83 4"
}], ["path", {
  d: "M14 12a4 4 0 0 1 0 8H6"
}], ["line", {
  x1: "4",
  x2: "20",
  y1: "12",
  y2: "12"
}]];
const Subscript = [["path", {
  d: "m4 5 8 8"
}], ["path", {
  d: "m12 5-8 8"
}], ["path", {
  d: "M20 19h-4c0-1.5.44-2 1.5-2.5S20 15.33 20 14c0-.47-.17-.93-.48-1.29a2.11 2.11 0 0 0-2.62-.44c-.42.24-.74.62-.9 1.07"
}]];
const SunDim = [["circle", {
  cx: "12",
  cy: "12",
  r: "4"
}], ["path", {
  d: "M12 4h.01"
}], ["path", {
  d: "M20 12h.01"
}], ["path", {
  d: "M12 20h.01"
}], ["path", {
  d: "M4 12h.01"
}], ["path", {
  d: "M17.657 6.343h.01"
}], ["path", {
  d: "M17.657 17.657h.01"
}], ["path", {
  d: "M6.343 17.657h.01"
}], ["path", {
  d: "M6.343 6.343h.01"
}]];
const SunMedium = [["circle", {
  cx: "12",
  cy: "12",
  r: "4"
}], ["path", {
  d: "M12 3v1"
}], ["path", {
  d: "M12 20v1"
}], ["path", {
  d: "M3 12h1"
}], ["path", {
  d: "M20 12h1"
}], ["path", {
  d: "m18.364 5.636-.707.707"
}], ["path", {
  d: "m6.343 17.657-.707.707"
}], ["path", {
  d: "m5.636 5.636.707.707"
}], ["path", {
  d: "m17.657 17.657.707.707"
}]];
const SunMoon = [["path", {
  d: "M12 8a2.83 2.83 0 0 0 4 4 4 4 0 1 1-4-4"
}], ["path", {
  d: "M12 2v2"
}], ["path", {
  d: "M12 20v2"
}], ["path", {
  d: "m4.9 4.9 1.4 1.4"
}], ["path", {
  d: "m17.7 17.7 1.4 1.4"
}], ["path", {
  d: "M2 12h2"
}], ["path", {
  d: "M20 12h2"
}], ["path", {
  d: "m6.3 17.7-1.4 1.4"
}], ["path", {
  d: "m19.1 4.9-1.4 1.4"
}]];
const SunSnow = [["path", {
  d: "M10 21v-1"
}], ["path", {
  d: "M10 4V3"
}], ["path", {
  d: "M10 9a3 3 0 0 0 0 6"
}], ["path", {
  d: "m14 20 1.25-2.5L18 18"
}], ["path", {
  d: "m14 4 1.25 2.5L18 6"
}], ["path", {
  d: "m17 21-3-6 1.5-3H22"
}], ["path", {
  d: "m17 3-3 6 1.5 3"
}], ["path", {
  d: "M2 12h1"
}], ["path", {
  d: "m20 10-1.5 2 1.5 2"
}], ["path", {
  d: "m3.64 18.36.7-.7"
}], ["path", {
  d: "m4.34 6.34-.7-.7"
}]];
const Sun = [["circle", {
  cx: "12",
  cy: "12",
  r: "4"
}], ["path", {
  d: "M12 2v2"
}], ["path", {
  d: "M12 20v2"
}], ["path", {
  d: "m4.93 4.93 1.41 1.41"
}], ["path", {
  d: "m17.66 17.66 1.41 1.41"
}], ["path", {
  d: "M2 12h2"
}], ["path", {
  d: "M20 12h2"
}], ["path", {
  d: "m6.34 17.66-1.41 1.41"
}], ["path", {
  d: "m19.07 4.93-1.41 1.41"
}]];
const Sunrise = [["path", {
  d: "M12 2v8"
}], ["path", {
  d: "m4.93 10.93 1.41 1.41"
}], ["path", {
  d: "M2 18h2"
}], ["path", {
  d: "M20 18h2"
}], ["path", {
  d: "m19.07 10.93-1.41 1.41"
}], ["path", {
  d: "M22 22H2"
}], ["path", {
  d: "m8 6 4-4 4 4"
}], ["path", {
  d: "M16 18a4 4 0 0 0-8 0"
}]];
const Sunset = [["path", {
  d: "M12 10V2"
}], ["path", {
  d: "m4.93 10.93 1.41 1.41"
}], ["path", {
  d: "M2 18h2"
}], ["path", {
  d: "M20 18h2"
}], ["path", {
  d: "m19.07 10.93-1.41 1.41"
}], ["path", {
  d: "M22 22H2"
}], ["path", {
  d: "m16 6-4 4-4-4"
}], ["path", {
  d: "M16 18a4 4 0 0 0-8 0"
}]];
const Superscript = [["path", {
  d: "m4 19 8-8"
}], ["path", {
  d: "m12 19-8-8"
}], ["path", {
  d: "M20 12h-4c0-1.5.442-2 1.5-2.5S20 8.334 20 7.002c0-.472-.17-.93-.484-1.29a2.105 2.105 0 0 0-2.617-.436c-.42.239-.738.614-.899 1.06"
}]];
const SwatchBook = [["path", {
  d: "M11 17a4 4 0 0 1-8 0V5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2Z"
}], ["path", {
  d: "M16.7 13H19a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H7"
}], ["path", {
  d: "M 7 17h.01"
}], ["path", {
  d: "m11 8 2.3-2.3a2.4 2.4 0 0 1 3.404.004L18.6 7.6a2.4 2.4 0 0 1 .026 3.434L9.9 19.8"
}]];
const SwissFranc = [["path", {
  d: "M10 21V3h8"
}], ["path", {
  d: "M6 16h9"
}], ["path", {
  d: "M10 9.5h7"
}]];
const SwitchCamera = [["path", {
  d: "M11 19H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5"
}], ["path", {
  d: "M13 5h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-5"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "3"
}], ["path", {
  d: "m18 22-3-3 3-3"
}], ["path", {
  d: "m6 2 3 3-3 3"
}]];
const Sword = [["polyline", {
  points: "14.5 17.5 3 6 3 3 6 3 17.5 14.5"
}], ["line", {
  x1: "13",
  x2: "19",
  y1: "19",
  y2: "13"
}], ["line", {
  x1: "16",
  x2: "20",
  y1: "16",
  y2: "20"
}], ["line", {
  x1: "19",
  x2: "21",
  y1: "21",
  y2: "19"
}]];
const Swords = [["polyline", {
  points: "14.5 17.5 3 6 3 3 6 3 17.5 14.5"
}], ["line", {
  x1: "13",
  x2: "19",
  y1: "19",
  y2: "13"
}], ["line", {
  x1: "16",
  x2: "20",
  y1: "16",
  y2: "20"
}], ["line", {
  x1: "19",
  x2: "21",
  y1: "21",
  y2: "19"
}], ["polyline", {
  points: "14.5 6.5 18 3 21 3 21 6 17.5 9.5"
}], ["line", {
  x1: "5",
  x2: "9",
  y1: "14",
  y2: "18"
}], ["line", {
  x1: "7",
  x2: "4",
  y1: "17",
  y2: "20"
}], ["line", {
  x1: "3",
  x2: "5",
  y1: "19",
  y2: "21"
}]];
const Syringe = [["path", {
  d: "m18 2 4 4"
}], ["path", {
  d: "m17 7 3-3"
}], ["path", {
  d: "M19 9 8.7 19.3c-1 1-2.5 1-3.4 0l-.6-.6c-1-1-1-2.5 0-3.4L15 5"
}], ["path", {
  d: "m9 11 4 4"
}], ["path", {
  d: "m5 19-3 3"
}], ["path", {
  d: "m14 4 6 6"
}]];
const Table2 = [["path", {
  d: "M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18"
}]];
const TableCellsMerge = [["path", {
  d: "M12 21v-6"
}], ["path", {
  d: "M12 9V3"
}], ["path", {
  d: "M3 15h18"
}], ["path", {
  d: "M3 9h18"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}]];
const TableCellsSplit = [["path", {
  d: "M12 15V9"
}], ["path", {
  d: "M3 15h18"
}], ["path", {
  d: "M3 9h18"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}]];
const TableColumnsSplit = [["path", {
  d: "M14 14v2"
}], ["path", {
  d: "M14 20v2"
}], ["path", {
  d: "M14 2v2"
}], ["path", {
  d: "M14 8v2"
}], ["path", {
  d: "M2 15h8"
}], ["path", {
  d: "M2 3h6a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H2"
}], ["path", {
  d: "M2 9h8"
}], ["path", {
  d: "M22 15h-4"
}], ["path", {
  d: "M22 3h-2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h2"
}], ["path", {
  d: "M22 9h-4"
}], ["path", {
  d: "M5 3v18"
}]];
const TableOfContents = [["path", {
  d: "M16 12H3"
}], ["path", {
  d: "M16 18H3"
}], ["path", {
  d: "M16 6H3"
}], ["path", {
  d: "M21 12h.01"
}], ["path", {
  d: "M21 18h.01"
}], ["path", {
  d: "M21 6h.01"
}]];
const TableProperties = [["path", {
  d: "M15 3v18"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M21 9H3"
}], ["path", {
  d: "M21 15H3"
}]];
const TableRowsSplit = [["path", {
  d: "M14 10h2"
}], ["path", {
  d: "M15 22v-8"
}], ["path", {
  d: "M15 2v4"
}], ["path", {
  d: "M2 10h2"
}], ["path", {
  d: "M20 10h2"
}], ["path", {
  d: "M3 19h18"
}], ["path", {
  d: "M3 22v-6a2 2 135 0 1 2-2h14a2 2 45 0 1 2 2v6"
}], ["path", {
  d: "M3 2v2a2 2 45 0 0 2 2h14a2 2 135 0 0 2-2V2"
}], ["path", {
  d: "M8 10h2"
}], ["path", {
  d: "M9 22v-8"
}], ["path", {
  d: "M9 2v4"
}]];
const Table = [["path", {
  d: "M12 3v18"
}], ["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M3 9h18"
}], ["path", {
  d: "M3 15h18"
}]];
const TabletSmartphone = [["rect", {
  width: "10",
  height: "14",
  x: "3",
  y: "8",
  rx: "2"
}], ["path", {
  d: "M5 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2h-2.4"
}], ["path", {
  d: "M8 18h.01"
}]];
const Tablet = [["rect", {
  width: "16",
  height: "20",
  x: "4",
  y: "2",
  rx: "2",
  ry: "2"
}], ["line", {
  x1: "12",
  x2: "12.01",
  y1: "18",
  y2: "18"
}]];
const Tablets = [["circle", {
  cx: "7",
  cy: "7",
  r: "5"
}], ["circle", {
  cx: "17",
  cy: "17",
  r: "5"
}], ["path", {
  d: "M12 17h10"
}], ["path", {
  d: "m3.46 10.54 7.08-7.08"
}]];
const Tag = [["path", {
  d: "M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"
}], ["circle", {
  cx: "7.5",
  cy: "7.5",
  r: ".5",
  fill: "currentColor"
}]];
const Tags = [["path", {
  d: "m15 5 6.3 6.3a2.4 2.4 0 0 1 0 3.4L17 19"
}], ["path", {
  d: "M9.586 5.586A2 2 0 0 0 8.172 5H3a1 1 0 0 0-1 1v5.172a2 2 0 0 0 .586 1.414L8.29 18.29a2.426 2.426 0 0 0 3.42 0l3.58-3.58a2.426 2.426 0 0 0 0-3.42z"
}], ["circle", {
  cx: "6.5",
  cy: "9.5",
  r: ".5",
  fill: "currentColor"
}]];
const Tally1 = [["path", {
  d: "M4 4v16"
}]];
const Tally2 = [["path", {
  d: "M4 4v16"
}], ["path", {
  d: "M9 4v16"
}]];
const Tally3 = [["path", {
  d: "M4 4v16"
}], ["path", {
  d: "M9 4v16"
}], ["path", {
  d: "M14 4v16"
}]];
const Tally4 = [["path", {
  d: "M4 4v16"
}], ["path", {
  d: "M9 4v16"
}], ["path", {
  d: "M14 4v16"
}], ["path", {
  d: "M19 4v16"
}]];
const Tally5 = [["path", {
  d: "M4 4v16"
}], ["path", {
  d: "M9 4v16"
}], ["path", {
  d: "M14 4v16"
}], ["path", {
  d: "M19 4v16"
}], ["path", {
  d: "M22 6 2 18"
}]];
const Tangent = [["circle", {
  cx: "17",
  cy: "4",
  r: "2"
}], ["path", {
  d: "M15.59 5.41 5.41 15.59"
}], ["circle", {
  cx: "4",
  cy: "17",
  r: "2"
}], ["path", {
  d: "M12 22s-4-9-1.5-11.5S22 12 22 12"
}]];
const Target = [["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "6"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "2"
}]];
const Telescope = [["path", {
  d: "m10.065 12.493-6.18 1.318a.934.934 0 0 1-1.108-.702l-.537-2.15a1.07 1.07 0 0 1 .691-1.265l13.504-4.44"
}], ["path", {
  d: "m13.56 11.747 4.332-.924"
}], ["path", {
  d: "m16 21-3.105-6.21"
}], ["path", {
  d: "M16.485 5.94a2 2 0 0 1 1.455-2.425l1.09-.272a1 1 0 0 1 1.212.727l1.515 6.06a1 1 0 0 1-.727 1.213l-1.09.272a2 2 0 0 1-2.425-1.455z"
}], ["path", {
  d: "m6.158 8.633 1.114 4.456"
}], ["path", {
  d: "m8 21 3.105-6.21"
}], ["circle", {
  cx: "12",
  cy: "13",
  r: "2"
}]];
const TentTree = [["circle", {
  cx: "4",
  cy: "4",
  r: "2"
}], ["path", {
  d: "m14 5 3-3 3 3"
}], ["path", {
  d: "m14 10 3-3 3 3"
}], ["path", {
  d: "M17 14V2"
}], ["path", {
  d: "M17 14H7l-5 8h20Z"
}], ["path", {
  d: "M8 14v8"
}], ["path", {
  d: "m9 14 5 8"
}]];
const Tent = [["path", {
  d: "M3.5 21 14 3"
}], ["path", {
  d: "M20.5 21 10 3"
}], ["path", {
  d: "M15.5 21 12 15l-3.5 6"
}], ["path", {
  d: "M2 21h20"
}]];
const Terminal = [["polyline", {
  points: "4 17 10 11 4 5"
}], ["line", {
  x1: "12",
  x2: "20",
  y1: "19",
  y2: "19"
}]];
const TestTubeDiagonal = [["path", {
  d: "M21 7 6.82 21.18a2.83 2.83 0 0 1-3.99-.01a2.83 2.83 0 0 1 0-4L17 3"
}], ["path", {
  d: "m16 2 6 6"
}], ["path", {
  d: "M12 16H4"
}]];
const TestTube = [["path", {
  d: "M14.5 2v17.5c0 1.4-1.1 2.5-2.5 2.5c-1.4 0-2.5-1.1-2.5-2.5V2"
}], ["path", {
  d: "M8.5 2h7"
}], ["path", {
  d: "M14.5 16h-5"
}]];
const TestTubes = [["path", {
  d: "M9 2v17.5A2.5 2.5 0 0 1 6.5 22A2.5 2.5 0 0 1 4 19.5V2"
}], ["path", {
  d: "M20 2v17.5a2.5 2.5 0 0 1-2.5 2.5a2.5 2.5 0 0 1-2.5-2.5V2"
}], ["path", {
  d: "M3 2h7"
}], ["path", {
  d: "M14 2h7"
}], ["path", {
  d: "M9 16H4"
}], ["path", {
  d: "M20 16h-5"
}]];
const TextCursorInput = [["path", {
  d: "M5 4h1a3 3 0 0 1 3 3 3 3 0 0 1 3-3h1"
}], ["path", {
  d: "M13 20h-1a3 3 0 0 1-3-3 3 3 0 0 1-3 3H5"
}], ["path", {
  d: "M5 16H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h1"
}], ["path", {
  d: "M13 8h7a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-7"
}], ["path", {
  d: "M9 7v10"
}]];
const TextCursor = [["path", {
  d: "M17 22h-1a4 4 0 0 1-4-4V6a4 4 0 0 1 4-4h1"
}], ["path", {
  d: "M7 22h1a4 4 0 0 0 4-4v-1"
}], ["path", {
  d: "M7 2h1a4 4 0 0 1 4 4v1"
}]];
const TextQuote = [["path", {
  d: "M17 6H3"
}], ["path", {
  d: "M21 12H8"
}], ["path", {
  d: "M21 18H8"
}], ["path", {
  d: "M3 12v6"
}]];
const TextSearch = [["path", {
  d: "M21 6H3"
}], ["path", {
  d: "M10 12H3"
}], ["path", {
  d: "M10 18H3"
}], ["circle", {
  cx: "17",
  cy: "15",
  r: "3"
}], ["path", {
  d: "m21 19-1.9-1.9"
}]];
const TextSelect = [["path", {
  d: "M5 3a2 2 0 0 0-2 2"
}], ["path", {
  d: "M19 3a2 2 0 0 1 2 2"
}], ["path", {
  d: "M21 19a2 2 0 0 1-2 2"
}], ["path", {
  d: "M5 21a2 2 0 0 1-2-2"
}], ["path", {
  d: "M9 3h1"
}], ["path", {
  d: "M9 21h1"
}], ["path", {
  d: "M14 3h1"
}], ["path", {
  d: "M14 21h1"
}], ["path", {
  d: "M3 9v1"
}], ["path", {
  d: "M21 9v1"
}], ["path", {
  d: "M3 14v1"
}], ["path", {
  d: "M21 14v1"
}], ["line", {
  x1: "7",
  x2: "15",
  y1: "8",
  y2: "8"
}], ["line", {
  x1: "7",
  x2: "17",
  y1: "12",
  y2: "12"
}], ["line", {
  x1: "7",
  x2: "13",
  y1: "16",
  y2: "16"
}]];
const Text = [["path", {
  d: "M17 6.1H3"
}], ["path", {
  d: "M21 12.1H3"
}], ["path", {
  d: "M15.1 18H3"
}]];
const Theater = [["path", {
  d: "M2 10s3-3 3-8"
}], ["path", {
  d: "M22 10s-3-3-3-8"
}], ["path", {
  d: "M10 2c0 4.4-3.6 8-8 8"
}], ["path", {
  d: "M14 2c0 4.4 3.6 8 8 8"
}], ["path", {
  d: "M2 10s2 2 2 5"
}], ["path", {
  d: "M22 10s-2 2-2 5"
}], ["path", {
  d: "M8 15h8"
}], ["path", {
  d: "M2 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1"
}], ["path", {
  d: "M14 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1"
}]];
const ThermometerSnowflake = [["path", {
  d: "m10 20-1.25-2.5L6 18"
}], ["path", {
  d: "M10 4 8.75 6.5 6 6"
}], ["path", {
  d: "M10.585 15H10"
}], ["path", {
  d: "M2 12h6.5L10 9"
}], ["path", {
  d: "M20 14.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0z"
}], ["path", {
  d: "m4 10 1.5 2L4 14"
}], ["path", {
  d: "m7 21 3-6-1.5-3"
}], ["path", {
  d: "m7 3 3 6h2"
}]];
const ThermometerSun = [["path", {
  d: "M12 9a4 4 0 0 0-2 7.5"
}], ["path", {
  d: "M12 3v2"
}], ["path", {
  d: "m6.6 18.4-1.4 1.4"
}], ["path", {
  d: "M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z"
}], ["path", {
  d: "M4 13H2"
}], ["path", {
  d: "M6.34 7.34 4.93 5.93"
}]];
const Thermometer = [["path", {
  d: "M14 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z"
}]];
const ThumbsDown = [["path", {
  d: "M17 14V2"
}], ["path", {
  d: "M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22a3.13 3.13 0 0 1-3-3.88Z"
}]];
const ThumbsUp = [["path", {
  d: "M7 10v12"
}], ["path", {
  d: "M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2a3.13 3.13 0 0 1 3 3.88Z"
}]];
const TicketCheck = [["path", {
  d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
}], ["path", {
  d: "m9 12 2 2 4-4"
}]];
const TicketMinus = [["path", {
  d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
}], ["path", {
  d: "M9 12h6"
}]];
const TicketPercent = [["path", {
  d: "M2 9a3 3 0 1 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 1 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
}], ["path", {
  d: "M9 9h.01"
}], ["path", {
  d: "m15 9-6 6"
}], ["path", {
  d: "M15 15h.01"
}]];
const TicketPlus = [["path", {
  d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
}], ["path", {
  d: "M9 12h6"
}], ["path", {
  d: "M12 9v6"
}]];
const TicketSlash = [["path", {
  d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
}], ["path", {
  d: "m9.5 14.5 5-5"
}]];
const TicketX = [["path", {
  d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
}], ["path", {
  d: "m9.5 14.5 5-5"
}], ["path", {
  d: "m9.5 9.5 5 5"
}]];
const Ticket = [["path", {
  d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
}], ["path", {
  d: "M13 5v2"
}], ["path", {
  d: "M13 17v2"
}], ["path", {
  d: "M13 11v2"
}]];
const TicketsPlane = [["path", {
  d: "M10.5 17h1.227a2 2 0 0 0 1.345-.52L18 12"
}], ["path", {
  d: "m12 13.5 3.75.5"
}], ["path", {
  d: "m4.5 8 10.58-5.06a1 1 0 0 1 1.342.488L18.5 8"
}], ["path", {
  d: "M6 10V8"
}], ["path", {
  d: "M6 14v1"
}], ["path", {
  d: "M6 19v2"
}], ["rect", {
  x: "2",
  y: "8",
  width: "20",
  height: "13",
  rx: "2"
}]];
const Tickets = [["path", {
  d: "m4.5 8 10.58-5.06a1 1 0 0 1 1.342.488L18.5 8"
}], ["path", {
  d: "M6 10V8"
}], ["path", {
  d: "M6 14v1"
}], ["path", {
  d: "M6 19v2"
}], ["rect", {
  x: "2",
  y: "8",
  width: "20",
  height: "13",
  rx: "2"
}]];
const TimerOff = [["path", {
  d: "M10 2h4"
}], ["path", {
  d: "M4.6 11a8 8 0 0 0 1.7 8.7 8 8 0 0 0 8.7 1.7"
}], ["path", {
  d: "M7.4 7.4a8 8 0 0 1 10.3 1 8 8 0 0 1 .9 10.2"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M12 12v-2"
}]];
const TimerReset = [["path", {
  d: "M10 2h4"
}], ["path", {
  d: "M12 14v-4"
}], ["path", {
  d: "M4 13a8 8 0 0 1 8-7 8 8 0 1 1-5.3 14L4 17.6"
}], ["path", {
  d: "M9 17H4v5"
}]];
const Timer = [["line", {
  x1: "10",
  x2: "14",
  y1: "2",
  y2: "2"
}], ["line", {
  x1: "12",
  x2: "15",
  y1: "14",
  y2: "11"
}], ["circle", {
  cx: "12",
  cy: "14",
  r: "8"
}]];
const ToggleLeft = [["rect", {
  width: "20",
  height: "12",
  x: "2",
  y: "6",
  rx: "6",
  ry: "6"
}], ["circle", {
  cx: "8",
  cy: "12",
  r: "2"
}]];
const ToggleRight = [["rect", {
  width: "20",
  height: "12",
  x: "2",
  y: "6",
  rx: "6",
  ry: "6"
}], ["circle", {
  cx: "16",
  cy: "12",
  r: "2"
}]];
const Toilet = [["path", {
  d: "M7 12h13a1 1 0 0 1 1 1 5 5 0 0 1-5 5h-.598a.5.5 0 0 0-.424.765l1.544 2.47a.5.5 0 0 1-.424.765H5.402a.5.5 0 0 1-.424-.765L7 18"
}], ["path", {
  d: "M8 18a5 5 0 0 1-5-5V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8"
}]];
const Tornado = [["path", {
  d: "M21 4H3"
}], ["path", {
  d: "M18 8H6"
}], ["path", {
  d: "M19 12H9"
}], ["path", {
  d: "M16 16h-6"
}], ["path", {
  d: "M11 20H9"
}]];
const Torus = [["ellipse", {
  cx: "12",
  cy: "11",
  rx: "3",
  ry: "2"
}], ["ellipse", {
  cx: "12",
  cy: "12.5",
  rx: "10",
  ry: "8.5"
}]];
const TouchpadOff = [["path", {
  d: "M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16"
}], ["path", {
  d: "M2 14h12"
}], ["path", {
  d: "M22 14h-2"
}], ["path", {
  d: "M12 20v-6"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "M22 16V6a2 2 0 0 0-2-2H10"
}]];
const Touchpad = [["rect", {
  width: "20",
  height: "16",
  x: "2",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M2 14h20"
}], ["path", {
  d: "M12 20v-6"
}]];
const TowerControl = [["path", {
  d: "M18.2 12.27 20 6H4l1.8 6.27a1 1 0 0 0 .95.73h10.5a1 1 0 0 0 .96-.73Z"
}], ["path", {
  d: "M8 13v9"
}], ["path", {
  d: "M16 22v-9"
}], ["path", {
  d: "m9 6 1 7"
}], ["path", {
  d: "m15 6-1 7"
}], ["path", {
  d: "M12 6V2"
}], ["path", {
  d: "M13 2h-2"
}]];
const ToyBrick = [["rect", {
  width: "18",
  height: "12",
  x: "3",
  y: "8",
  rx: "1"
}], ["path", {
  d: "M10 8V5c0-.6-.4-1-1-1H6a1 1 0 0 0-1 1v3"
}], ["path", {
  d: "M19 8V5c0-.6-.4-1-1-1h-3a1 1 0 0 0-1 1v3"
}]];
const TrafficCone = [["path", {
  d: "M9.3 6.2a4.55 4.55 0 0 0 5.4 0"
}], ["path", {
  d: "M7.9 10.7c.9.8 2.4 1.3 4.1 1.3s3.2-.5 4.1-1.3"
}], ["path", {
  d: "M13.9 3.5a1.93 1.93 0 0 0-3.8-.1l-3 10c-.1.2-.1.4-.1.6 0 1.7 2.2 3 5 3s5-1.3 5-3c0-.2 0-.4-.1-.5Z"
}], ["path", {
  d: "m7.5 12.2-4.7 2.7c-.5.3-.8.7-.8 1.1s.3.8.8 1.1l7.6 4.5c.9.5 2.1.5 3 0l7.6-4.5c.7-.3 1-.7 1-1.1s-.3-.8-.8-1.1l-4.7-2.8"
}]];
const Tractor = [["path", {
  d: "m10 11 11 .9a1 1 0 0 1 .8 1.1l-.665 4.158a1 1 0 0 1-.988.842H20"
}], ["path", {
  d: "M16 18h-5"
}], ["path", {
  d: "M18 5a1 1 0 0 0-1 1v5.573"
}], ["path", {
  d: "M3 4h8.129a1 1 0 0 1 .99.863L13 11.246"
}], ["path", {
  d: "M4 11V4"
}], ["path", {
  d: "M7 15h.01"
}], ["path", {
  d: "M8 10.1V4"
}], ["circle", {
  cx: "18",
  cy: "18",
  r: "2"
}], ["circle", {
  cx: "7",
  cy: "15",
  r: "5"
}]];
const TrainFrontTunnel = [["path", {
  d: "M2 22V12a10 10 0 1 1 20 0v10"
}], ["path", {
  d: "M15 6.8v1.4a3 2.8 0 1 1-6 0V6.8"
}], ["path", {
  d: "M10 15h.01"
}], ["path", {
  d: "M14 15h.01"
}], ["path", {
  d: "M10 19a4 4 0 0 1-4-4v-3a6 6 0 1 1 12 0v3a4 4 0 0 1-4 4Z"
}], ["path", {
  d: "m9 19-2 3"
}], ["path", {
  d: "m15 19 2 3"
}]];
const TrainTrack = [["path", {
  d: "M2 17 17 2"
}], ["path", {
  d: "m2 14 8 8"
}], ["path", {
  d: "m5 11 8 8"
}], ["path", {
  d: "m8 8 8 8"
}], ["path", {
  d: "m11 5 8 8"
}], ["path", {
  d: "m14 2 8 8"
}], ["path", {
  d: "M7 22 22 7"
}]];
const TrainFront = [["path", {
  d: "M8 3.1V7a4 4 0 0 0 8 0V3.1"
}], ["path", {
  d: "m9 15-1-1"
}], ["path", {
  d: "m15 15 1-1"
}], ["path", {
  d: "M9 19c-2.8 0-5-2.2-5-5v-4a8 8 0 0 1 16 0v4c0 2.8-2.2 5-5 5Z"
}], ["path", {
  d: "m8 19-2 3"
}], ["path", {
  d: "m16 19 2 3"
}]];
const TramFront = [["rect", {
  width: "16",
  height: "16",
  x: "4",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M4 11h16"
}], ["path", {
  d: "M12 3v8"
}], ["path", {
  d: "m8 19-2 3"
}], ["path", {
  d: "m18 22-2-3"
}], ["path", {
  d: "M8 15h.01"
}], ["path", {
  d: "M16 15h.01"
}]];
const Trash2 = [["path", {
  d: "M3 6h18"
}], ["path", {
  d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"
}], ["path", {
  d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"
}], ["line", {
  x1: "10",
  x2: "10",
  y1: "11",
  y2: "17"
}], ["line", {
  x1: "14",
  x2: "14",
  y1: "11",
  y2: "17"
}]];
const Transgender = [["path", {
  d: "M12 16v6"
}], ["path", {
  d: "M14 20h-4"
}], ["path", {
  d: "M18 2h4v4"
}], ["path", {
  d: "m2 2 7.17 7.17"
}], ["path", {
  d: "M2 5.355V2h3.357"
}], ["path", {
  d: "m22 2-7.17 7.17"
}], ["path", {
  d: "M8 5 5 8"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "4"
}]];
const Trash = [["path", {
  d: "M3 6h18"
}], ["path", {
  d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"
}], ["path", {
  d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"
}]];
const TreeDeciduous = [["path", {
  d: "M8 19a4 4 0 0 1-2.24-7.32A3.5 3.5 0 0 1 9 6.03V6a3 3 0 1 1 6 0v.04a3.5 3.5 0 0 1 3.24 5.65A4 4 0 0 1 16 19Z"
}], ["path", {
  d: "M12 19v3"
}]];
const TreePalm = [["path", {
  d: "M13 8c0-2.76-2.46-5-5.5-5S2 5.24 2 8h2l1-1 1 1h4"
}], ["path", {
  d: "M13 7.14A5.82 5.82 0 0 1 16.5 6c3.04 0 5.5 2.24 5.5 5h-3l-1-1-1 1h-3"
}], ["path", {
  d: "M5.89 9.71c-2.15 2.15-2.3 5.47-.35 7.43l4.24-4.25.7-.7.71-.71 2.12-2.12c-1.95-1.96-5.27-1.8-7.42.35"
}], ["path", {
  d: "M11 15.5c.5 2.5-.17 4.5-1 6.5h4c2-5.5-.5-12-1-14"
}]];
const TreePine = [["path", {
  d: "m17 14 3 3.3a1 1 0 0 1-.7 1.7H4.7a1 1 0 0 1-.7-1.7L7 14h-.3a1 1 0 0 1-.7-1.7L9 9h-.2A1 1 0 0 1 8 7.3L12 3l4 4.3a1 1 0 0 1-.8 1.7H15l3 3.3a1 1 0 0 1-.7 1.7H17Z"
}], ["path", {
  d: "M12 22v-3"
}]];
const Trees = [["path", {
  d: "M10 10v.2A3 3 0 0 1 8.9 16H5a3 3 0 0 1-1-5.8V10a3 3 0 0 1 6 0Z"
}], ["path", {
  d: "M7 16v6"
}], ["path", {
  d: "M13 19v3"
}], ["path", {
  d: "M12 19h8.3a1 1 0 0 0 .7-1.7L18 14h.3a1 1 0 0 0 .7-1.7L16 9h.2a1 1 0 0 0 .8-1.7L13 3l-1.4 1.5"
}]];
const Trello = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2",
  ry: "2"
}], ["rect", {
  width: "3",
  height: "9",
  x: "7",
  y: "7"
}], ["rect", {
  width: "3",
  height: "5",
  x: "14",
  y: "7"
}]];
const TrendingDown = [["polyline", {
  points: "22 17 13.5 8.5 8.5 13.5 2 7"
}], ["polyline", {
  points: "16 17 22 17 22 11"
}]];
const TrendingUpDown = [["path", {
  d: "M14.828 14.828 21 21"
}], ["path", {
  d: "M21 16v5h-5"
}], ["path", {
  d: "m21 3-9 9-4-4-6 6"
}], ["path", {
  d: "M21 8V3h-5"
}]];
const TrendingUp = [["polyline", {
  points: "22 7 13.5 15.5 8.5 10.5 2 17"
}], ["polyline", {
  points: "16 7 22 7 22 13"
}]];
const TriangleAlert = [["path", {
  d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3"
}], ["path", {
  d: "M12 9v4"
}], ["path", {
  d: "M12 17h.01"
}]];
const TriangleRight = [["path", {
  d: "M22 18a2 2 0 0 1-2 2H3c-1.1 0-1.3-.6-.4-1.3L20.4 4.3c.9-.7 1.6-.4 1.6.7Z"
}]];
const TriangleDashed = [["path", {
  d: "M10.17 4.193a2 2 0 0 1 3.666.013"
}], ["path", {
  d: "M14 21h2"
}], ["path", {
  d: "m15.874 7.743 1 1.732"
}], ["path", {
  d: "m18.849 12.952 1 1.732"
}], ["path", {
  d: "M21.824 18.18a2 2 0 0 1-1.835 2.824"
}], ["path", {
  d: "M4.024 21a2 2 0 0 1-1.839-2.839"
}], ["path", {
  d: "m5.136 12.952-1 1.732"
}], ["path", {
  d: "M8 21h2"
}], ["path", {
  d: "m8.102 7.743-1 1.732"
}]];
const Triangle = [["path", {
  d: "M13.73 4a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"
}]];
const Trophy = [["path", {
  d: "M6 9H4.5a2.5 2.5 0 0 1 0-5H6"
}], ["path", {
  d: "M18 9h1.5a2.5 2.5 0 0 0 0-5H18"
}], ["path", {
  d: "M4 22h16"
}], ["path", {
  d: "M10 14.66V17c0 .55-.47.98-.97 1.21C7.85 18.75 7 20.24 7 22"
}], ["path", {
  d: "M14 14.66V17c0 .55.47.98.97 1.21C16.15 18.75 17 20.24 17 22"
}], ["path", {
  d: "M18 2H6v7a6 6 0 0 0 12 0V2Z"
}]];
const Turtle = [["path", {
  d: "m12 10 2 4v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3a8 8 0 1 0-16 0v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3l2-4h4Z"
}], ["path", {
  d: "M4.82 7.9 8 10"
}], ["path", {
  d: "M15.18 7.9 12 10"
}], ["path", {
  d: "M16.93 10H20a2 2 0 0 1 0 4H2"
}]];
const Truck = [["path", {
  d: "M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2"
}], ["path", {
  d: "M15 18H9"
}], ["path", {
  d: "M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14"
}], ["circle", {
  cx: "17",
  cy: "18",
  r: "2"
}], ["circle", {
  cx: "7",
  cy: "18",
  r: "2"
}]];
const TvMinimalPlay = [["path", {
  d: "M10 7.75a.75.75 0 0 1 1.142-.638l3.664 2.249a.75.75 0 0 1 0 1.278l-3.664 2.25a.75.75 0 0 1-1.142-.64z"
}], ["path", {
  d: "M7 21h10"
}], ["rect", {
  width: "20",
  height: "14",
  x: "2",
  y: "3",
  rx: "2"
}]];
const TvMinimal = [["path", {
  d: "M7 21h10"
}], ["rect", {
  width: "20",
  height: "14",
  x: "2",
  y: "3",
  rx: "2"
}]];
const Tv = [["rect", {
  width: "20",
  height: "15",
  x: "2",
  y: "7",
  rx: "2",
  ry: "2"
}], ["polyline", {
  points: "17 2 12 7 7 2"
}]];
const Twitch = [["path", {
  d: "M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7"
}]];
const Twitter = [["path", {
  d: "M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"
}]];
const TypeOutline = [["path", {
  d: "M14 16.5a.5.5 0 0 0 .5.5h.5a2 2 0 0 1 0 4H9a2 2 0 0 1 0-4h.5a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5V8a2 2 0 0 1-4 0V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v3a2 2 0 0 1-4 0v-.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5Z"
}]];
const Type = [["polyline", {
  points: "4 7 4 4 20 4 20 7"
}], ["line", {
  x1: "9",
  x2: "15",
  y1: "20",
  y2: "20"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "4",
  y2: "20"
}]];
const UmbrellaOff = [["path", {
  d: "M12 2v1"
}], ["path", {
  d: "M15.5 21a1.85 1.85 0 0 1-3.5-1v-8H2a10 10 0 0 1 3.428-6.575"
}], ["path", {
  d: "M17.5 12H22A10 10 0 0 0 9.004 3.455"
}], ["path", {
  d: "m2 2 20 20"
}]];
const Umbrella = [["path", {
  d: "M22 12a10.06 10.06 1 0 0-20 0Z"
}], ["path", {
  d: "M12 12v8a2 2 0 0 0 4 0"
}], ["path", {
  d: "M12 2v1"
}]];
const Underline = [["path", {
  d: "M6 4v6a6 6 0 0 0 12 0V4"
}], ["line", {
  x1: "4",
  x2: "20",
  y1: "20",
  y2: "20"
}]];
const Undo2 = [["path", {
  d: "M9 14 4 9l5-5"
}], ["path", {
  d: "M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5a5.5 5.5 0 0 1-5.5 5.5H11"
}]];
const UndoDot = [["path", {
  d: "M21 17a9 9 0 0 0-15-6.7L3 13"
}], ["path", {
  d: "M3 7v6h6"
}], ["circle", {
  cx: "12",
  cy: "17",
  r: "1"
}]];
const Undo = [["path", {
  d: "M3 7v6h6"
}], ["path", {
  d: "M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13"
}]];
const UnfoldHorizontal = [["path", {
  d: "M16 12h6"
}], ["path", {
  d: "M8 12H2"
}], ["path", {
  d: "M12 2v2"
}], ["path", {
  d: "M12 8v2"
}], ["path", {
  d: "M12 14v2"
}], ["path", {
  d: "M12 20v2"
}], ["path", {
  d: "m19 15 3-3-3-3"
}], ["path", {
  d: "m5 9-3 3 3 3"
}]];
const UnfoldVertical = [["path", {
  d: "M12 22v-6"
}], ["path", {
  d: "M12 8V2"
}], ["path", {
  d: "M4 12H2"
}], ["path", {
  d: "M10 12H8"
}], ["path", {
  d: "M16 12h-2"
}], ["path", {
  d: "M22 12h-2"
}], ["path", {
  d: "m15 19-3 3-3-3"
}], ["path", {
  d: "m15 5-3-3-3 3"
}]];
const Ungroup = [["rect", {
  width: "8",
  height: "6",
  x: "5",
  y: "4",
  rx: "1"
}], ["rect", {
  width: "8",
  height: "6",
  x: "11",
  y: "14",
  rx: "1"
}]];
const University = [["circle", {
  cx: "12",
  cy: "10",
  r: "1"
}], ["path", {
  d: "M22 20V8h-4l-6-4-6 4H2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2"
}], ["path", {
  d: "M6 17v.01"
}], ["path", {
  d: "M6 13v.01"
}], ["path", {
  d: "M18 17v.01"
}], ["path", {
  d: "M18 13v.01"
}], ["path", {
  d: "M14 22v-5a2 2 0 0 0-2-2a2 2 0 0 0-2 2v5"
}]];
const Unlink2 = [["path", {
  d: "M15 7h2a5 5 0 0 1 0 10h-2m-6 0H7A5 5 0 0 1 7 7h2"
}]];
const Unlink = [["path", {
  d: "m18.84 12.25 1.72-1.71h-.02a5.004 5.004 0 0 0-.12-7.07 5.006 5.006 0 0 0-6.95 0l-1.72 1.71"
}], ["path", {
  d: "m5.17 11.75-1.71 1.71a5.004 5.004 0 0 0 .12 7.07 5.006 5.006 0 0 0 6.95 0l1.71-1.71"
}], ["line", {
  x1: "8",
  x2: "8",
  y1: "2",
  y2: "5"
}], ["line", {
  x1: "2",
  x2: "5",
  y1: "8",
  y2: "8"
}], ["line", {
  x1: "16",
  x2: "16",
  y1: "19",
  y2: "22"
}], ["line", {
  x1: "19",
  x2: "22",
  y1: "16",
  y2: "16"
}]];
const Unplug = [["path", {
  d: "m19 5 3-3"
}], ["path", {
  d: "m2 22 3-3"
}], ["path", {
  d: "M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z"
}], ["path", {
  d: "M7.5 13.5 10 11"
}], ["path", {
  d: "M10.5 16.5 13 14"
}], ["path", {
  d: "m12 6 6 6 2.3-2.3a2.4 2.4 0 0 0 0-3.4l-2.6-2.6a2.4 2.4 0 0 0-3.4 0Z"
}]];
const Upload = [["path", {
  d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"
}], ["polyline", {
  points: "17 8 12 3 7 8"
}], ["line", {
  x1: "12",
  x2: "12",
  y1: "3",
  y2: "15"
}]];
const Usb = [["circle", {
  cx: "10",
  cy: "7",
  r: "1"
}], ["circle", {
  cx: "4",
  cy: "20",
  r: "1"
}], ["path", {
  d: "M4.7 19.3 19 5"
}], ["path", {
  d: "m21 3-3 1 2 2Z"
}], ["path", {
  d: "M9.26 7.68 5 12l2 5"
}], ["path", {
  d: "m10 14 5 2 3.5-3.5"
}], ["path", {
  d: "m18 12 1-1 1 1-1 1Z"
}]];
const UserCheck = [["path", {
  d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"
}], ["circle", {
  cx: "9",
  cy: "7",
  r: "4"
}], ["polyline", {
  points: "16 11 18 13 22 9"
}]];
const UserCog = [["circle", {
  cx: "18",
  cy: "15",
  r: "3"
}], ["circle", {
  cx: "9",
  cy: "7",
  r: "4"
}], ["path", {
  d: "M10 15H6a4 4 0 0 0-4 4v2"
}], ["path", {
  d: "m21.7 16.4-.9-.3"
}], ["path", {
  d: "m15.2 13.9-.9-.3"
}], ["path", {
  d: "m16.6 18.7.3-.9"
}], ["path", {
  d: "m19.1 12.2.3-.9"
}], ["path", {
  d: "m19.6 18.7-.4-1"
}], ["path", {
  d: "m16.8 12.3-.4-1"
}], ["path", {
  d: "m14.3 16.6 1-.4"
}], ["path", {
  d: "m20.7 13.8 1-.4"
}]];
const UserMinus = [["path", {
  d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"
}], ["circle", {
  cx: "9",
  cy: "7",
  r: "4"
}], ["line", {
  x1: "22",
  x2: "16",
  y1: "11",
  y2: "11"
}]];
const UserPen = [["path", {
  d: "M11.5 15H7a4 4 0 0 0-4 4v2"
}], ["path", {
  d: "M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
}], ["circle", {
  cx: "10",
  cy: "7",
  r: "4"
}]];
const UserPlus = [["path", {
  d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"
}], ["circle", {
  cx: "9",
  cy: "7",
  r: "4"
}], ["line", {
  x1: "19",
  x2: "19",
  y1: "8",
  y2: "14"
}], ["line", {
  x1: "22",
  x2: "16",
  y1: "11",
  y2: "11"
}]];
const UserRoundCheck = [["path", {
  d: "M2 21a8 8 0 0 1 13.292-6"
}], ["circle", {
  cx: "10",
  cy: "8",
  r: "5"
}], ["path", {
  d: "m16 19 2 2 4-4"
}]];
const UserRoundCog = [["path", {
  d: "M2 21a8 8 0 0 1 10.434-7.62"
}], ["circle", {
  cx: "10",
  cy: "8",
  r: "5"
}], ["circle", {
  cx: "18",
  cy: "18",
  r: "3"
}], ["path", {
  d: "m19.5 14.3-.4.9"
}], ["path", {
  d: "m16.9 20.8-.4.9"
}], ["path", {
  d: "m21.7 19.5-.9-.4"
}], ["path", {
  d: "m15.2 16.9-.9-.4"
}], ["path", {
  d: "m21.7 16.5-.9.4"
}], ["path", {
  d: "m15.2 19.1-.9.4"
}], ["path", {
  d: "m19.5 21.7-.4-.9"
}], ["path", {
  d: "m16.9 15.2-.4-.9"
}]];
const UserRoundMinus = [["path", {
  d: "M2 21a8 8 0 0 1 13.292-6"
}], ["circle", {
  cx: "10",
  cy: "8",
  r: "5"
}], ["path", {
  d: "M22 19h-6"
}]];
const UserRoundPen = [["path", {
  d: "M2 21a8 8 0 0 1 10.821-7.487"
}], ["path", {
  d: "M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
}], ["circle", {
  cx: "10",
  cy: "8",
  r: "5"
}]];
const UserRoundPlus = [["path", {
  d: "M2 21a8 8 0 0 1 13.292-6"
}], ["circle", {
  cx: "10",
  cy: "8",
  r: "5"
}], ["path", {
  d: "M19 16v6"
}], ["path", {
  d: "M22 19h-6"
}]];
const UserRoundSearch = [["circle", {
  cx: "10",
  cy: "8",
  r: "5"
}], ["path", {
  d: "M2 21a8 8 0 0 1 10.434-7.62"
}], ["circle", {
  cx: "18",
  cy: "18",
  r: "3"
}], ["path", {
  d: "m22 22-1.9-1.9"
}]];
const UserRoundX = [["path", {
  d: "M2 21a8 8 0 0 1 11.873-7"
}], ["circle", {
  cx: "10",
  cy: "8",
  r: "5"
}], ["path", {
  d: "m17 17 5 5"
}], ["path", {
  d: "m22 17-5 5"
}]];
const UserRound = [["circle", {
  cx: "12",
  cy: "8",
  r: "5"
}], ["path", {
  d: "M20 21a8 8 0 0 0-16 0"
}]];
const UserSearch = [["circle", {
  cx: "10",
  cy: "7",
  r: "4"
}], ["path", {
  d: "M10.3 15H7a4 4 0 0 0-4 4v2"
}], ["circle", {
  cx: "17",
  cy: "17",
  r: "3"
}], ["path", {
  d: "m21 21-1.9-1.9"
}]];
const User = [["path", {
  d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"
}], ["circle", {
  cx: "12",
  cy: "7",
  r: "4"
}]];
const UserX = [["path", {
  d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"
}], ["circle", {
  cx: "9",
  cy: "7",
  r: "4"
}], ["line", {
  x1: "17",
  x2: "22",
  y1: "8",
  y2: "13"
}], ["line", {
  x1: "22",
  x2: "17",
  y1: "8",
  y2: "13"
}]];
const UsersRound = [["path", {
  d: "M18 21a8 8 0 0 0-16 0"
}], ["circle", {
  cx: "10",
  cy: "8",
  r: "5"
}], ["path", {
  d: "M22 20c0-3.37-2-6.5-4-8a5 5 0 0 0-.45-8.3"
}]];
const Users = [["path", {
  d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"
}], ["circle", {
  cx: "9",
  cy: "7",
  r: "4"
}], ["path", {
  d: "M22 21v-2a4 4 0 0 0-3-3.87"
}], ["path", {
  d: "M16 3.13a4 4 0 0 1 0 7.75"
}]];
const UtensilsCrossed = [["path", {
  d: "m16 2-2.3 2.3a3 3 0 0 0 0 4.2l1.8 1.8a3 3 0 0 0 4.2 0L22 8"
}], ["path", {
  d: "M15 15 3.3 3.3a4.2 4.2 0 0 0 0 6l7.3 7.3c.7.7 2 .7 2.8 0L15 15Zm0 0 7 7"
}], ["path", {
  d: "m2.1 21.8 6.4-6.3"
}], ["path", {
  d: "m19 5-7 7"
}]];
const Utensils = [["path", {
  d: "M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2"
}], ["path", {
  d: "M7 2v20"
}], ["path", {
  d: "M21 15V2a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3Zm0 0v7"
}]];
const UtilityPole = [["path", {
  d: "M12 2v20"
}], ["path", {
  d: "M2 5h20"
}], ["path", {
  d: "M3 3v2"
}], ["path", {
  d: "M7 3v2"
}], ["path", {
  d: "M17 3v2"
}], ["path", {
  d: "M21 3v2"
}], ["path", {
  d: "m19 5-7 7-7-7"
}]];
const Variable = [["path", {
  d: "M8 21s-4-3-4-9 4-9 4-9"
}], ["path", {
  d: "M16 3s4 3 4 9-4 9-4 9"
}], ["line", {
  x1: "15",
  x2: "9",
  y1: "9",
  y2: "15"
}], ["line", {
  x1: "9",
  x2: "15",
  y1: "9",
  y2: "15"
}]];
const Vault = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["circle", {
  cx: "7.5",
  cy: "7.5",
  r: ".5",
  fill: "currentColor"
}], ["path", {
  d: "m7.9 7.9 2.7 2.7"
}], ["circle", {
  cx: "16.5",
  cy: "7.5",
  r: ".5",
  fill: "currentColor"
}], ["path", {
  d: "m13.4 10.6 2.7-2.7"
}], ["circle", {
  cx: "7.5",
  cy: "16.5",
  r: ".5",
  fill: "currentColor"
}], ["path", {
  d: "m7.9 16.1 2.7-2.7"
}], ["circle", {
  cx: "16.5",
  cy: "16.5",
  r: ".5",
  fill: "currentColor"
}], ["path", {
  d: "m13.4 13.4 2.7 2.7"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "2"
}]];
const Vegan = [["path", {
  d: "M16 8q6 0 6-6-6 0-6 6"
}], ["path", {
  d: "M17.41 3.59a10 10 0 1 0 3 3"
}], ["path", {
  d: "M2 2a26.6 26.6 0 0 1 10 20c.9-6.82 1.5-9.5 4-14"
}]];
const VenusAndMars = [["path", {
  d: "M10 20h4"
}], ["path", {
  d: "M12 16v6"
}], ["path", {
  d: "M17 2h4v4"
}], ["path", {
  d: "m21 2-5.46 5.46"
}], ["circle", {
  cx: "12",
  cy: "11",
  r: "5"
}]];
const VenetianMask = [["path", {
  d: "M18 11c-1.5 0-2.5.5-3 2"
}], ["path", {
  d: "M4 6a2 2 0 0 0-2 2v4a5 5 0 0 0 5 5 8 8 0 0 1 5 2 8 8 0 0 1 5-2 5 5 0 0 0 5-5V8a2 2 0 0 0-2-2h-3a8 8 0 0 0-5 2 8 8 0 0 0-5-2z"
}], ["path", {
  d: "M6 11c1.5 0 2.5.5 3 2"
}]];
const Venus = [["path", {
  d: "M12 15v7"
}], ["path", {
  d: "M9 19h6"
}], ["circle", {
  cx: "12",
  cy: "9",
  r: "6"
}]];
const VibrateOff = [["path", {
  d: "m2 8 2 2-2 2 2 2-2 2"
}], ["path", {
  d: "m22 8-2 2 2 2-2 2 2 2"
}], ["path", {
  d: "M8 8v10c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2"
}], ["path", {
  d: "M16 10.34V6c0-.55-.45-1-1-1h-4.34"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Vibrate = [["path", {
  d: "m2 8 2 2-2 2 2 2-2 2"
}], ["path", {
  d: "m22 8-2 2 2 2-2 2 2 2"
}], ["rect", {
  width: "8",
  height: "14",
  x: "8",
  y: "5",
  rx: "1"
}]];
const Video = [["path", {
  d: "m16 13 5.223 3.482a.5.5 0 0 0 .777-.416V7.87a.5.5 0 0 0-.752-.432L16 10.5"
}], ["rect", {
  x: "2",
  y: "6",
  width: "14",
  height: "12",
  rx: "2"
}]];
const VideoOff = [["path", {
  d: "M10.66 6H14a2 2 0 0 1 2 2v2.5l5.248-3.062A.5.5 0 0 1 22 7.87v8.196"
}], ["path", {
  d: "M16 16a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2"
}], ["path", {
  d: "m2 2 20 20"
}]];
const Videotape = [["rect", {
  width: "20",
  height: "16",
  x: "2",
  y: "4",
  rx: "2"
}], ["path", {
  d: "M2 8h20"
}], ["circle", {
  cx: "8",
  cy: "14",
  r: "2"
}], ["path", {
  d: "M8 12h8"
}], ["circle", {
  cx: "16",
  cy: "14",
  r: "2"
}]];
const View = [["path", {
  d: "M21 17v2a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-2"
}], ["path", {
  d: "M21 7V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "1"
}], ["path", {
  d: "M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0"
}]];
const Voicemail = [["circle", {
  cx: "6",
  cy: "12",
  r: "4"
}], ["circle", {
  cx: "18",
  cy: "12",
  r: "4"
}], ["line", {
  x1: "6",
  x2: "18",
  y1: "16",
  y2: "16"
}]];
const Volleyball = [["path", {
  d: "M11.1 7.1a16.55 16.55 0 0 1 10.9 4"
}], ["path", {
  d: "M12 12a12.6 12.6 0 0 1-8.7 5"
}], ["path", {
  d: "M16.8 13.6a16.55 16.55 0 0 1-9 7.5"
}], ["path", {
  d: "M20.7 17a12.8 12.8 0 0 0-8.7-5 13.3 13.3 0 0 1 0-10"
}], ["path", {
  d: "M6.3 3.8a16.55 16.55 0 0 0 1.9 11.5"
}], ["circle", {
  cx: "12",
  cy: "12",
  r: "10"
}]];
const Volume1 = [["path", {
  d: "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"
}], ["path", {
  d: "M16 9a5 5 0 0 1 0 6"
}]];
const Volume2 = [["path", {
  d: "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"
}], ["path", {
  d: "M16 9a5 5 0 0 1 0 6"
}], ["path", {
  d: "M19.364 18.364a9 9 0 0 0 0-12.728"
}]];
const VolumeOff = [["path", {
  d: "M16 9a5 5 0 0 1 .95 2.293"
}], ["path", {
  d: "M19.364 5.636a9 9 0 0 1 1.889 9.96"
}], ["path", {
  d: "m2 2 20 20"
}], ["path", {
  d: "m7 7-.587.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298V11"
}], ["path", {
  d: "M9.828 4.172A.686.686 0 0 1 11 4.657v.686"
}]];
const VolumeX = [["path", {
  d: "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"
}], ["line", {
  x1: "22",
  x2: "16",
  y1: "9",
  y2: "15"
}], ["line", {
  x1: "16",
  x2: "22",
  y1: "9",
  y2: "15"
}]];
const Volume = [["path", {
  d: "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"
}]];
const Vote = [["path", {
  d: "m9 12 2 2 4-4"
}], ["path", {
  d: "M5 7c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2v12H5V7Z"
}], ["path", {
  d: "M22 19H2"
}]];
const WalletCards = [["rect", {
  width: "18",
  height: "18",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M3 9a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2"
}], ["path", {
  d: "M3 11h3c.8 0 1.6.3 2.1.9l1.1.9c1.6 1.6 4.1 1.6 5.7 0l1.1-.9c.5-.5 1.3-.9 2.1-.9H21"
}]];
const WalletMinimal = [["path", {
  d: "M17 14h.01"
}], ["path", {
  d: "M7 7h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14"
}]];
const Wallet = [["path", {
  d: "M19 7V4a1 1 0 0 0-1-1H5a2 2 0 0 0 0 4h15a1 1 0 0 1 1 1v4h-3a2 2 0 0 0 0 4h3a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1"
}], ["path", {
  d: "M3 5v14a2 2 0 0 0 2 2h15a1 1 0 0 0 1-1v-4"
}]];
const Wallpaper = [["circle", {
  cx: "8",
  cy: "9",
  r: "2"
}], ["path", {
  d: "m9 17 6.1-6.1a2 2 0 0 1 2.81.01L22 15V5a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2"
}], ["path", {
  d: "M8 21h8"
}], ["path", {
  d: "M12 17v4"
}]];
const WandSparkles = [["path", {
  d: "m21.64 3.64-1.28-1.28a1.21 1.21 0 0 0-1.72 0L2.36 18.64a1.21 1.21 0 0 0 0 1.72l1.28 1.28a1.2 1.2 0 0 0 1.72 0L21.64 5.36a1.2 1.2 0 0 0 0-1.72"
}], ["path", {
  d: "m14 7 3 3"
}], ["path", {
  d: "M5 6v4"
}], ["path", {
  d: "M19 14v4"
}], ["path", {
  d: "M10 2v2"
}], ["path", {
  d: "M7 8H3"
}], ["path", {
  d: "M21 16h-4"
}], ["path", {
  d: "M11 3H9"
}]];
const Wand = [["path", {
  d: "M15 4V2"
}], ["path", {
  d: "M15 16v-2"
}], ["path", {
  d: "M8 9h2"
}], ["path", {
  d: "M20 9h2"
}], ["path", {
  d: "M17.8 11.8 19 13"
}], ["path", {
  d: "M15 9h.01"
}], ["path", {
  d: "M17.8 6.2 19 5"
}], ["path", {
  d: "m3 21 9-9"
}], ["path", {
  d: "M12.2 6.2 11 5"
}]];
const WashingMachine = [["path", {
  d: "M3 6h3"
}], ["path", {
  d: "M17 6h.01"
}], ["rect", {
  width: "18",
  height: "20",
  x: "3",
  y: "2",
  rx: "2"
}], ["circle", {
  cx: "12",
  cy: "13",
  r: "5"
}], ["path", {
  d: "M12 18a2.5 2.5 0 0 0 0-5 2.5 2.5 0 0 1 0-5"
}]];
const Warehouse = [["path", {
  d: "M22 8.35V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8.35A2 2 0 0 1 3.26 6.5l8-3.2a2 2 0 0 1 1.48 0l8 3.2A2 2 0 0 1 22 8.35Z"
}], ["path", {
  d: "M6 18h12"
}], ["path", {
  d: "M6 14h12"
}], ["rect", {
  width: "12",
  height: "12",
  x: "6",
  y: "10"
}]];
const Watch = [["circle", {
  cx: "12",
  cy: "12",
  r: "6"
}], ["polyline", {
  points: "12 10 12 12 13 13"
}], ["path", {
  d: "m16.13 7.66-.81-4.05a2 2 0 0 0-2-1.61h-2.68a2 2 0 0 0-2 1.61l-.78 4.05"
}], ["path", {
  d: "m7.88 16.36.8 4a2 2 0 0 0 2 1.61h2.72a2 2 0 0 0 2-1.61l.81-4.05"
}]];
const WavesLadder = [["path", {
  d: "M19 5a2 2 0 0 0-2 2v11"
}], ["path", {
  d: "M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
}], ["path", {
  d: "M7 13h10"
}], ["path", {
  d: "M7 9h10"
}], ["path", {
  d: "M9 5a2 2 0 0 0-2 2v11"
}]];
const Waves = [["path", {
  d: "M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
}], ["path", {
  d: "M2 12c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
}], ["path", {
  d: "M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
}]];
const Waypoints = [["circle", {
  cx: "12",
  cy: "4.5",
  r: "2.5"
}], ["path", {
  d: "m10.2 6.3-3.9 3.9"
}], ["circle", {
  cx: "4.5",
  cy: "12",
  r: "2.5"
}], ["path", {
  d: "M7 12h10"
}], ["circle", {
  cx: "19.5",
  cy: "12",
  r: "2.5"
}], ["path", {
  d: "m13.8 17.7 3.9-3.9"
}], ["circle", {
  cx: "12",
  cy: "19.5",
  r: "2.5"
}]];
const Webcam = [["circle", {
  cx: "12",
  cy: "10",
  r: "8"
}], ["circle", {
  cx: "12",
  cy: "10",
  r: "3"
}], ["path", {
  d: "M7 22h10"
}], ["path", {
  d: "M12 22v-4"
}]];
const WebhookOff = [["path", {
  d: "M17 17h-5c-1.09-.02-1.94.92-2.5 1.9A3 3 0 1 1 2.57 15"
}], ["path", {
  d: "M9 3.4a4 4 0 0 1 6.52.66"
}], ["path", {
  d: "m6 17 3.1-5.8a2.5 2.5 0 0 0 .057-2.05"
}], ["path", {
  d: "M20.3 20.3a4 4 0 0 1-2.3.7"
}], ["path", {
  d: "M18.6 13a4 4 0 0 1 3.357 3.414"
}], ["path", {
  d: "m12 6 .6 1"
}], ["path", {
  d: "m2 2 20 20"
}]];
const Webhook = [["path", {
  d: "M18 16.98h-5.99c-1.1 0-1.95.94-2.48 1.9A4 4 0 0 1 2 17c.01-.7.2-1.4.57-2"
}], ["path", {
  d: "m6 17 3.13-5.78c.53-.97.1-2.18-.5-3.1a4 4 0 1 1 6.89-4.06"
}], ["path", {
  d: "m12 6 3.13 5.73C15.66 12.7 16.9 13 18 13a4 4 0 0 1 0 8"
}]];
const Weight = [["circle", {
  cx: "12",
  cy: "5",
  r: "3"
}], ["path", {
  d: "M6.5 8a2 2 0 0 0-1.905 1.46L2.1 18.5A2 2 0 0 0 4 21h16a2 2 0 0 0 1.925-2.54L19.4 9.5A2 2 0 0 0 17.48 8Z"
}]];
const WheatOff = [["path", {
  d: "m2 22 10-10"
}], ["path", {
  d: "m16 8-1.17 1.17"
}], ["path", {
  d: "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z"
}], ["path", {
  d: "m8 8-.53.53a3.5 3.5 0 0 0 0 4.94L9 15l1.53-1.53c.55-.55.88-1.25.98-1.97"
}], ["path", {
  d: "M10.91 5.26c.15-.26.34-.51.56-.73L13 3l1.53 1.53a3.5 3.5 0 0 1 .28 4.62"
}], ["path", {
  d: "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z"
}], ["path", {
  d: "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z"
}], ["path", {
  d: "m16 16-.53.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.49 3.49 0 0 1 1.97-.98"
}], ["path", {
  d: "M18.74 13.09c.26-.15.51-.34.73-.56L21 11l-1.53-1.53a3.5 3.5 0 0 0-4.62-.28"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Wheat = [["path", {
  d: "M2 22 16 8"
}], ["path", {
  d: "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z"
}], ["path", {
  d: "M7.47 8.53 9 7l1.53 1.53a3.5 3.5 0 0 1 0 4.94L9 15l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z"
}], ["path", {
  d: "M11.47 4.53 13 3l1.53 1.53a3.5 3.5 0 0 1 0 4.94L13 11l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z"
}], ["path", {
  d: "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z"
}], ["path", {
  d: "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z"
}], ["path", {
  d: "M15.47 13.47 17 15l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z"
}], ["path", {
  d: "M19.47 9.47 21 11l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L13 11l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z"
}]];
const WholeWord = [["circle", {
  cx: "7",
  cy: "12",
  r: "3"
}], ["path", {
  d: "M10 9v6"
}], ["circle", {
  cx: "17",
  cy: "12",
  r: "3"
}], ["path", {
  d: "M14 7v8"
}], ["path", {
  d: "M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1"
}]];
const WifiHigh = [["path", {
  d: "M12 20h.01"
}], ["path", {
  d: "M5 12.859a10 10 0 0 1 14 0"
}], ["path", {
  d: "M8.5 16.429a5 5 0 0 1 7 0"
}]];
const WifiLow = [["path", {
  d: "M12 20h.01"
}], ["path", {
  d: "M8.5 16.429a5 5 0 0 1 7 0"
}]];
const WifiOff = [["path", {
  d: "M12 20h.01"
}], ["path", {
  d: "M8.5 16.429a5 5 0 0 1 7 0"
}], ["path", {
  d: "M5 12.859a10 10 0 0 1 5.17-2.69"
}], ["path", {
  d: "M19 12.859a10 10 0 0 0-2.007-1.523"
}], ["path", {
  d: "M2 8.82a15 15 0 0 1 4.177-2.643"
}], ["path", {
  d: "M22 8.82a15 15 0 0 0-11.288-3.764"
}], ["path", {
  d: "m2 2 20 20"
}]];
const WifiZero = [["path", {
  d: "M12 20h.01"
}]];
const Wifi = [["path", {
  d: "M12 20h.01"
}], ["path", {
  d: "M2 8.82a15 15 0 0 1 20 0"
}], ["path", {
  d: "M5 12.859a10 10 0 0 1 14 0"
}], ["path", {
  d: "M8.5 16.429a5 5 0 0 1 7 0"
}]];
const WindArrowDown = [["path", {
  d: "M10 2v8"
}], ["path", {
  d: "M12.8 21.6A2 2 0 1 0 14 18H2"
}], ["path", {
  d: "M17.5 10a2.5 2.5 0 1 1 2 4H2"
}], ["path", {
  d: "m6 6 4 4 4-4"
}]];
const Wind = [["path", {
  d: "M12.8 19.6A2 2 0 1 0 14 16H2"
}], ["path", {
  d: "M17.5 8a2.5 2.5 0 1 1 2 4H2"
}], ["path", {
  d: "M9.8 4.4A2 2 0 1 1 11 8H2"
}]];
const WineOff = [["path", {
  d: "M8 22h8"
}], ["path", {
  d: "M7 10h3m7 0h-1.343"
}], ["path", {
  d: "M12 15v7"
}], ["path", {
  d: "M7.307 7.307A12.33 12.33 0 0 0 7 10a5 5 0 0 0 7.391 4.391M8.638 2.981C8.75 2.668 8.872 2.34 9 2h6c1.5 4 2 6 2 8 0 .407-.05.809-.145 1.198"
}], ["line", {
  x1: "2",
  x2: "22",
  y1: "2",
  y2: "22"
}]];
const Workflow = [["rect", {
  width: "8",
  height: "8",
  x: "3",
  y: "3",
  rx: "2"
}], ["path", {
  d: "M7 11v4a2 2 0 0 0 2 2h4"
}], ["rect", {
  width: "8",
  height: "8",
  x: "13",
  y: "13",
  rx: "2"
}]];
const Wine = [["path", {
  d: "M8 22h8"
}], ["path", {
  d: "M7 10h10"
}], ["path", {
  d: "M12 15v7"
}], ["path", {
  d: "M12 15a5 5 0 0 0 5-5c0-2-.5-4-2-8H9c-1.5 4-2 6-2 8a5 5 0 0 0 5 5Z"
}]];
const Worm = [["path", {
  d: "m19 12-1.5 3"
}], ["path", {
  d: "M19.63 18.81 22 20"
}], ["path", {
  d: "M6.47 8.23a1.68 1.68 0 0 1 2.44 1.93l-.64 2.08a6.76 6.76 0 0 0 10.16 7.67l.42-.27a1 1 0 1 0-2.73-4.21l-.42.27a1.76 1.76 0 0 1-2.63-1.99l.64-2.08A6.66 6.66 0 0 0 3.94 3.9l-.7.4a1 1 0 1 0 2.55 4.34z"
}]];
const WrapText = [["line", {
  x1: "3",
  x2: "21",
  y1: "6",
  y2: "6"
}], ["path", {
  d: "M3 12h15a3 3 0 1 1 0 6h-4"
}], ["polyline", {
  points: "16 16 14 18 16 20"
}], ["line", {
  x1: "3",
  x2: "10",
  y1: "18",
  y2: "18"
}]];
const Wrench = [["path", {
  d: "M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"
}]];
const X = [["path", {
  d: "M18 6 6 18"
}], ["path", {
  d: "m6 6 12 12"
}]];
const Youtube = [["path", {
  d: "M2.5 17a24.12 24.12 0 0 1 0-10 2 2 0 0 1 1.4-1.4 49.56 49.56 0 0 1 16.2 0A2 2 0 0 1 21.5 7a24.12 24.12 0 0 1 0 10 2 2 0 0 1-1.4 1.4 49.55 49.55 0 0 1-16.2 0A2 2 0 0 1 2.5 17"
}], ["path", {
  d: "m10 15 5-3-5-3z"
}]];
const Zap = [["path", {
  d: "M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z"
}]];
const ZapOff = [["path", {
  d: "M10.513 4.856 13.12 2.17a.5.5 0 0 1 .86.46l-1.377 4.317"
}], ["path", {
  d: "M15.656 10H20a1 1 0 0 1 .78 1.63l-1.72 1.773"
}], ["path", {
  d: "M16.273 16.273 10.88 21.83a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14H4a1 1 0 0 1-.78-1.63l4.507-4.643"
}], ["path", {
  d: "m2 2 20 20"
}]];
const ZoomIn = [["circle", {
  cx: "11",
  cy: "11",
  r: "8"
}], ["line", {
  x1: "21",
  x2: "16.65",
  y1: "21",
  y2: "16.65"
}], ["line", {
  x1: "11",
  x2: "11",
  y1: "8",
  y2: "14"
}], ["line", {
  x1: "8",
  x2: "14",
  y1: "11",
  y2: "11"
}]];
const ZoomOut = [["circle", {
  cx: "11",
  cy: "11",
  r: "8"
}], ["line", {
  x1: "21",
  x2: "16.65",
  y1: "21",
  y2: "16.65"
}], ["line", {
  x1: "8",
  x2: "14",
  y1: "11",
  y2: "11"
}]];
var iconsAndAliases = Object.freeze({
  __proto__: null,
  AArrowDown: AArrowDown,
  AArrowUp: AArrowUp,
  ALargeSmall: ALargeSmall,
  Accessibility: Accessibility,
  Activity: Activity,
  ActivitySquare: SquareActivity,
  AirVent: AirVent,
  Airplay: Airplay,
  AlarmCheck: AlarmClockCheck,
  AlarmClock: AlarmClock,
  AlarmClockCheck: AlarmClockCheck,
  AlarmClockMinus: AlarmClockMinus,
  AlarmClockOff: AlarmClockOff,
  AlarmClockPlus: AlarmClockPlus,
  AlarmMinus: AlarmClockMinus,
  AlarmPlus: AlarmClockPlus,
  AlarmSmoke: AlarmSmoke,
  Album: Album,
  AlertCircle: CircleAlert,
  AlertOctagon: OctagonAlert,
  AlertTriangle: TriangleAlert,
  AlignCenter: AlignCenter,
  AlignCenterHorizontal: AlignCenterHorizontal,
  AlignCenterVertical: AlignCenterVertical,
  AlignEndHorizontal: AlignEndHorizontal,
  AlignEndVertical: AlignEndVertical,
  AlignHorizontalDistributeCenter: AlignHorizontalDistributeCenter,
  AlignHorizontalDistributeEnd: AlignHorizontalDistributeEnd,
  AlignHorizontalDistributeStart: AlignHorizontalDistributeStart,
  AlignHorizontalJustifyCenter: AlignHorizontalJustifyCenter,
  AlignHorizontalJustifyEnd: AlignHorizontalJustifyEnd,
  AlignHorizontalJustifyStart: AlignHorizontalJustifyStart,
  AlignHorizontalSpaceAround: AlignHorizontalSpaceAround,
  AlignHorizontalSpaceBetween: AlignHorizontalSpaceBetween,
  AlignJustify: AlignJustify,
  AlignLeft: AlignLeft,
  AlignRight: AlignRight,
  AlignStartHorizontal: AlignStartHorizontal,
  AlignStartVertical: AlignStartVertical,
  AlignVerticalDistributeCenter: AlignVerticalDistributeCenter,
  AlignVerticalDistributeEnd: AlignVerticalDistributeEnd,
  AlignVerticalDistributeStart: AlignVerticalDistributeStart,
  AlignVerticalJustifyCenter: AlignVerticalJustifyCenter,
  AlignVerticalJustifyEnd: AlignVerticalJustifyEnd,
  AlignVerticalJustifyStart: AlignVerticalJustifyStart,
  AlignVerticalSpaceAround: AlignVerticalSpaceAround,
  AlignVerticalSpaceBetween: AlignVerticalSpaceBetween,
  Ambulance: Ambulance,
  Ampersand: Ampersand,
  Ampersands: Ampersands,
  Amphora: Amphora,
  Anchor: Anchor,
  Angry: Angry,
  Annoyed: Annoyed,
  Antenna: Antenna,
  Anvil: Anvil,
  Aperture: Aperture,
  AppWindow: AppWindow,
  AppWindowMac: AppWindowMac,
  Apple: Apple,
  Archive: Archive,
  ArchiveRestore: ArchiveRestore,
  ArchiveX: ArchiveX,
  AreaChart: ChartArea,
  Armchair: Armchair,
  ArrowBigDown: ArrowBigDown,
  ArrowBigDownDash: ArrowBigDownDash,
  ArrowBigLeft: ArrowBigLeft,
  ArrowBigLeftDash: ArrowBigLeftDash,
  ArrowBigRight: ArrowBigRight,
  ArrowBigRightDash: ArrowBigRightDash,
  ArrowBigUp: ArrowBigUp,
  ArrowBigUpDash: ArrowBigUpDash,
  ArrowDown: ArrowDown,
  ArrowDown01: ArrowDown01,
  ArrowDown10: ArrowDown10,
  ArrowDownAZ: ArrowDownAZ,
  ArrowDownAz: ArrowDownAZ,
  ArrowDownCircle: CircleArrowDown,
  ArrowDownFromLine: ArrowDownFromLine,
  ArrowDownLeft: ArrowDownLeft,
  ArrowDownLeftFromCircle: CircleArrowOutDownLeft,
  ArrowDownLeftFromSquare: SquareArrowOutDownLeft,
  ArrowDownLeftSquare: SquareArrowDownLeft,
  ArrowDownNarrowWide: ArrowDownNarrowWide,
  ArrowDownRight: ArrowDownRight,
  ArrowDownRightFromCircle: CircleArrowOutDownRight,
  ArrowDownRightFromSquare: SquareArrowOutDownRight,
  ArrowDownRightSquare: SquareArrowDownRight,
  ArrowDownSquare: SquareArrowDown,
  ArrowDownToDot: ArrowDownToDot,
  ArrowDownToLine: ArrowDownToLine,
  ArrowDownUp: ArrowDownUp,
  ArrowDownWideNarrow: ArrowDownWideNarrow,
  ArrowDownZA: ArrowDownZA,
  ArrowDownZa: ArrowDownZA,
  ArrowLeft: ArrowLeft,
  ArrowLeftCircle: CircleArrowLeft,
  ArrowLeftFromLine: ArrowLeftFromLine,
  ArrowLeftRight: ArrowLeftRight,
  ArrowLeftSquare: SquareArrowLeft,
  ArrowLeftToLine: ArrowLeftToLine,
  ArrowRight: ArrowRight,
  ArrowRightCircle: CircleArrowRight,
  ArrowRightFromLine: ArrowRightFromLine,
  ArrowRightLeft: ArrowRightLeft,
  ArrowRightSquare: SquareArrowRight,
  ArrowRightToLine: ArrowRightToLine,
  ArrowUp: ArrowUp,
  ArrowUp01: ArrowUp01,
  ArrowUp10: ArrowUp10,
  ArrowUpAZ: ArrowUpAZ,
  ArrowUpAz: ArrowUpAZ,
  ArrowUpCircle: CircleArrowUp,
  ArrowUpDown: ArrowUpDown,
  ArrowUpFromDot: ArrowUpFromDot,
  ArrowUpFromLine: ArrowUpFromLine,
  ArrowUpLeft: ArrowUpLeft,
  ArrowUpLeftFromCircle: CircleArrowOutUpLeft,
  ArrowUpLeftFromSquare: SquareArrowOutUpLeft,
  ArrowUpLeftSquare: SquareArrowUpLeft,
  ArrowUpNarrowWide: ArrowUpNarrowWide,
  ArrowUpRight: ArrowUpRight,
  ArrowUpRightFromCircle: CircleArrowOutUpRight,
  ArrowUpRightFromSquare: SquareArrowOutUpRight,
  ArrowUpRightSquare: SquareArrowUpRight,
  ArrowUpSquare: SquareArrowUp,
  ArrowUpToLine: ArrowUpToLine,
  ArrowUpWideNarrow: ArrowUpWideNarrow,
  ArrowUpZA: ArrowUpZA,
  ArrowUpZa: ArrowUpZA,
  ArrowsUpFromLine: ArrowsUpFromLine,
  Asterisk: Asterisk,
  AsteriskSquare: SquareAsterisk,
  AtSign: AtSign,
  Atom: Atom,
  AudioLines: AudioLines,
  AudioWaveform: AudioWaveform,
  Award: Award,
  Axe: Axe,
  Axis3D: Axis3d,
  Axis3d: Axis3d,
  Baby: Baby,
  Backpack: Backpack,
  Badge: Badge,
  BadgeAlert: BadgeAlert,
  BadgeCent: BadgeCent,
  BadgeCheck: BadgeCheck,
  BadgeDollarSign: BadgeDollarSign,
  BadgeEuro: BadgeEuro,
  BadgeHelp: BadgeHelp,
  BadgeIndianRupee: BadgeIndianRupee,
  BadgeInfo: BadgeInfo,
  BadgeJapaneseYen: BadgeJapaneseYen,
  BadgeMinus: BadgeMinus,
  BadgePercent: BadgePercent,
  BadgePlus: BadgePlus,
  BadgePoundSterling: BadgePoundSterling,
  BadgeRussianRuble: BadgeRussianRuble,
  BadgeSwissFranc: BadgeSwissFranc,
  BadgeX: BadgeX,
  BaggageClaim: BaggageClaim,
  Ban: Ban,
  Banana: Banana,
  Bandage: Bandage,
  Banknote: Banknote,
  BarChart: ChartNoAxesColumnIncreasing,
  BarChart2: ChartNoAxesColumn,
  BarChart3: ChartColumn,
  BarChart4: ChartColumnIncreasing,
  BarChartBig: ChartColumnBig,
  BarChartHorizontal: ChartBar,
  BarChartHorizontalBig: ChartBarBig,
  Barcode: Barcode,
  Baseline: Baseline,
  Bath: Bath,
  Battery: Battery,
  BatteryCharging: BatteryCharging,
  BatteryFull: BatteryFull,
  BatteryLow: BatteryLow,
  BatteryMedium: BatteryMedium,
  BatteryPlus: BatteryPlus,
  BatteryWarning: BatteryWarning,
  Beaker: Beaker,
  Bean: Bean,
  BeanOff: BeanOff,
  Bed: Bed,
  BedDouble: BedDouble,
  BedSingle: BedSingle,
  Beef: Beef,
  Beer: Beer,
  BeerOff: BeerOff,
  Bell: Bell,
  BellDot: BellDot,
  BellElectric: BellElectric,
  BellMinus: BellMinus,
  BellOff: BellOff,
  BellPlus: BellPlus,
  BellRing: BellRing,
  BetweenHorizonalEnd: BetweenHorizontalEnd,
  BetweenHorizonalStart: BetweenHorizontalStart,
  BetweenHorizontalEnd: BetweenHorizontalEnd,
  BetweenHorizontalStart: BetweenHorizontalStart,
  BetweenVerticalEnd: BetweenVerticalEnd,
  BetweenVerticalStart: BetweenVerticalStart,
  BicepsFlexed: BicepsFlexed,
  Bike: Bike,
  Binary: Binary,
  Binoculars: Binoculars,
  Biohazard: Biohazard,
  Bird: Bird,
  Bitcoin: Bitcoin,
  Blend: Blend,
  Blinds: Blinds,
  Blocks: Blocks,
  Bluetooth: Bluetooth,
  BluetoothConnected: BluetoothConnected,
  BluetoothOff: BluetoothOff,
  BluetoothSearching: BluetoothSearching,
  Bold: Bold,
  Bolt: Bolt,
  Bomb: Bomb,
  Bone: Bone,
  Book: Book,
  BookA: BookA,
  BookAudio: BookAudio,
  BookCheck: BookCheck,
  BookCopy: BookCopy,
  BookDashed: BookDashed,
  BookDown: BookDown,
  BookHeadphones: BookHeadphones,
  BookHeart: BookHeart,
  BookImage: BookImage,
  BookKey: BookKey,
  BookLock: BookLock,
  BookMarked: BookMarked,
  BookMinus: BookMinus,
  BookOpen: BookOpen,
  BookOpenCheck: BookOpenCheck,
  BookOpenText: BookOpenText,
  BookPlus: BookPlus,
  BookTemplate: BookDashed,
  BookText: BookText,
  BookType: BookType,
  BookUp: BookUp,
  BookUp2: BookUp2,
  BookUser: BookUser,
  BookX: BookX,
  Bookmark: Bookmark,
  BookmarkCheck: BookmarkCheck,
  BookmarkMinus: BookmarkMinus,
  BookmarkPlus: BookmarkPlus,
  BookmarkX: BookmarkX,
  BoomBox: BoomBox,
  Bot: Bot,
  BotMessageSquare: BotMessageSquare,
  BotOff: BotOff,
  Box: Box,
  BoxSelect: SquareDashed,
  Boxes: Boxes,
  Braces: Braces,
  Brackets: Brackets,
  Brain: Brain,
  BrainCircuit: BrainCircuit,
  BrainCog: BrainCog,
  BrickWall: BrickWall,
  Briefcase: Briefcase,
  BriefcaseBusiness: BriefcaseBusiness,
  BriefcaseConveyorBelt: BriefcaseConveyorBelt,
  BriefcaseMedical: BriefcaseMedical,
  BringToFront: BringToFront,
  Brush: Brush,
  Bug: Bug,
  BugOff: BugOff,
  BugPlay: BugPlay,
  Building: Building,
  Building2: Building2,
  Bus: Bus,
  BusFront: BusFront,
  Cable: Cable,
  CableCar: CableCar,
  Cake: Cake,
  CakeSlice: CakeSlice,
  Calculator: Calculator,
  Calendar: Calendar,
  Calendar1: Calendar1,
  CalendarArrowDown: CalendarArrowDown,
  CalendarArrowUp: CalendarArrowUp,
  CalendarCheck: CalendarCheck,
  CalendarCheck2: CalendarCheck2,
  CalendarClock: CalendarClock,
  CalendarCog: CalendarCog,
  CalendarDays: CalendarDays,
  CalendarFold: CalendarFold,
  CalendarHeart: CalendarHeart,
  CalendarMinus: CalendarMinus,
  CalendarMinus2: CalendarMinus2,
  CalendarOff: CalendarOff,
  CalendarPlus: CalendarPlus,
  CalendarPlus2: CalendarPlus2,
  CalendarRange: CalendarRange,
  CalendarSearch: CalendarSearch,
  CalendarSync: CalendarSync,
  CalendarX: CalendarX,
  CalendarX2: CalendarX2,
  Camera: Camera,
  CameraOff: CameraOff,
  CandlestickChart: ChartCandlestick,
  Candy: Candy,
  CandyCane: CandyCane,
  CandyOff: CandyOff,
  Cannabis: Cannabis,
  Captions: Captions,
  CaptionsOff: CaptionsOff,
  Car: Car,
  CarFront: CarFront,
  CarTaxiFront: CarTaxiFront,
  Caravan: Caravan,
  Carrot: Carrot,
  CaseLower: CaseLower,
  CaseSensitive: CaseSensitive,
  CaseUpper: CaseUpper,
  CassetteTape: CassetteTape,
  Cast: Cast,
  Castle: Castle,
  Cat: Cat,
  Cctv: Cctv,
  ChartArea: ChartArea,
  ChartBar: ChartBar,
  ChartBarBig: ChartBarBig,
  ChartBarDecreasing: ChartBarDecreasing,
  ChartBarIncreasing: ChartBarIncreasing,
  ChartBarStacked: ChartBarStacked,
  ChartCandlestick: ChartCandlestick,
  ChartColumn: ChartColumn,
  ChartColumnBig: ChartColumnBig,
  ChartColumnDecreasing: ChartColumnDecreasing,
  ChartColumnIncreasing: ChartColumnIncreasing,
  ChartColumnStacked: ChartColumnStacked,
  ChartGantt: ChartGantt,
  ChartLine: ChartLine,
  ChartNetwork: ChartNetwork,
  ChartNoAxesColumn: ChartNoAxesColumn,
  ChartNoAxesColumnDecreasing: ChartNoAxesColumnDecreasing,
  ChartNoAxesColumnIncreasing: ChartNoAxesColumnIncreasing,
  ChartNoAxesCombined: ChartNoAxesCombined,
  ChartNoAxesGantt: ChartNoAxesGantt,
  ChartPie: ChartPie,
  ChartScatter: ChartScatter,
  ChartSpline: ChartSpline,
  Check: Check,
  CheckCheck: CheckCheck,
  CheckCircle: CircleCheckBig,
  CheckCircle2: CircleCheck,
  CheckSquare: SquareCheckBig,
  CheckSquare2: SquareCheck,
  ChefHat: ChefHat,
  Cherry: Cherry,
  ChevronDown: ChevronDown,
  ChevronDownCircle: CircleChevronDown,
  ChevronDownSquare: SquareChevronDown,
  ChevronFirst: ChevronFirst,
  ChevronLast: ChevronLast,
  ChevronLeft: ChevronLeft,
  ChevronLeftCircle: CircleChevronLeft,
  ChevronLeftSquare: SquareChevronLeft,
  ChevronRight: ChevronRight,
  ChevronRightCircle: CircleChevronRight,
  ChevronRightSquare: SquareChevronRight,
  ChevronUp: ChevronUp,
  ChevronUpCircle: CircleChevronUp,
  ChevronUpSquare: SquareChevronUp,
  ChevronsDown: ChevronsDown,
  ChevronsDownUp: ChevronsDownUp,
  ChevronsLeft: ChevronsLeft,
  ChevronsLeftRight: ChevronsLeftRight,
  ChevronsLeftRightEllipsis: ChevronsLeftRightEllipsis,
  ChevronsRight: ChevronsRight,
  ChevronsRightLeft: ChevronsRightLeft,
  ChevronsUp: ChevronsUp,
  ChevronsUpDown: ChevronsUpDown,
  Chrome: Chrome,
  Church: Church,
  Cigarette: Cigarette,
  CigaretteOff: CigaretteOff,
  Circle: Circle,
  CircleAlert: CircleAlert,
  CircleArrowDown: CircleArrowDown,
  CircleArrowLeft: CircleArrowLeft,
  CircleArrowOutDownLeft: CircleArrowOutDownLeft,
  CircleArrowOutDownRight: CircleArrowOutDownRight,
  CircleArrowOutUpLeft: CircleArrowOutUpLeft,
  CircleArrowOutUpRight: CircleArrowOutUpRight,
  CircleArrowRight: CircleArrowRight,
  CircleArrowUp: CircleArrowUp,
  CircleCheck: CircleCheck,
  CircleCheckBig: CircleCheckBig,
  CircleChevronDown: CircleChevronDown,
  CircleChevronLeft: CircleChevronLeft,
  CircleChevronRight: CircleChevronRight,
  CircleChevronUp: CircleChevronUp,
  CircleDashed: CircleDashed,
  CircleDivide: CircleDivide,
  CircleDollarSign: CircleDollarSign,
  CircleDot: CircleDot,
  CircleDotDashed: CircleDotDashed,
  CircleEllipsis: CircleEllipsis,
  CircleEqual: CircleEqual,
  CircleFadingArrowUp: CircleFadingArrowUp,
  CircleFadingPlus: CircleFadingPlus,
  CircleGauge: CircleGauge,
  CircleHelp: CircleHelp,
  CircleMinus: CircleMinus,
  CircleOff: CircleOff,
  CircleParking: CircleParking,
  CircleParkingOff: CircleParkingOff,
  CirclePause: CirclePause,
  CirclePercent: CirclePercent,
  CirclePlay: CirclePlay,
  CirclePlus: CirclePlus,
  CirclePower: CirclePower,
  CircleSlash: CircleSlash,
  CircleSlash2: CircleSlash2,
  CircleSlashed: CircleSlash2,
  CircleSmall: CircleSmall,
  CircleStop: CircleStop,
  CircleUser: CircleUser,
  CircleUserRound: CircleUserRound,
  CircleX: CircleX,
  CircuitBoard: CircuitBoard,
  Citrus: Citrus,
  Clapperboard: Clapperboard,
  Clipboard: Clipboard,
  ClipboardCheck: ClipboardCheck,
  ClipboardCopy: ClipboardCopy,
  ClipboardEdit: ClipboardPen,
  ClipboardList: ClipboardList,
  ClipboardMinus: ClipboardMinus,
  ClipboardPaste: ClipboardPaste,
  ClipboardPen: ClipboardPen,
  ClipboardPenLine: ClipboardPenLine,
  ClipboardPlus: ClipboardPlus,
  ClipboardSignature: ClipboardPenLine,
  ClipboardType: ClipboardType,
  ClipboardX: ClipboardX,
  Clock: Clock,
  Clock1: Clock1,
  Clock10: Clock10,
  Clock11: Clock11,
  Clock12: Clock12,
  Clock2: Clock2,
  Clock3: Clock3,
  Clock4: Clock4,
  Clock5: Clock5,
  Clock6: Clock6,
  Clock7: Clock7,
  Clock8: Clock8,
  Clock9: Clock9,
  ClockAlert: ClockAlert,
  ClockArrowDown: ClockArrowDown,
  ClockArrowUp: ClockArrowUp,
  ClockFading: ClockFading,
  Cloud: Cloud,
  CloudAlert: CloudAlert,
  CloudCog: CloudCog,
  CloudDownload: CloudDownload,
  CloudDrizzle: CloudDrizzle,
  CloudFog: CloudFog,
  CloudHail: CloudHail,
  CloudLightning: CloudLightning,
  CloudMoon: CloudMoon,
  CloudMoonRain: CloudMoonRain,
  CloudOff: CloudOff,
  CloudRain: CloudRain,
  CloudRainWind: CloudRainWind,
  CloudSnow: CloudSnow,
  CloudSun: CloudSun,
  CloudSunRain: CloudSunRain,
  CloudUpload: CloudUpload,
  Cloudy: Cloudy,
  Clover: Clover,
  Club: Club,
  Code: Code,
  Code2: CodeXml,
  CodeSquare: SquareCode,
  CodeXml: CodeXml,
  Codepen: Codepen,
  Codesandbox: Codesandbox,
  Coffee: Coffee,
  Cog: Cog,
  Coins: Coins,
  Columns: Columns2,
  Columns2: Columns2,
  Columns3: Columns3,
  Columns4: Columns4,
  Combine: Combine,
  Command: Command,
  Compass: Compass,
  Component: Component,
  Computer: Computer,
  ConciergeBell: ConciergeBell,
  Cone: Cone,
  Construction: Construction,
  Contact: Contact,
  Contact2: ContactRound,
  ContactRound: ContactRound,
  Container: Container,
  Contrast: Contrast,
  Cookie: Cookie,
  CookingPot: CookingPot,
  Copy: Copy,
  CopyCheck: CopyCheck,
  CopyMinus: CopyMinus,
  CopyPlus: CopyPlus,
  CopySlash: CopySlash,
  CopyX: CopyX,
  Copyleft: Copyleft,
  Copyright: Copyright,
  CornerDownLeft: CornerDownLeft,
  CornerDownRight: CornerDownRight,
  CornerLeftDown: CornerLeftDown,
  CornerLeftUp: CornerLeftUp,
  CornerRightDown: CornerRightDown,
  CornerRightUp: CornerRightUp,
  CornerUpLeft: CornerUpLeft,
  CornerUpRight: CornerUpRight,
  Cpu: Cpu,
  CreativeCommons: CreativeCommons,
  CreditCard: CreditCard,
  Croissant: Croissant,
  Crop: Crop,
  Cross: Cross,
  Crosshair: Crosshair,
  Crown: Crown,
  Cuboid: Cuboid,
  CupSoda: CupSoda,
  CurlyBraces: Braces,
  Currency: Currency,
  Cylinder: Cylinder,
  Dam: Dam,
  Database: Database,
  DatabaseBackup: DatabaseBackup,
  DatabaseZap: DatabaseZap,
  Delete: Delete,
  Dessert: Dessert,
  Diameter: Diameter,
  Diamond: Diamond,
  DiamondMinus: DiamondMinus,
  DiamondPercent: DiamondPercent,
  DiamondPlus: DiamondPlus,
  Dice1: Dice1,
  Dice2: Dice2,
  Dice3: Dice3,
  Dice4: Dice4,
  Dice5: Dice5,
  Dice6: Dice6,
  Dices: Dices,
  Diff: Diff,
  Disc: Disc,
  Disc2: Disc2,
  Disc3: Disc3,
  DiscAlbum: DiscAlbum,
  Divide: Divide,
  DivideCircle: CircleDivide,
  DivideSquare: SquareDivide,
  Dna: Dna,
  DnaOff: DnaOff,
  Dock: Dock,
  Dog: Dog,
  DollarSign: DollarSign,
  Donut: Donut,
  DoorClosed: DoorClosed,
  DoorOpen: DoorOpen,
  Dot: Dot,
  DotSquare: SquareDot,
  Download: Download,
  DownloadCloud: CloudDownload,
  DraftingCompass: DraftingCompass,
  Drama: Drama,
  Dribbble: Dribbble,
  Drill: Drill,
  Droplet: Droplet,
  DropletOff: DropletOff,
  Droplets: Droplets,
  Drum: Drum,
  Drumstick: Drumstick,
  Dumbbell: Dumbbell,
  Ear: Ear,
  EarOff: EarOff,
  Earth: Earth,
  EarthLock: EarthLock,
  Eclipse: Eclipse,
  Edit: SquarePen,
  Edit2: Pen,
  Edit3: PenLine,
  Egg: Egg,
  EggFried: EggFried,
  EggOff: EggOff,
  Ellipsis: Ellipsis,
  EllipsisVertical: EllipsisVertical,
  Equal: Equal,
  EqualApproximately: EqualApproximately,
  EqualNot: EqualNot,
  EqualSquare: SquareEqual,
  Eraser: Eraser,
  EthernetPort: EthernetPort,
  Euro: Euro,
  Expand: Expand,
  ExternalLink: ExternalLink,
  Eye: Eye,
  EyeClosed: EyeClosed,
  EyeOff: EyeOff,
  Facebook: Facebook,
  Factory: Factory,
  Fan: Fan,
  FastForward: FastForward,
  Feather: Feather,
  Fence: Fence,
  FerrisWheel: FerrisWheel,
  Figma: Figma,
  File: File,
  FileArchive: FileArchive,
  FileAudio: FileAudio,
  FileAudio2: FileAudio2,
  FileAxis3D: FileAxis3d,
  FileAxis3d: FileAxis3d,
  FileBadge: FileBadge,
  FileBadge2: FileBadge2,
  FileBarChart: FileChartColumnIncreasing,
  FileBarChart2: FileChartColumn,
  FileBox: FileBox,
  FileChartColumn: FileChartColumn,
  FileChartColumnIncreasing: FileChartColumnIncreasing,
  FileChartLine: FileChartLine,
  FileChartPie: FileChartPie,
  FileCheck: FileCheck,
  FileCheck2: FileCheck2,
  FileClock: FileClock,
  FileCode: FileCode,
  FileCode2: FileCode2,
  FileCog: FileCog,
  FileCog2: FileCog,
  FileDiff: FileDiff,
  FileDigit: FileDigit,
  FileDown: FileDown,
  FileEdit: FilePen,
  FileHeart: FileHeart,
  FileImage: FileImage,
  FileInput: FileInput,
  FileJson: FileJson,
  FileJson2: FileJson2,
  FileKey: FileKey,
  FileKey2: FileKey2,
  FileLineChart: FileChartLine,
  FileLock: FileLock,
  FileLock2: FileLock2,
  FileMinus: FileMinus,
  FileMinus2: FileMinus2,
  FileMusic: FileMusic,
  FileOutput: FileOutput,
  FilePen: FilePen,
  FilePenLine: FilePenLine,
  FilePieChart: FileChartPie,
  FilePlus: FilePlus,
  FilePlus2: FilePlus2,
  FileQuestion: FileQuestion,
  FileScan: FileScan,
  FileSearch: FileSearch,
  FileSearch2: FileSearch2,
  FileSignature: FilePenLine,
  FileSliders: FileSliders,
  FileSpreadsheet: FileSpreadsheet,
  FileStack: FileStack,
  FileSymlink: FileSymlink,
  FileTerminal: FileTerminal,
  FileText: FileText,
  FileType: FileType,
  FileType2: FileType2,
  FileUp: FileUp,
  FileUser: FileUser,
  FileVideo: FileVideo,
  FileVideo2: FileVideo2,
  FileVolume: FileVolume,
  FileVolume2: FileVolume2,
  FileWarning: FileWarning,
  FileX: FileX,
  FileX2: FileX2,
  Files: Files,
  Film: Film,
  Filter: Funnel,
  FilterX: FunnelX,
  Fingerprint: Fingerprint,
  FireExtinguisher: FireExtinguisher,
  Fish: Fish,
  FishOff: FishOff,
  FishSymbol: FishSymbol,
  Flag: Flag,
  FlagOff: FlagOff,
  FlagTriangleLeft: FlagTriangleLeft,
  FlagTriangleRight: FlagTriangleRight,
  Flame: Flame,
  FlameKindling: FlameKindling,
  Flashlight: Flashlight,
  FlashlightOff: FlashlightOff,
  FlaskConical: FlaskConical,
  FlaskConicalOff: FlaskConicalOff,
  FlaskRound: FlaskRound,
  FlipHorizontal: FlipHorizontal,
  FlipHorizontal2: FlipHorizontal2,
  FlipVertical: FlipVertical,
  FlipVertical2: FlipVertical2,
  Flower: Flower,
  Flower2: Flower2,
  Focus: Focus,
  FoldHorizontal: FoldHorizontal,
  FoldVertical: FoldVertical,
  Folder: Folder,
  FolderArchive: FolderArchive,
  FolderCheck: FolderCheck,
  FolderClock: FolderClock,
  FolderClosed: FolderClosed,
  FolderCode: FolderCode,
  FolderCog: FolderCog,
  FolderCog2: FolderCog,
  FolderDot: FolderDot,
  FolderDown: FolderDown,
  FolderEdit: FolderPen,
  FolderGit: FolderGit,
  FolderGit2: FolderGit2,
  FolderHeart: FolderHeart,
  FolderInput: FolderInput,
  FolderKanban: FolderKanban,
  FolderKey: FolderKey,
  FolderLock: FolderLock,
  FolderMinus: FolderMinus,
  FolderOpen: FolderOpen,
  FolderOpenDot: FolderOpenDot,
  FolderOutput: FolderOutput,
  FolderPen: FolderPen,
  FolderPlus: FolderPlus,
  FolderRoot: FolderRoot,
  FolderSearch: FolderSearch,
  FolderSearch2: FolderSearch2,
  FolderSymlink: FolderSymlink,
  FolderSync: FolderSync,
  FolderTree: FolderTree,
  FolderUp: FolderUp,
  FolderX: FolderX,
  Folders: Folders,
  Footprints: Footprints,
  ForkKnife: Utensils,
  ForkKnifeCrossed: UtensilsCrossed,
  Forklift: Forklift,
  FormInput: RectangleEllipsis,
  Forward: Forward,
  Frame: Frame,
  Framer: Framer,
  Frown: Frown,
  Fuel: Fuel,
  Fullscreen: Fullscreen,
  FunctionSquare: SquareFunction,
  Funnel: Funnel,
  FunnelPlus: FunnelPlus,
  FunnelX: FunnelX,
  GalleryHorizontal: GalleryHorizontal,
  GalleryHorizontalEnd: GalleryHorizontalEnd,
  GalleryThumbnails: GalleryThumbnails,
  GalleryVertical: GalleryVertical,
  GalleryVerticalEnd: GalleryVerticalEnd,
  Gamepad: Gamepad,
  Gamepad2: Gamepad2,
  GanttChart: ChartNoAxesGantt,
  GanttChartSquare: SquareChartGantt,
  Gauge: Gauge,
  GaugeCircle: CircleGauge,
  Gavel: Gavel,
  Gem: Gem,
  Ghost: Ghost,
  Gift: Gift,
  GitBranch: GitBranch,
  GitBranchPlus: GitBranchPlus,
  GitCommit: GitCommitHorizontal,
  GitCommitHorizontal: GitCommitHorizontal,
  GitCommitVertical: GitCommitVertical,
  GitCompare: GitCompare,
  GitCompareArrows: GitCompareArrows,
  GitFork: GitFork,
  GitGraph: GitGraph,
  GitMerge: GitMerge,
  GitPullRequest: GitPullRequest,
  GitPullRequestArrow: GitPullRequestArrow,
  GitPullRequestClosed: GitPullRequestClosed,
  GitPullRequestCreate: GitPullRequestCreate,
  GitPullRequestCreateArrow: GitPullRequestCreateArrow,
  GitPullRequestDraft: GitPullRequestDraft,
  Github: Github,
  Gitlab: Gitlab,
  GlassWater: GlassWater,
  Glasses: Glasses,
  Globe: Globe,
  Globe2: Earth,
  GlobeLock: GlobeLock,
  Goal: Goal,
  Grab: Grab,
  GraduationCap: GraduationCap,
  Grape: Grape,
  Grid: Grid3x3,
  Grid2X2: Grid2x2,
  Grid2X2Check: Grid2x2Check,
  Grid2X2Plus: Grid2x2Plus,
  Grid2X2X: Grid2x2X,
  Grid2x2: Grid2x2,
  Grid2x2Check: Grid2x2Check,
  Grid2x2Plus: Grid2x2Plus,
  Grid2x2X: Grid2x2X,
  Grid3X3: Grid3x3,
  Grid3x3: Grid3x3,
  Grip: Grip,
  GripHorizontal: GripHorizontal,
  GripVertical: GripVertical,
  Group: Group,
  Guitar: Guitar,
  Ham: Ham,
  Hammer: Hammer,
  Hand: Hand,
  HandCoins: HandCoins,
  HandHeart: HandHeart,
  HandHelping: HandHelping,
  HandMetal: HandMetal,
  HandPlatter: HandPlatter,
  Handshake: Handshake,
  HardDrive: HardDrive,
  HardDriveDownload: HardDriveDownload,
  HardDriveUpload: HardDriveUpload,
  HardHat: HardHat,
  Hash: Hash,
  Haze: Haze,
  HdmiPort: HdmiPort,
  Heading: Heading,
  Heading1: Heading1,
  Heading2: Heading2,
  Heading3: Heading3,
  Heading4: Heading4,
  Heading5: Heading5,
  Heading6: Heading6,
  HeadphoneOff: HeadphoneOff,
  Headphones: Headphones,
  Headset: Headset,
  Heart: Heart,
  HeartCrack: HeartCrack,
  HeartHandshake: HeartHandshake,
  HeartOff: HeartOff,
  HeartPulse: HeartPulse,
  Heater: Heater,
  HelpCircle: CircleHelp,
  HelpingHand: HandHelping,
  Hexagon: Hexagon,
  Highlighter: Highlighter,
  History: History,
  Home: House,
  Hop: Hop,
  HopOff: HopOff,
  Hospital: Hospital,
  Hotel: Hotel,
  Hourglass: Hourglass,
  House: House,
  HousePlug: HousePlug,
  HousePlus: HousePlus,
  HouseWifi: HouseWifi,
  IceCream: IceCreamCone,
  IceCream2: IceCreamBowl,
  IceCreamBowl: IceCreamBowl,
  IceCreamCone: IceCreamCone,
  IdCard: IdCard,
  Image: Image,
  ImageDown: ImageDown,
  ImageMinus: ImageMinus,
  ImageOff: ImageOff,
  ImagePlay: ImagePlay,
  ImagePlus: ImagePlus,
  ImageUp: ImageUp,
  ImageUpscale: ImageUpscale,
  Images: Images,
  Import: Import,
  Inbox: Inbox,
  Indent: IndentIncrease,
  IndentDecrease: IndentDecrease,
  IndentIncrease: IndentIncrease,
  IndianRupee: IndianRupee,
  Infinity: Infinity,
  Info: Info,
  Inspect: SquareMousePointer,
  InspectionPanel: InspectionPanel,
  Instagram: Instagram,
  Italic: Italic,
  IterationCcw: IterationCcw,
  IterationCw: IterationCw,
  JapaneseYen: JapaneseYen,
  Joystick: Joystick,
  Kanban: Kanban,
  KanbanSquare: SquareKanban,
  KanbanSquareDashed: SquareDashedKanban,
  Key: Key,
  KeyRound: KeyRound,
  KeySquare: KeySquare,
  Keyboard: Keyboard,
  KeyboardMusic: KeyboardMusic,
  KeyboardOff: KeyboardOff,
  Lamp: Lamp,
  LampCeiling: LampCeiling,
  LampDesk: LampDesk,
  LampFloor: LampFloor,
  LampWallDown: LampWallDown,
  LampWallUp: LampWallUp,
  LandPlot: LandPlot,
  Landmark: Landmark,
  Languages: Languages,
  Laptop: Laptop,
  Laptop2: LaptopMinimal,
  LaptopMinimal: LaptopMinimal,
  LaptopMinimalCheck: LaptopMinimalCheck,
  Lasso: Lasso,
  LassoSelect: LassoSelect,
  Laugh: Laugh,
  Layers: Layers,
  Layers2: Layers2,
  Layers3: Layers,
  Layout: PanelsTopLeft,
  LayoutDashboard: LayoutDashboard,
  LayoutGrid: LayoutGrid,
  LayoutList: LayoutList,
  LayoutPanelLeft: LayoutPanelLeft,
  LayoutPanelTop: LayoutPanelTop,
  LayoutTemplate: LayoutTemplate,
  Leaf: Leaf,
  LeafyGreen: LeafyGreen,
  Lectern: Lectern,
  LetterText: LetterText,
  Library: Library,
  LibraryBig: LibraryBig,
  LibrarySquare: SquareLibrary,
  LifeBuoy: LifeBuoy,
  Ligature: Ligature,
  Lightbulb: Lightbulb,
  LightbulbOff: LightbulbOff,
  LineChart: ChartLine,
  Link: Link,
  Link2: Link2,
  Link2Off: Link2Off,
  Linkedin: Linkedin,
  List: List,
  ListCheck: ListCheck,
  ListChecks: ListChecks,
  ListCollapse: ListCollapse,
  ListEnd: ListEnd,
  ListFilter: ListFilter,
  ListFilterPlus: ListFilterPlus,
  ListMinus: ListMinus,
  ListMusic: ListMusic,
  ListOrdered: ListOrdered,
  ListPlus: ListPlus,
  ListRestart: ListRestart,
  ListStart: ListStart,
  ListTodo: ListTodo,
  ListTree: ListTree,
  ListVideo: ListVideo,
  ListX: ListX,
  Loader: Loader,
  Loader2: LoaderCircle,
  LoaderCircle: LoaderCircle,
  LoaderPinwheel: LoaderPinwheel,
  Locate: Locate,
  LocateFixed: LocateFixed,
  LocateOff: LocateOff,
  Lock: Lock,
  LockKeyhole: LockKeyhole,
  LockKeyholeOpen: LockKeyholeOpen,
  LockOpen: LockOpen,
  LogIn: LogIn,
  LogOut: LogOut,
  Logs: Logs,
  Lollipop: Lollipop,
  Luggage: Luggage,
  MSquare: SquareM,
  Magnet: Magnet,
  Mail: Mail,
  MailCheck: MailCheck,
  MailMinus: MailMinus,
  MailOpen: MailOpen,
  MailPlus: MailPlus,
  MailQuestion: MailQuestion,
  MailSearch: MailSearch,
  MailWarning: MailWarning,
  MailX: MailX,
  Mailbox: Mailbox,
  Mails: Mails,
  Map: Map,
  MapPin: MapPin,
  MapPinCheck: MapPinCheck,
  MapPinCheckInside: MapPinCheckInside,
  MapPinHouse: MapPinHouse,
  MapPinMinus: MapPinMinus,
  MapPinMinusInside: MapPinMinusInside,
  MapPinOff: MapPinOff,
  MapPinPlus: MapPinPlus,
  MapPinPlusInside: MapPinPlusInside,
  MapPinX: MapPinX,
  MapPinXInside: MapPinXInside,
  MapPinned: MapPinned,
  MapPlus: MapPlus,
  Mars: Mars,
  MarsStroke: MarsStroke,
  Martini: Martini,
  Maximize: Maximize,
  Maximize2: Maximize2,
  Medal: Medal,
  Megaphone: Megaphone,
  MegaphoneOff: MegaphoneOff,
  Meh: Meh,
  MemoryStick: MemoryStick,
  Menu: Menu,
  MenuSquare: SquareMenu,
  Merge: Merge,
  MessageCircle: MessageCircle,
  MessageCircleCode: MessageCircleCode,
  MessageCircleDashed: MessageCircleDashed,
  MessageCircleHeart: MessageCircleHeart,
  MessageCircleMore: MessageCircleMore,
  MessageCircleOff: MessageCircleOff,
  MessageCirclePlus: MessageCirclePlus,
  MessageCircleQuestion: MessageCircleQuestion,
  MessageCircleReply: MessageCircleReply,
  MessageCircleWarning: MessageCircleWarning,
  MessageCircleX: MessageCircleX,
  MessageSquare: MessageSquare,
  MessageSquareCode: MessageSquareCode,
  MessageSquareDashed: MessageSquareDashed,
  MessageSquareDiff: MessageSquareDiff,
  MessageSquareDot: MessageSquareDot,
  MessageSquareHeart: MessageSquareHeart,
  MessageSquareLock: MessageSquareLock,
  MessageSquareMore: MessageSquareMore,
  MessageSquareOff: MessageSquareOff,
  MessageSquarePlus: MessageSquarePlus,
  MessageSquareQuote: MessageSquareQuote,
  MessageSquareReply: MessageSquareReply,
  MessageSquareShare: MessageSquareShare,
  MessageSquareText: MessageSquareText,
  MessageSquareWarning: MessageSquareWarning,
  MessageSquareX: MessageSquareX,
  MessagesSquare: MessagesSquare,
  Mic: Mic,
  Mic2: MicVocal,
  MicOff: MicOff,
  MicVocal: MicVocal,
  Microchip: Microchip,
  Microscope: Microscope,
  Microwave: Microwave,
  Milestone: Milestone,
  Milk: Milk,
  MilkOff: MilkOff,
  Minimize: Minimize,
  Minimize2: Minimize2,
  Minus: Minus,
  MinusCircle: CircleMinus,
  MinusSquare: SquareMinus,
  Monitor: Monitor,
  MonitorCheck: MonitorCheck,
  MonitorCog: MonitorCog,
  MonitorDot: MonitorDot,
  MonitorDown: MonitorDown,
  MonitorOff: MonitorOff,
  MonitorPause: MonitorPause,
  MonitorPlay: MonitorPlay,
  MonitorSmartphone: MonitorSmartphone,
  MonitorSpeaker: MonitorSpeaker,
  MonitorStop: MonitorStop,
  MonitorUp: MonitorUp,
  MonitorX: MonitorX,
  Moon: Moon,
  MoonStar: MoonStar,
  MoreHorizontal: Ellipsis,
  MoreVertical: EllipsisVertical,
  Mountain: Mountain,
  MountainSnow: MountainSnow,
  Mouse: Mouse,
  MouseOff: MouseOff,
  MousePointer: MousePointer,
  MousePointer2: MousePointer2,
  MousePointerBan: MousePointerBan,
  MousePointerClick: MousePointerClick,
  MousePointerSquareDashed: SquareDashedMousePointer,
  Move: Move,
  Move3D: Move3d,
  Move3d: Move3d,
  MoveDiagonal: MoveDiagonal,
  MoveDiagonal2: MoveDiagonal2,
  MoveDown: MoveDown,
  MoveDownLeft: MoveDownLeft,
  MoveDownRight: MoveDownRight,
  MoveHorizontal: MoveHorizontal,
  MoveLeft: MoveLeft,
  MoveRight: MoveRight,
  MoveUp: MoveUp,
  MoveUpLeft: MoveUpLeft,
  MoveUpRight: MoveUpRight,
  MoveVertical: MoveVertical,
  Music: Music,
  Music2: Music2,
  Music3: Music3,
  Music4: Music4,
  Navigation: Navigation,
  Navigation2: Navigation2,
  Navigation2Off: Navigation2Off,
  NavigationOff: NavigationOff,
  Network: Network,
  Newspaper: Newspaper,
  Nfc: Nfc,
  NonBinary: NonBinary,
  Notebook: Notebook,
  NotebookPen: NotebookPen,
  NotebookTabs: NotebookTabs,
  NotebookText: NotebookText,
  NotepadText: NotepadText,
  NotepadTextDashed: NotepadTextDashed,
  Nut: Nut,
  NutOff: NutOff,
  Octagon: Octagon,
  OctagonAlert: OctagonAlert,
  OctagonMinus: OctagonMinus,
  OctagonPause: OctagonPause,
  OctagonX: OctagonX,
  Omega: Omega,
  Option: Option,
  Orbit: Orbit,
  Origami: Origami,
  Outdent: IndentDecrease,
  Package: Package,
  Package2: Package2,
  PackageCheck: PackageCheck,
  PackageMinus: PackageMinus,
  PackageOpen: PackageOpen,
  PackagePlus: PackagePlus,
  PackageSearch: PackageSearch,
  PackageX: PackageX,
  PaintBucket: PaintBucket,
  PaintRoller: PaintRoller,
  Paintbrush: Paintbrush,
  Paintbrush2: PaintbrushVertical,
  PaintbrushVertical: PaintbrushVertical,
  Palette: Palette,
  Palmtree: TreePalm,
  PanelBottom: PanelBottom,
  PanelBottomClose: PanelBottomClose,
  PanelBottomDashed: PanelBottomDashed,
  PanelBottomInactive: PanelBottomDashed,
  PanelBottomOpen: PanelBottomOpen,
  PanelLeft: PanelLeft,
  PanelLeftClose: PanelLeftClose,
  PanelLeftDashed: PanelLeftDashed,
  PanelLeftInactive: PanelLeftDashed,
  PanelLeftOpen: PanelLeftOpen,
  PanelRight: PanelRight,
  PanelRightClose: PanelRightClose,
  PanelRightDashed: PanelRightDashed,
  PanelRightInactive: PanelRightDashed,
  PanelRightOpen: PanelRightOpen,
  PanelTop: PanelTop,
  PanelTopClose: PanelTopClose,
  PanelTopDashed: PanelTopDashed,
  PanelTopInactive: PanelTopDashed,
  PanelTopOpen: PanelTopOpen,
  PanelsLeftBottom: PanelsLeftBottom,
  PanelsLeftRight: Columns3,
  PanelsRightBottom: PanelsRightBottom,
  PanelsTopBottom: Rows3,
  PanelsTopLeft: PanelsTopLeft,
  Paperclip: Paperclip,
  Parentheses: Parentheses,
  ParkingCircle: CircleParking,
  ParkingCircleOff: CircleParkingOff,
  ParkingMeter: ParkingMeter,
  ParkingSquare: SquareParking,
  ParkingSquareOff: SquareParkingOff,
  PartyPopper: PartyPopper,
  Pause: Pause,
  PauseCircle: CirclePause,
  PauseOctagon: OctagonPause,
  PawPrint: PawPrint,
  PcCase: PcCase,
  Pen: Pen,
  PenBox: SquarePen,
  PenLine: PenLine,
  PenOff: PenOff,
  PenSquare: SquarePen,
  PenTool: PenTool,
  Pencil: Pencil,
  PencilLine: PencilLine,
  PencilOff: PencilOff,
  PencilRuler: PencilRuler,
  Pentagon: Pentagon,
  Percent: Percent,
  PercentCircle: CirclePercent,
  PercentDiamond: DiamondPercent,
  PercentSquare: SquarePercent,
  PersonStanding: PersonStanding,
  PhilippinePeso: PhilippinePeso,
  Phone: Phone,
  PhoneCall: PhoneCall,
  PhoneForwarded: PhoneForwarded,
  PhoneIncoming: PhoneIncoming,
  PhoneMissed: PhoneMissed,
  PhoneOff: PhoneOff,
  PhoneOutgoing: PhoneOutgoing,
  Pi: Pi,
  PiSquare: SquarePi,
  Piano: Piano,
  Pickaxe: Pickaxe,
  PictureInPicture: PictureInPicture,
  PictureInPicture2: PictureInPicture2,
  PieChart: ChartPie,
  PiggyBank: PiggyBank,
  Pilcrow: Pilcrow,
  PilcrowLeft: PilcrowLeft,
  PilcrowRight: PilcrowRight,
  PilcrowSquare: SquarePilcrow,
  Pill: Pill,
  PillBottle: PillBottle,
  Pin: Pin,
  PinOff: PinOff,
  Pipette: Pipette,
  Pizza: Pizza,
  Plane: Plane,
  PlaneLanding: PlaneLanding,
  PlaneTakeoff: PlaneTakeoff,
  Play: Play,
  PlayCircle: CirclePlay,
  PlaySquare: SquarePlay,
  Plug: Plug,
  Plug2: Plug2,
  PlugZap: PlugZap,
  PlugZap2: PlugZap,
  Plus: Plus,
  PlusCircle: CirclePlus,
  PlusSquare: SquarePlus,
  Pocket: Pocket,
  PocketKnife: PocketKnife,
  Podcast: Podcast,
  Pointer: Pointer,
  PointerOff: PointerOff,
  Popcorn: Popcorn,
  Popsicle: Popsicle,
  PoundSterling: PoundSterling,
  Power: Power,
  PowerCircle: CirclePower,
  PowerOff: PowerOff,
  PowerSquare: SquarePower,
  Presentation: Presentation,
  Printer: Printer,
  PrinterCheck: PrinterCheck,
  Projector: Projector,
  Proportions: Proportions,
  Puzzle: Puzzle,
  Pyramid: Pyramid,
  QrCode: QrCode,
  Quote: Quote,
  Rabbit: Rabbit,
  Radar: Radar,
  Radiation: Radiation,
  Radical: Radical,
  Radio: Radio,
  RadioReceiver: RadioReceiver,
  RadioTower: RadioTower,
  Radius: Radius,
  RailSymbol: RailSymbol,
  Rainbow: Rainbow,
  Rat: Rat,
  Ratio: Ratio,
  Receipt: Receipt,
  ReceiptCent: ReceiptCent,
  ReceiptEuro: ReceiptEuro,
  ReceiptIndianRupee: ReceiptIndianRupee,
  ReceiptJapaneseYen: ReceiptJapaneseYen,
  ReceiptPoundSterling: ReceiptPoundSterling,
  ReceiptRussianRuble: ReceiptRussianRuble,
  ReceiptSwissFranc: ReceiptSwissFranc,
  ReceiptText: ReceiptText,
  RectangleEllipsis: RectangleEllipsis,
  RectangleHorizontal: RectangleHorizontal,
  RectangleVertical: RectangleVertical,
  Recycle: Recycle,
  Redo: Redo,
  Redo2: Redo2,
  RedoDot: RedoDot,
  RefreshCcw: RefreshCcw,
  RefreshCcwDot: RefreshCcwDot,
  RefreshCw: RefreshCw,
  RefreshCwOff: RefreshCwOff,
  Refrigerator: Refrigerator,
  Regex: Regex,
  RemoveFormatting: RemoveFormatting,
  Repeat: Repeat,
  Repeat1: Repeat1,
  Repeat2: Repeat2,
  Replace: Replace,
  ReplaceAll: ReplaceAll,
  Reply: Reply,
  ReplyAll: ReplyAll,
  Rewind: Rewind,
  Ribbon: Ribbon,
  Rocket: Rocket,
  RockingChair: RockingChair,
  RollerCoaster: RollerCoaster,
  Rotate3D: Rotate3d,
  Rotate3d: Rotate3d,
  RotateCcw: RotateCcw,
  RotateCcwSquare: RotateCcwSquare,
  RotateCw: RotateCw,
  RotateCwSquare: RotateCwSquare,
  Route: Route,
  RouteOff: RouteOff,
  Router: Router,
  Rows: Rows2,
  Rows2: Rows2,
  Rows3: Rows3,
  Rows4: Rows4,
  Rss: Rss,
  Ruler: Ruler,
  RussianRuble: RussianRuble,
  Sailboat: Sailboat,
  Salad: Salad,
  Sandwich: Sandwich,
  Satellite: Satellite,
  SatelliteDish: SatelliteDish,
  SaudiRiyal: SaudiRiyal,
  Save: Save,
  SaveAll: SaveAll,
  SaveOff: SaveOff,
  Scale: Scale,
  Scale3D: Scale3d,
  Scale3d: Scale3d,
  Scaling: Scaling,
  Scan: Scan,
  ScanBarcode: ScanBarcode,
  ScanEye: ScanEye,
  ScanFace: ScanFace,
  ScanHeart: ScanHeart,
  ScanLine: ScanLine,
  ScanQrCode: ScanQrCode,
  ScanSearch: ScanSearch,
  ScanText: ScanText,
  ScatterChart: ChartScatter,
  School: School,
  School2: University,
  Scissors: Scissors,
  ScissorsLineDashed: ScissorsLineDashed,
  ScissorsSquare: SquareScissors,
  ScissorsSquareDashedBottom: SquareBottomDashedScissors,
  ScreenShare: ScreenShare,
  ScreenShareOff: ScreenShareOff,
  Scroll: Scroll,
  ScrollText: ScrollText,
  Search: Search,
  SearchCheck: SearchCheck,
  SearchCode: SearchCode,
  SearchSlash: SearchSlash,
  SearchX: SearchX,
  Section: Section,
  Send: Send,
  SendHorizonal: SendHorizontal,
  SendHorizontal: SendHorizontal,
  SendToBack: SendToBack,
  SeparatorHorizontal: SeparatorHorizontal,
  SeparatorVertical: SeparatorVertical,
  Server: Server,
  ServerCog: ServerCog,
  ServerCrash: ServerCrash,
  ServerOff: ServerOff,
  Settings: Settings,
  Settings2: Settings2,
  Shapes: Shapes,
  Share: Share,
  Share2: Share2,
  Sheet: Sheet,
  Shell: Shell,
  Shield: Shield,
  ShieldAlert: ShieldAlert,
  ShieldBan: ShieldBan,
  ShieldCheck: ShieldCheck,
  ShieldClose: ShieldX,
  ShieldEllipsis: ShieldEllipsis,
  ShieldHalf: ShieldHalf,
  ShieldMinus: ShieldMinus,
  ShieldOff: ShieldOff,
  ShieldPlus: ShieldPlus,
  ShieldQuestion: ShieldQuestion,
  ShieldUser: ShieldUser,
  ShieldX: ShieldX,
  Ship: Ship,
  ShipWheel: ShipWheel,
  Shirt: Shirt,
  ShoppingBag: ShoppingBag,
  ShoppingBasket: ShoppingBasket,
  ShoppingCart: ShoppingCart,
  Shovel: Shovel,
  ShowerHead: ShowerHead,
  Shrimp: Shrimp,
  Shrink: Shrink,
  Shrub: Shrub,
  Shuffle: Shuffle,
  Sidebar: PanelLeft,
  SidebarClose: PanelLeftClose,
  SidebarOpen: PanelLeftOpen,
  Sigma: Sigma,
  SigmaSquare: SquareSigma,
  Signal: Signal,
  SignalHigh: SignalHigh,
  SignalLow: SignalLow,
  SignalMedium: SignalMedium,
  SignalZero: SignalZero,
  Signature: Signature,
  Signpost: Signpost,
  SignpostBig: SignpostBig,
  Siren: Siren,
  SkipBack: SkipBack,
  SkipForward: SkipForward,
  Skull: Skull,
  Slack: Slack,
  Slash: Slash,
  SlashSquare: SquareSlash,
  Slice: Slice,
  Sliders: SlidersVertical,
  SlidersHorizontal: SlidersHorizontal,
  SlidersVertical: SlidersVertical,
  Smartphone: Smartphone,
  SmartphoneCharging: SmartphoneCharging,
  SmartphoneNfc: SmartphoneNfc,
  Smile: Smile,
  SmilePlus: SmilePlus,
  Snail: Snail,
  Snowflake: Snowflake,
  Sofa: Sofa,
  SortAsc: ArrowUpNarrowWide,
  SortDesc: ArrowDownWideNarrow,
  Soup: Soup,
  Space: Space,
  Spade: Spade,
  Sparkle: Sparkle,
  Sparkles: Sparkles,
  Speaker: Speaker,
  Speech: Speech,
  SpellCheck: SpellCheck,
  SpellCheck2: SpellCheck2,
  Spline: Spline,
  Split: Split,
  SplitSquareHorizontal: SquareSplitHorizontal,
  SplitSquareVertical: SquareSplitVertical,
  SprayCan: SprayCan,
  Sprout: Sprout,
  Square: Square,
  SquareActivity: SquareActivity,
  SquareArrowDown: SquareArrowDown,
  SquareArrowDownLeft: SquareArrowDownLeft,
  SquareArrowDownRight: SquareArrowDownRight,
  SquareArrowLeft: SquareArrowLeft,
  SquareArrowOutDownLeft: SquareArrowOutDownLeft,
  SquareArrowOutDownRight: SquareArrowOutDownRight,
  SquareArrowOutUpLeft: SquareArrowOutUpLeft,
  SquareArrowOutUpRight: SquareArrowOutUpRight,
  SquareArrowRight: SquareArrowRight,
  SquareArrowUp: SquareArrowUp,
  SquareArrowUpLeft: SquareArrowUpLeft,
  SquareArrowUpRight: SquareArrowUpRight,
  SquareAsterisk: SquareAsterisk,
  SquareBottomDashedScissors: SquareBottomDashedScissors,
  SquareChartGantt: SquareChartGantt,
  SquareCheck: SquareCheck,
  SquareCheckBig: SquareCheckBig,
  SquareChevronDown: SquareChevronDown,
  SquareChevronLeft: SquareChevronLeft,
  SquareChevronRight: SquareChevronRight,
  SquareChevronUp: SquareChevronUp,
  SquareCode: SquareCode,
  SquareDashed: SquareDashed,
  SquareDashedBottom: SquareDashedBottom,
  SquareDashedBottomCode: SquareDashedBottomCode,
  SquareDashedKanban: SquareDashedKanban,
  SquareDashedMousePointer: SquareDashedMousePointer,
  SquareDivide: SquareDivide,
  SquareDot: SquareDot,
  SquareEqual: SquareEqual,
  SquareFunction: SquareFunction,
  SquareGanttChart: SquareChartGantt,
  SquareKanban: SquareKanban,
  SquareLibrary: SquareLibrary,
  SquareM: SquareM,
  SquareMenu: SquareMenu,
  SquareMinus: SquareMinus,
  SquareMousePointer: SquareMousePointer,
  SquareParking: SquareParking,
  SquareParkingOff: SquareParkingOff,
  SquarePen: SquarePen,
  SquarePercent: SquarePercent,
  SquarePi: SquarePi,
  SquarePilcrow: SquarePilcrow,
  SquarePlay: SquarePlay,
  SquarePlus: SquarePlus,
  SquarePower: SquarePower,
  SquareRadical: SquareRadical,
  SquareRoundCorner: SquareRoundCorner,
  SquareScissors: SquareScissors,
  SquareSigma: SquareSigma,
  SquareSlash: SquareSlash,
  SquareSplitHorizontal: SquareSplitHorizontal,
  SquareSplitVertical: SquareSplitVertical,
  SquareSquare: SquareSquare,
  SquareStack: SquareStack,
  SquareTerminal: SquareTerminal,
  SquareUser: SquareUser,
  SquareUserRound: SquareUserRound,
  SquareX: SquareX,
  Squircle: Squircle,
  Squirrel: Squirrel,
  Stamp: Stamp,
  Star: Star,
  StarHalf: StarHalf,
  StarOff: StarOff,
  Stars: Sparkles,
  StepBack: StepBack,
  StepForward: StepForward,
  Stethoscope: Stethoscope,
  Sticker: Sticker,
  StickyNote: StickyNote,
  StopCircle: CircleStop,
  Store: Store,
  StretchHorizontal: StretchHorizontal,
  StretchVertical: StretchVertical,
  Strikethrough: Strikethrough,
  Subscript: Subscript,
  Subtitles: Captions,
  Sun: Sun,
  SunDim: SunDim,
  SunMedium: SunMedium,
  SunMoon: SunMoon,
  SunSnow: SunSnow,
  Sunrise: Sunrise,
  Sunset: Sunset,
  Superscript: Superscript,
  SwatchBook: SwatchBook,
  SwissFranc: SwissFranc,
  SwitchCamera: SwitchCamera,
  Sword: Sword,
  Swords: Swords,
  Syringe: Syringe,
  Table: Table,
  Table2: Table2,
  TableCellsMerge: TableCellsMerge,
  TableCellsSplit: TableCellsSplit,
  TableColumnsSplit: TableColumnsSplit,
  TableOfContents: TableOfContents,
  TableProperties: TableProperties,
  TableRowsSplit: TableRowsSplit,
  Tablet: Tablet,
  TabletSmartphone: TabletSmartphone,
  Tablets: Tablets,
  Tag: Tag,
  Tags: Tags,
  Tally1: Tally1,
  Tally2: Tally2,
  Tally3: Tally3,
  Tally4: Tally4,
  Tally5: Tally5,
  Tangent: Tangent,
  Target: Target,
  Telescope: Telescope,
  Tent: Tent,
  TentTree: TentTree,
  Terminal: Terminal,
  TerminalSquare: SquareTerminal,
  TestTube: TestTube,
  TestTube2: TestTubeDiagonal,
  TestTubeDiagonal: TestTubeDiagonal,
  TestTubes: TestTubes,
  Text: Text,
  TextCursor: TextCursor,
  TextCursorInput: TextCursorInput,
  TextQuote: TextQuote,
  TextSearch: TextSearch,
  TextSelect: TextSelect,
  TextSelection: TextSelect,
  Theater: Theater,
  Thermometer: Thermometer,
  ThermometerSnowflake: ThermometerSnowflake,
  ThermometerSun: ThermometerSun,
  ThumbsDown: ThumbsDown,
  ThumbsUp: ThumbsUp,
  Ticket: Ticket,
  TicketCheck: TicketCheck,
  TicketMinus: TicketMinus,
  TicketPercent: TicketPercent,
  TicketPlus: TicketPlus,
  TicketSlash: TicketSlash,
  TicketX: TicketX,
  Tickets: Tickets,
  TicketsPlane: TicketsPlane,
  Timer: Timer,
  TimerOff: TimerOff,
  TimerReset: TimerReset,
  ToggleLeft: ToggleLeft,
  ToggleRight: ToggleRight,
  Toilet: Toilet,
  Tornado: Tornado,
  Torus: Torus,
  Touchpad: Touchpad,
  TouchpadOff: TouchpadOff,
  TowerControl: TowerControl,
  ToyBrick: ToyBrick,
  Tractor: Tractor,
  TrafficCone: TrafficCone,
  Train: TramFront,
  TrainFront: TrainFront,
  TrainFrontTunnel: TrainFrontTunnel,
  TrainTrack: TrainTrack,
  TramFront: TramFront,
  Transgender: Transgender,
  Trash: Trash,
  Trash2: Trash2,
  TreeDeciduous: TreeDeciduous,
  TreePalm: TreePalm,
  TreePine: TreePine,
  Trees: Trees,
  Trello: Trello,
  TrendingDown: TrendingDown,
  TrendingUp: TrendingUp,
  TrendingUpDown: TrendingUpDown,
  Triangle: Triangle,
  TriangleAlert: TriangleAlert,
  TriangleDashed: TriangleDashed,
  TriangleRight: TriangleRight,
  Trophy: Trophy,
  Truck: Truck,
  Turtle: Turtle,
  Tv: Tv,
  Tv2: TvMinimal,
  TvMinimal: TvMinimal,
  TvMinimalPlay: TvMinimalPlay,
  Twitch: Twitch,
  Twitter: Twitter,
  Type: Type,
  TypeOutline: TypeOutline,
  Umbrella: Umbrella,
  UmbrellaOff: UmbrellaOff,
  Underline: Underline,
  Undo: Undo,
  Undo2: Undo2,
  UndoDot: UndoDot,
  UnfoldHorizontal: UnfoldHorizontal,
  UnfoldVertical: UnfoldVertical,
  Ungroup: Ungroup,
  University: University,
  Unlink: Unlink,
  Unlink2: Unlink2,
  Unlock: LockOpen,
  UnlockKeyhole: LockKeyholeOpen,
  Unplug: Unplug,
  Upload: Upload,
  UploadCloud: CloudUpload,
  Usb: Usb,
  User: User,
  User2: UserRound,
  UserCheck: UserCheck,
  UserCheck2: UserRoundCheck,
  UserCircle: CircleUser,
  UserCircle2: CircleUserRound,
  UserCog: UserCog,
  UserCog2: UserRoundCog,
  UserMinus: UserMinus,
  UserMinus2: UserRoundMinus,
  UserPen: UserPen,
  UserPlus: UserPlus,
  UserPlus2: UserRoundPlus,
  UserRound: UserRound,
  UserRoundCheck: UserRoundCheck,
  UserRoundCog: UserRoundCog,
  UserRoundMinus: UserRoundMinus,
  UserRoundPen: UserRoundPen,
  UserRoundPlus: UserRoundPlus,
  UserRoundSearch: UserRoundSearch,
  UserRoundX: UserRoundX,
  UserSearch: UserSearch,
  UserSquare: SquareUser,
  UserSquare2: SquareUserRound,
  UserX: UserX,
  UserX2: UserRoundX,
  Users: Users,
  Users2: UsersRound,
  UsersRound: UsersRound,
  Utensils: Utensils,
  UtensilsCrossed: UtensilsCrossed,
  UtilityPole: UtilityPole,
  Variable: Variable,
  Vault: Vault,
  Vegan: Vegan,
  VenetianMask: VenetianMask,
  Venus: Venus,
  VenusAndMars: VenusAndMars,
  Verified: BadgeCheck,
  Vibrate: Vibrate,
  VibrateOff: VibrateOff,
  Video: Video,
  VideoOff: VideoOff,
  Videotape: Videotape,
  View: View,
  Voicemail: Voicemail,
  Volleyball: Volleyball,
  Volume: Volume,
  Volume1: Volume1,
  Volume2: Volume2,
  VolumeOff: VolumeOff,
  VolumeX: VolumeX,
  Vote: Vote,
  Wallet: Wallet,
  Wallet2: WalletMinimal,
  WalletCards: WalletCards,
  WalletMinimal: WalletMinimal,
  Wallpaper: Wallpaper,
  Wand: Wand,
  Wand2: WandSparkles,
  WandSparkles: WandSparkles,
  Warehouse: Warehouse,
  WashingMachine: WashingMachine,
  Watch: Watch,
  Waves: Waves,
  WavesLadder: WavesLadder,
  Waypoints: Waypoints,
  Webcam: Webcam,
  Webhook: Webhook,
  WebhookOff: WebhookOff,
  Weight: Weight,
  Wheat: Wheat,
  WheatOff: WheatOff,
  WholeWord: WholeWord,
  Wifi: Wifi,
  WifiHigh: WifiHigh,
  WifiLow: WifiLow,
  WifiOff: WifiOff,
  WifiZero: WifiZero,
  Wind: Wind,
  WindArrowDown: WindArrowDown,
  Wine: Wine,
  WineOff: WineOff,
  Workflow: Workflow,
  Worm: Worm,
  WrapText: WrapText,
  Wrench: Wrench,
  X: X,
  XCircle: CircleX,
  XOctagon: OctagonX,
  XSquare: SquareX,
  Youtube: Youtube,
  Zap: Zap,
  ZapOff: ZapOff,
  ZoomIn: ZoomIn,
  ZoomOut: ZoomOut
});
const createIcons = ({
  icons = {},
  nameAttr = "data-lucide",
  attrs = {}
} = {}) => {
  if (!Object.values(icons).length) {
    throw new Error("Please provide an icons object.\nIf you want to use all the icons you can import it like:\n `import { createIcons, icons } from 'lucide';\nlucide.createIcons({icons});`");
  }
  if (typeof document === "undefined") {
    throw new Error("`createIcons()` only works in a browser environment.");
  }
  const elementsToReplace = document.querySelectorAll(`[${nameAttr}]`);
  Array.from(elementsToReplace).forEach(element => replaceElement(element, {
    nameAttr,
    icons,
    attrs
  }));
  if (nameAttr === "data-lucide") {
    const deprecatedElements = document.querySelectorAll("[icon-name]");
    if (deprecatedElements.length > 0) {
      console.warn("[Lucide] Some icons were found with the now deprecated icon-name attribute. These will still be replaced for backwards compatibility, but will no longer be supported in v1.0 and you should switch to data-lucide");
      Array.from(deprecatedElements).forEach(element => replaceElement(element, {
        nameAttr: "icon-name",
        icons,
        attrs
      }));
    }
  }
};


/***/ }),

/***/ "../web-components/dist/dovetail-podcasts-player-web-components lazy recursive ^\\.\\/.*\\.entry\\.js.*$":
/*!*******************************************************************************************************************!*\
  !*** ../web-components/dist/dovetail-podcasts-player-web-components/ lazy ^\.\/.*\.entry\.js.*$ namespace object ***!
  \*******************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./dtpc-button.entry.js": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-button.entry.js",
		9,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-button_entry_js"
	],
	"./dtpc-button.entry.js.map": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-button.entry.js.map",
		7,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-button_entry_js_map"
	],
	"./dtpc-mute-button.entry.js": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-mute-button.entry.js",
		9,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-mute-button_entry_js"
	],
	"./dtpc-mute-button.entry.js.map": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-mute-button.entry.js.map",
		7,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-mute-button_entry_js_map"
	],
	"./dtpc-play-button.entry.js": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-play-button.entry.js",
		9,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-play-button_entry_js"
	],
	"./dtpc-play-button.entry.js.map": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-play-button.entry.js.map",
		7,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-play-button_entry_js_map"
	],
	"./dtpc-player.entry.js": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-player.entry.js",
		9,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-player_entry_js"
	],
	"./dtpc-player.entry.js.map": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-player.entry.js.map",
		7,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-player_entry_js_map"
	],
	"./dtpc-progress-bar.entry.js": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-progress-bar.entry.js",
		9,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-progress-bar_entry_js"
	],
	"./dtpc-progress-bar.entry.js.map": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-progress-bar.entry.js.map",
		7,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-progress-bar_entry_js_map"
	],
	"./dtpc-slider.entry.js": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-slider.entry.js",
		9,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-slider_entry_js"
	],
	"./dtpc-slider.entry.js.map": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-slider.entry.js.map",
		7,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-slider_entry_js_map"
	],
	"./dtpc-time-current.entry.js": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-time-current.entry.js",
		9,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-time-current_entry_js"
	],
	"./dtpc-time-current.entry.js.map": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-time-current.entry.js.map",
		7,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-time-current_entry_js_map"
	],
	"./dtpc-time-display.entry.js": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-time-display.entry.js",
		9,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-time-display_entry_js"
	],
	"./dtpc-time-display.entry.js.map": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-time-display.entry.js.map",
		7,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-time-display_entry_js_map"
	],
	"./dtpc-time-duration.entry.js": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-time-duration.entry.js",
		9,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-time-duration_entry_js"
	],
	"./dtpc-time-duration.entry.js.map": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-time-duration.entry.js.map",
		7,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-time-duration_entry_js_map"
	],
	"./dtpc-volume-slider.entry.js": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-volume-slider.entry.js",
		9,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-volume-slider_entry_js"
	],
	"./dtpc-volume-slider.entry.js.map": [
		"../web-components/dist/dovetail-podcasts-player-web-components/dtpc-volume-slider.entry.js.map",
		7,
		"web-components_dist_dovetail-podcasts-player-web-components_dtpc-volume-slider_entry_js_map"
	],
	"./icon-pause.entry.js": [
		"../web-components/dist/dovetail-podcasts-player-web-components/icon-pause.entry.js",
		9,
		"web-components_dist_dovetail-podcasts-player-web-components_icon-pause_entry_js"
	],
	"./icon-pause.entry.js.map": [
		"../web-components/dist/dovetail-podcasts-player-web-components/icon-pause.entry.js.map",
		7,
		"web-components_dist_dovetail-podcasts-player-web-components_icon-pause_entry_js_map"
	],
	"./icon-play.entry.js": [
		"../web-components/dist/dovetail-podcasts-player-web-components/icon-play.entry.js",
		9,
		"web-components_dist_dovetail-podcasts-player-web-components_icon-play_entry_js"
	],
	"./icon-play.entry.js.map": [
		"../web-components/dist/dovetail-podcasts-player-web-components/icon-play.entry.js.map",
		7,
		"web-components_dist_dovetail-podcasts-player-web-components_icon-play_entry_js_map"
	],
	"./icon-volume.entry.js": [
		"../web-components/dist/dovetail-podcasts-player-web-components/icon-volume.entry.js",
		9,
		"web-components_dist_dovetail-podcasts-player-web-components_icon-volume_entry_js"
	],
	"./icon-volume.entry.js.map": [
		"../web-components/dist/dovetail-podcasts-player-web-components/icon-volume.entry.js.map",
		7,
		"web-components_dist_dovetail-podcasts-player-web-components_icon-volume_entry_js_map"
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(() => {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return __webpack_require__.e(ids[2]).then(() => {
		return __webpack_require__.t(id, ids[1] | 16)
	});
}
webpackAsyncContext.keys = () => (Object.keys(map));
webpackAsyncContext.id = "../web-components/dist/dovetail-podcasts-player-web-components lazy recursive ^\\.\\/.*\\.entry\\.js.*$";
module.exports = webpackAsyncContext;

/***/ }),

/***/ "../web-components/dist/dovetail-podcasts-player-web-components/app-globals-DQuL1Twl.js":
/*!**********************************************************************************************!*\
  !*** ../web-components/dist/dovetail-podcasts-player-web-components/app-globals-DQuL1Twl.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ globalScripts)
/* harmony export */ });
const globalScripts = () => {};


/***/ }),

/***/ "../web-components/dist/dovetail-podcasts-player-web-components/dovetail-podcasts-player-web-components.esm.js":
/*!*********************************************************************************************************************!*\
  !*** ../web-components/dist/dovetail-podcasts-player-web-components/dovetail-podcasts-player-web-components.esm.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setNonce: () => (/* reexport safe */ _index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.s)
/* harmony export */ });
/* harmony import */ var _index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-DjC7PCMK.js */ "../web-components/dist/dovetail-podcasts-player-web-components/index-DjC7PCMK.js");
/* harmony import */ var _app_globals_DQuL1Twl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app-globals-DQuL1Twl.js */ "../web-components/dist/dovetail-podcasts-player-web-components/app-globals-DQuL1Twl.js");



var patchBrowser = () => {
  if (_index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.B.isDev && !_index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.B.isTesting) {
    (0,_index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.c)("Running in development mode.");
  }
  if (_index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.B.cloneNodeFix) {
    patchCloneNodeFix(_index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.H.prototype);
  }
  const scriptElm = _index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.B.scriptDataOpts ? _index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.w.document && Array.from(_index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.w.document.querySelectorAll("script")).find(s => new RegExp(`/${_index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.N}(\\.esm)?\\.js($|\\?|#)`).test(s.src) || s.getAttribute("data-stencil-namespace") === _index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.N) : null;
  const importMeta = "file:///Users/rick/Projects/PRX/dt-plugin-demo-wordpress/wordpress/wp-content/plugins/dovetail-podcasts/src/Content/Player/web-components/dist/dovetail-podcasts-player-web-components/dovetail-podcasts-player-web-components.esm.js";
  const opts = _index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.B.scriptDataOpts ? (scriptElm || {})["data-opts"] || {} : {};
  if (importMeta !== "") {
    opts.resourcesUrl = new URL(".", importMeta).href;
  }
  return (0,_index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.p)(opts);
};
var patchCloneNodeFix = HTMLElementPrototype => {
  const nativeCloneNodeFn = HTMLElementPrototype.cloneNode;
  HTMLElementPrototype.cloneNode = function (deep) {
    if (this.nodeName === "TEMPLATE") {
      return nativeCloneNodeFn.call(this, deep);
    }
    const clonedNode = nativeCloneNodeFn.call(this, false);
    const srcChildNodes = this.childNodes;
    if (deep) {
      for (let i = 0; i < srcChildNodes.length; i++) {
        if (srcChildNodes[i].nodeType !== 2) {
          clonedNode.appendChild(srcChildNodes[i].cloneNode(true));
        }
      }
    }
    return clonedNode;
  };
};
patchBrowser().then(async options => {
  await (0,_app_globals_DQuL1Twl_js__WEBPACK_IMPORTED_MODULE_1__.g)();
  return (0,_index_DjC7PCMK_js__WEBPACK_IMPORTED_MODULE_0__.b)([["dtpc-play-button", [[1, "dtpc-play-button", null, [[0, "click", "handleClick"]]]]], ["dtpc-mute-button", [[1, "dtpc-mute-button", null, [[0, "click", "handleClick"]]]]], ["dtpc-time-display", [[1, "dtpc-time-display", {
    "duration": [2]
  }]]], ["dtpc-progress-bar", [[1, "dtpc-progress-bar", {
    "duration": [2],
    "audioDuration": [32]
  }, [[0, "slider-input", "handleInput"], [0, "slider-change", "handleChange"]]]]], ["dtpc-volume-slider", [[1, "dtpc-volume-slider", {
    "orient": [1],
    "volume": [2]
  }, [[0, "slider-input", "handleInput"]]]]], ["dtpc-player", [[1, "dtpc-player", {
    "src": [1],
    "duration": [2],
    "audioDuration": [32]
  }, [[0, "audio-toggle-paused", "handleTogglePaused"], [0, "dtpc-control-init", "handleControlInit"]], {
    "src": ["watchSrcHandler"]
  }]]], ["dtpc-time-current", [[1, "dtpc-time-current"]]], ["dtpc-time-duration", [[1, "dtpc-time-duration", {
    "duration": [2],
    "audioDuration": [32]
  }]]], ["icon-pause", [[0, "icon-pause", {
    "alignmentBaseline": [8, "alignment-baseline"],
    "baselineShift": [8, "baseline-shift"],
    "clipPath": [8, "clip-path"],
    "clipRule": [8, "clip-rule"],
    "color": [8],
    "colorInterpolation": [8, "color-interpolation"],
    "colorInterpolationFilters": [8, "color-interpolation-filters"],
    "colorRendering": [8, "color-rendering"],
    "cursor": [8],
    "cx": [8],
    "cy": [8],
    "d": [8],
    "direction": [8],
    "display": [8],
    "dominantBaseline": [8, "dominant-baseline"],
    "fill": [8],
    "fillOpacity": [8, "fill-opacity"],
    "fillRule": [8, "fill-rule"],
    "filter": [8],
    "floodColor": [8, "flood-color"],
    "floodOpacity": [8, "flood-opacity"],
    "font": [8],
    "fontFamily": [8, "font-family"],
    "fontKerning": [8, "font-kerning"],
    "fontSize": [8, "font-size"],
    "fontSizeAdjust": [8, "font-size-adjust"],
    "fontStretch": [8, "font-stretch"],
    "fontStyle": [8, "font-style"],
    "fontVariant": [8, "font-variant"],
    "fontWeight": [8, "font-weight"],
    "height": [8],
    "imageRendering": [8, "image-rendering"],
    "isolation": [8],
    "letterSpacing": [8, "letter-spacing"],
    "lightingColor": [8, "lighting-color"],
    "marker": [8],
    "markerEnd": [8, "marker-end"],
    "markerMid": [8, "marker-mid"],
    "markerStart": [8, "marker-start"],
    "mask": [8],
    "maskClip": [8, "mask-clip"],
    "maskComposite": [8, "mask-composite"],
    "maskImage": [8, "mask-image"],
    "maskMode": [8, "mask-mode"],
    "maskOrigin": [8, "mask-origin"],
    "maskPosition": [8, "mask-position"],
    "maskRepeat": [8, "mask-repeat"],
    "maskSize": [8, "mask-size"],
    "maskType": [8, "mask-type"],
    "opacity": [8],
    "overflow": [8],
    "pointerEvents": [8, "pointer-events"],
    "r": [8],
    "rx": [8],
    "ry": [8],
    "shapeRendering": [8, "shape-rendering"],
    "stopColor": [8, "stop-color"],
    "stopOpacity": [8, "stop-opacity"],
    "stroke": [8],
    "strokeDasharray": [8, "stroke-dasharray"],
    "strokeDashoffset": [8, "stroke-dashoffset"],
    "strokeLinecap": [8, "stroke-linecap"],
    "strokeLinejoin": [8, "stroke-linejoin"],
    "strokeMiterlimit": [8, "stroke-miterlimit"],
    "strokeOpacity": [8, "stroke-opacity"],
    "strokeWidth": [8, "stroke-width"],
    "textAnchor": [8, "text-anchor"],
    "textDecoration": [8, "text-decoration"],
    "textOrientation": [8, "text-orientation"],
    "textRendering": [8, "text-rendering"],
    "transform": [8],
    "transformBox": [8, "transform-box"],
    "transformOrigin": [8, "transform-origin"],
    "unicodeBidi": [8, "unicode-bidi"],
    "visibility": [8],
    "width": [8],
    "wordSpacing": [8, "word-spacing"],
    "writingMode": [8, "writing-mode"],
    "x": [8],
    "y": [8]
  }]]], ["icon-play", [[0, "icon-play", {
    "alignmentBaseline": [8, "alignment-baseline"],
    "baselineShift": [8, "baseline-shift"],
    "clipPath": [8, "clip-path"],
    "clipRule": [8, "clip-rule"],
    "color": [8],
    "colorInterpolation": [8, "color-interpolation"],
    "colorInterpolationFilters": [8, "color-interpolation-filters"],
    "colorRendering": [8, "color-rendering"],
    "cursor": [8],
    "cx": [8],
    "cy": [8],
    "d": [8],
    "direction": [8],
    "display": [8],
    "dominantBaseline": [8, "dominant-baseline"],
    "fill": [8],
    "fillOpacity": [8, "fill-opacity"],
    "fillRule": [8, "fill-rule"],
    "filter": [8],
    "floodColor": [8, "flood-color"],
    "floodOpacity": [8, "flood-opacity"],
    "font": [8],
    "fontFamily": [8, "font-family"],
    "fontKerning": [8, "font-kerning"],
    "fontSize": [8, "font-size"],
    "fontSizeAdjust": [8, "font-size-adjust"],
    "fontStretch": [8, "font-stretch"],
    "fontStyle": [8, "font-style"],
    "fontVariant": [8, "font-variant"],
    "fontWeight": [8, "font-weight"],
    "height": [8],
    "imageRendering": [8, "image-rendering"],
    "isolation": [8],
    "letterSpacing": [8, "letter-spacing"],
    "lightingColor": [8, "lighting-color"],
    "marker": [8],
    "markerEnd": [8, "marker-end"],
    "markerMid": [8, "marker-mid"],
    "markerStart": [8, "marker-start"],
    "mask": [8],
    "maskClip": [8, "mask-clip"],
    "maskComposite": [8, "mask-composite"],
    "maskImage": [8, "mask-image"],
    "maskMode": [8, "mask-mode"],
    "maskOrigin": [8, "mask-origin"],
    "maskPosition": [8, "mask-position"],
    "maskRepeat": [8, "mask-repeat"],
    "maskSize": [8, "mask-size"],
    "maskType": [8, "mask-type"],
    "opacity": [8],
    "overflow": [8],
    "pointerEvents": [8, "pointer-events"],
    "r": [8],
    "rx": [8],
    "ry": [8],
    "shapeRendering": [8, "shape-rendering"],
    "stopColor": [8, "stop-color"],
    "stopOpacity": [8, "stop-opacity"],
    "stroke": [8],
    "strokeDasharray": [8, "stroke-dasharray"],
    "strokeDashoffset": [8, "stroke-dashoffset"],
    "strokeLinecap": [8, "stroke-linecap"],
    "strokeLinejoin": [8, "stroke-linejoin"],
    "strokeMiterlimit": [8, "stroke-miterlimit"],
    "strokeOpacity": [8, "stroke-opacity"],
    "strokeWidth": [8, "stroke-width"],
    "textAnchor": [8, "text-anchor"],
    "textDecoration": [8, "text-decoration"],
    "textOrientation": [8, "text-orientation"],
    "textRendering": [8, "text-rendering"],
    "transform": [8],
    "transformBox": [8, "transform-box"],
    "transformOrigin": [8, "transform-origin"],
    "unicodeBidi": [8, "unicode-bidi"],
    "visibility": [8],
    "width": [8],
    "wordSpacing": [8, "word-spacing"],
    "writingMode": [8, "writing-mode"],
    "x": [8],
    "y": [8]
  }]]], ["icon-volume", [[0, "icon-volume", {
    "volume": [2, "level"],
    "muted": [4],
    "alignmentBaseline": [8, "alignment-baseline"],
    "baselineShift": [8, "baseline-shift"],
    "clipPath": [8, "clip-path"],
    "clipRule": [8, "clip-rule"],
    "color": [8],
    "colorInterpolation": [8, "color-interpolation"],
    "colorInterpolationFilters": [8, "color-interpolation-filters"],
    "colorRendering": [8, "color-rendering"],
    "cursor": [8],
    "cx": [8],
    "cy": [8],
    "d": [8],
    "direction": [8],
    "display": [8],
    "dominantBaseline": [8, "dominant-baseline"],
    "fill": [8],
    "fillOpacity": [8, "fill-opacity"],
    "fillRule": [8, "fill-rule"],
    "filter": [8],
    "floodColor": [8, "flood-color"],
    "floodOpacity": [8, "flood-opacity"],
    "font": [8],
    "fontFamily": [8, "font-family"],
    "fontKerning": [8, "font-kerning"],
    "fontSize": [8, "font-size"],
    "fontSizeAdjust": [8, "font-size-adjust"],
    "fontStretch": [8, "font-stretch"],
    "fontStyle": [8, "font-style"],
    "fontVariant": [8, "font-variant"],
    "fontWeight": [8, "font-weight"],
    "height": [8],
    "imageRendering": [8, "image-rendering"],
    "isolation": [8],
    "letterSpacing": [8, "letter-spacing"],
    "lightingColor": [8, "lighting-color"],
    "marker": [8],
    "markerEnd": [8, "marker-end"],
    "markerMid": [8, "marker-mid"],
    "markerStart": [8, "marker-start"],
    "mask": [8],
    "maskClip": [8, "mask-clip"],
    "maskComposite": [8, "mask-composite"],
    "maskImage": [8, "mask-image"],
    "maskMode": [8, "mask-mode"],
    "maskOrigin": [8, "mask-origin"],
    "maskPosition": [8, "mask-position"],
    "maskRepeat": [8, "mask-repeat"],
    "maskSize": [8, "mask-size"],
    "maskType": [8, "mask-type"],
    "opacity": [8],
    "overflow": [8],
    "pointerEvents": [8, "pointer-events"],
    "r": [8],
    "rx": [8],
    "ry": [8],
    "shapeRendering": [8, "shape-rendering"],
    "stopColor": [8, "stop-color"],
    "stopOpacity": [8, "stop-opacity"],
    "stroke": [8],
    "strokeDasharray": [8, "stroke-dasharray"],
    "strokeDashoffset": [8, "stroke-dashoffset"],
    "strokeLinecap": [8, "stroke-linecap"],
    "strokeLinejoin": [8, "stroke-linejoin"],
    "strokeMiterlimit": [8, "stroke-miterlimit"],
    "strokeOpacity": [8, "stroke-opacity"],
    "strokeWidth": [8, "stroke-width"],
    "textAnchor": [8, "text-anchor"],
    "textDecoration": [8, "text-decoration"],
    "textOrientation": [8, "text-orientation"],
    "textRendering": [8, "text-rendering"],
    "transform": [8],
    "transformBox": [8, "transform-box"],
    "transformOrigin": [8, "transform-origin"],
    "unicodeBidi": [8, "unicode-bidi"],
    "visibility": [8],
    "width": [8],
    "wordSpacing": [8, "word-spacing"],
    "writingMode": [8, "writing-mode"],
    "x": [8],
    "y": [8]
  }]]], ["dtpc-button", [[1, "dtpc-button", null, [[0, "keydown", "handleKeyDown"]]]]], ["dtpc-slider", [[1, "dtpc-slider", {
    "disabled": [4],
    "defaultValue": [2, "default-value"],
    "value": [2],
    "min": [2],
    "max": [2],
    "step": [2],
    "orient": [1],
    "currentValue": [32]
  }, null, {
    "value": ["handleValueChange"]
  }]]]], options);
});

/***/ }),

/***/ "../web-components/dist/dovetail-podcasts-player-web-components/index-DjC7PCMK.js":
/*!****************************************************************************************!*\
  !*** ../web-components/dist/dovetail-podcasts-player-web-components/index-DjC7PCMK.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B: () => (/* binding */ BUILD),
/* harmony export */   H: () => (/* binding */ H),
/* harmony export */   N: () => (/* binding */ NAMESPACE),
/* harmony export */   a: () => (/* binding */ createEvent),
/* harmony export */   b: () => (/* binding */ bootstrapLazy),
/* harmony export */   c: () => (/* binding */ consoleDevInfo),
/* harmony export */   d: () => (/* binding */ Host),
/* harmony export */   e: () => (/* binding */ getElement),
/* harmony export */   f: () => (/* binding */ forceUpdate),
/* harmony export */   g: () => (/* binding */ getRenderingRef),
/* harmony export */   h: () => (/* binding */ h),
/* harmony export */   p: () => (/* binding */ promiseResolve),
/* harmony export */   r: () => (/* binding */ registerInstance),
/* harmony export */   s: () => (/* binding */ setNonce),
/* harmony export */   w: () => (/* binding */ win)
/* harmony export */ });
const NAMESPACE = 'dovetail-podcasts-player-web-components';
const BUILD = {
  allRenderFn: true,
  appendChildSlotFix: false,
  asyncLoading: true,
  asyncQueue: false,
  attachStyles: true,
  cloneNodeFix: false,
  constructableCSS: true,
  cssAnnotations: true,
  devTools: true,
  element: false,
  event: true,
  experimentalScopedSlotChanges: false,
  experimentalSlotFixes: false,
  formAssociated: false,
  hasRenderFn: true,
  hostListener: true,
  hostListenerTarget: false,
  hostListenerTargetBody: false,
  hostListenerTargetDocument: false,
  hostListenerTargetParent: false,
  hostListenerTargetWindow: false,
  hotModuleReplacement: false,
  hydrateClientSide: false,
  hydrateServerSide: false,
  hydratedAttribute: false,
  hydratedClass: true,
  hydratedSelectorName: "hydrated",
  initializeNextTick: false,
  invisiblePrehydration: true,
  isDebug: false,
  isDev: true,
  isTesting: false,
  lazyLoad: true,
  lifecycle: true,
  lifecycleDOMEvents: false,
  member: true,
  method: false,
  mode: false,
  modernPropertyDecls: true,
  observeAttribute: true,
  profile: true,
  prop: true,
  propBoolean: true,
  propMutable: false,
  propNumber: true,
  propString: true,
  reflect: false,
  scoped: false,
  scopedSlotTextContentFix: false,
  scriptDataOpts: false,
  shadowDelegatesFocus: false,
  shadowDom: true,
  slot: true,
  slotChildNodesFix: false,
  slotRelocation: false,
  state: true,
  style: true,
  svg: false,
  taskQueue: true,
  transformTagName: false,
  updatable: true,
  vdomAttribute: true,
  vdomClass: true,
  vdomFunctional: false,
  vdomKey: true,
  vdomListener: true,
  vdomPropOrAttr: true,
  vdomRef: true,
  vdomRender: true,
  vdomStyle: true,
  vdomText: true,
  vdomXlink: true,
  watchCallback: true
};
const Env = {};
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
var Build = {
  isDev: BUILD.isDev ? true : false,
  isBrowser: true,
  isServer: false,
  isTesting: BUILD.isTesting ? true : false
};
var SVG_NS = "http://www.w3.org/2000/svg";
var HTML_NS = "http://www.w3.org/1999/xhtml";
var reWireGetterSetter = (instance, hostRef) => {
  var _a;
  const cmpMeta = hostRef.$cmpMeta$;
  const members = Object.entries((_a = cmpMeta.$members$) != null ? _a : {});
  members.map(([memberName, [memberFlags]]) => {
    if ((BUILD.state || BUILD.prop) && (memberFlags & 31 || memberFlags & 32)) {
      const ogValue = instance[memberName];
      const ogDescriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(instance), memberName);
      Object.defineProperty(instance, memberName, {
        get() {
          return ogDescriptor.get.call(this);
        },
        set(newValue) {
          ogDescriptor.set.call(this, newValue);
        },
        configurable: true,
        enumerable: true
      });
      instance[memberName] = hostRef.$instanceValues$.has(memberName) ? hostRef.$instanceValues$.get(memberName) : ogValue;
    }
  });
};
var getHostRef = ref => {
  if (ref.__stencil__getHostRef) {
    return ref.__stencil__getHostRef();
  }
  return void 0;
};
var registerInstance = (lazyInstance, hostRef) => {
  lazyInstance.__stencil__getHostRef = () => hostRef;
  hostRef.$lazyInstance$ = lazyInstance;
  if (BUILD.modernPropertyDecls && (BUILD.state || BUILD.prop)) {
    reWireGetterSetter(lazyInstance, hostRef);
  }
};
var registerHost = (hostElement, cmpMeta) => {
  const hostRef = {
    $flags$: 0,
    $hostElement$: hostElement,
    $cmpMeta$: cmpMeta,
    $instanceValues$: new Map()
  };
  if (BUILD.isDev) {
    hostRef.$renderCount$ = 0;
  }
  if (BUILD.method && BUILD.lazyLoad) {
    hostRef.$onInstancePromise$ = new Promise(r => hostRef.$onInstanceResolve$ = r);
  }
  if (BUILD.asyncLoading) {
    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);
    hostElement["s-p"] = [];
    hostElement["s-rc"] = [];
  }
  const ref = hostRef;
  hostElement.__stencil__getHostRef = () => ref;
  if (!BUILD.lazyLoad && BUILD.modernPropertyDecls && (BUILD.state || BUILD.prop)) {
    reWireGetterSetter(hostElement, hostRef);
  }
  return ref;
};
var isMemberInElement = (elm, memberName) => memberName in elm;
var customError;
var consoleError = (e, el) => (customError || console.error)(e, el);
var STENCIL_DEV_MODE = BUILD.isTesting ? ["STENCIL:"] : ["%cstencil", "color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px"];
var consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);
var consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);
var consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);
var setErrorHandler = handler => customError = handler;
var cmpModules = new Map();
var MODULE_IMPORT_PREFIX = "./";
var loadModule = (cmpMeta, hostRef, hmrVersionId) => {
  const exportName = cmpMeta.$tagName$.replace(/-/g, "_");
  const bundleId = cmpMeta.$lazyBundleId$;
  if (BUILD.isDev && typeof bundleId !== "string") {
    consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode "${hostRef.$modeName$}", but it does not exist.`);
    return void 0;
  } else if (!bundleId) {
    return void 0;
  }
  const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;
  if (module) {
    return module[exportName];
  }
  return __webpack_require__("../web-components/dist/dovetail-podcasts-player-web-components lazy recursive ^\\.\\/.*\\.entry\\.js.*$")(`./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? "?s-hmr=" + hmrVersionId : ""}`).then(importedModule => {
    if (!BUILD.hotModuleReplacement) {
      cmpModules.set(bundleId, importedModule);
    }
    return importedModule[exportName];
  }, e => {
    consoleError(e, hostRef.$hostElement$);
  });
};
var styles = new Map();
var modeResolutionChain = [];
var CONTENT_REF_ID = "r";
var ORG_LOCATION_ID = "o";
var SLOT_NODE_ID = "s";
var TEXT_NODE_ID = "t";
var COMMENT_NODE_ID = "c";
var HYDRATE_ID = "s-id";
var HYDRATED_STYLE_ID = "sty-id";
var HYDRATE_CHILD_ID = "c-id";
var HYDRATED_CSS = "{visibility:hidden}.hydrated{visibility:inherit}";
var STENCIL_DOC_DATA = "_stencilDocData";
var DEFAULT_DOC_DATA = {
  hostIds: 0,
  rootLevelIds: 0,
  staticComponents: new Set()
};
var SLOT_FB_CSS = "slot-fb{display:contents}slot-fb[hidden]{display:none}";
var XLINK_NS = "http://www.w3.org/1999/xlink";
var FORM_ASSOCIATED_CUSTOM_ELEMENT_CALLBACKS = ["formAssociatedCallback", "formResetCallback", "formDisabledCallback", "formStateRestoreCallback"];
var win = typeof window !== "undefined" ? window : {};
var H = win.HTMLElement || class {};
var plt = {
  $flags$: 0,
  $resourcesUrl$: "",
  jmp: h2 => h2(),
  raf: h2 => requestAnimationFrame(h2),
  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),
  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),
  ce: (eventName, opts) => new CustomEvent(eventName, opts)
};
var setPlatformHelpers = helpers => {
  Object.assign(plt, helpers);
};
var supportsShadow = BUILD.shadowDom;
var supportsListenerOptions = (() => {
  var _a;
  let supportsListenerOptions2 = false;
  try {
    (_a = win.document) == null ? void 0 : _a.addEventListener("e", null, Object.defineProperty({}, "passive", {
      get() {
        supportsListenerOptions2 = true;
      }
    }));
  } catch (e) {}
  return supportsListenerOptions2;
})();
var promiseResolve = v => Promise.resolve(v);
var supportsConstructableStylesheets = BUILD.constructableCSS ? (() => {
  try {
    new CSSStyleSheet();
    return typeof new CSSStyleSheet().replaceSync === "function";
  } catch (e) {}
  return false;
})() : false;
var queueCongestion = 0;
var queuePending = false;
var queueDomReads = [];
var queueDomWrites = [];
var queueDomWritesLow = [];
var queueTask = (queue, write) => cb => {
  queue.push(cb);
  if (!queuePending) {
    queuePending = true;
    if (write && plt.$flags$ & 4) {
      nextTick(flush);
    } else {
      plt.raf(flush);
    }
  }
};
var consume = queue => {
  for (let i2 = 0; i2 < queue.length; i2++) {
    try {
      queue[i2](performance.now());
    } catch (e) {
      consoleError(e);
    }
  }
  queue.length = 0;
};
var consumeTimeout = (queue, timeout) => {
  let i2 = 0;
  let ts = 0;
  while (i2 < queue.length && (ts = performance.now()) < timeout) {
    try {
      queue[i2++](ts);
    } catch (e) {
      consoleError(e);
    }
  }
  if (i2 === queue.length) {
    queue.length = 0;
  } else if (i2 !== 0) {
    queue.splice(0, i2);
  }
};
var flush = () => {
  if (BUILD.asyncQueue) {
    queueCongestion++;
  }
  consume(queueDomReads);
  if (BUILD.asyncQueue) {
    const timeout = (plt.$flags$ & 6) === 2 ? performance.now() + 14 * Math.ceil(queueCongestion * (1 / 10)) : Infinity;
    consumeTimeout(queueDomWrites, timeout);
    consumeTimeout(queueDomWritesLow, timeout);
    if (queueDomWrites.length > 0) {
      queueDomWritesLow.push(...queueDomWrites);
      queueDomWrites.length = 0;
    }
    if (queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0) {
      plt.raf(flush);
    } else {
      queueCongestion = 0;
    }
  } else {
    consume(queueDomWrites);
    if (queuePending = queueDomReads.length > 0) {
      plt.raf(flush);
    }
  }
};
var nextTick = cb => promiseResolve().then(cb);
var readTask = queueTask(queueDomReads, false);
var writeTask = queueTask(queueDomWrites, true);
var getAssetPath = path => {
  const assetUrl = new URL(path, plt.$resourcesUrl$);
  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;
};
var setAssetPath = path => plt.$resourcesUrl$ = path;
var isDef = v => v != null && v !== void 0;
var isComplexType = o => {
  o = typeof o;
  return o === "object" || o === "function";
};
function queryNonceMetaTagContent(doc) {
  var _a, _b, _c;
  return (_c = (_b = (_a = doc.head) == null ? void 0 : _a.querySelector('meta[name="csp-nonce"]')) == null ? void 0 : _b.getAttribute("content")) != null ? _c : void 0;
}
var escapeRegExpSpecialCharacters = text => {
  return text.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
};
var result_exports = {};
__export(result_exports, {
  err: () => err,
  map: () => map,
  ok: () => ok,
  unwrap: () => unwrap,
  unwrapErr: () => unwrapErr
});
var ok = value => ({
  isOk: true,
  isErr: false,
  value
});
var err = value => ({
  isOk: false,
  isErr: true,
  value
});
function map(result, fn) {
  if (result.isOk) {
    const val = fn(result.value);
    if (val instanceof Promise) {
      return val.then(newVal => ok(newVal));
    } else {
      return ok(val);
    }
  }
  if (result.isErr) {
    const value = result.value;
    return err(value);
  }
  throw "should never get here";
}
var unwrap = result => {
  if (result.isOk) {
    return result.value;
  } else {
    throw result.value;
  }
};
var unwrapErr = result => {
  if (result.isErr) {
    return result.value;
  } else {
    throw result.value;
  }
};
var lowerPathParam = fn => p => fn(p.toLowerCase());
var isDtsFile = lowerPathParam(p => p.endsWith(".d.ts") || p.endsWith(".d.mts") || p.endsWith(".d.cts"));
var isTsFile = lowerPathParam(p => !isDtsFile(p) && (p.endsWith(".ts") || p.endsWith(".mts") || p.endsWith(".cts")));
var isTsxFile = lowerPathParam(p => p.endsWith(".tsx") || p.endsWith(".mtsx") || p.endsWith(".ctsx"));
var isJsxFile = lowerPathParam(p => p.endsWith(".jsx") || p.endsWith(".mjsx") || p.endsWith(".cjsx"));
var isJsFile = lowerPathParam(p => p.endsWith(".js") || p.endsWith(".mjs") || p.endsWith(".cjs"));
var updateFallbackSlotVisibility = elm => {
  const childNodes = internalCall(elm, "childNodes");
  if (elm.tagName && elm.tagName.includes("-") && elm["s-cr"] && elm.tagName !== "SLOT-FB") {
    getHostSlotNodes(childNodes, elm.tagName).forEach(slotNode => {
      if (slotNode.nodeType === 1 && slotNode.tagName === "SLOT-FB") {
        if (getSlotChildSiblings(slotNode, getSlotName(slotNode), false).length) {
          slotNode.hidden = true;
        } else {
          slotNode.hidden = false;
        }
      }
    });
  }
  let i2 = 0;
  for (i2 = 0; i2 < childNodes.length; i2++) {
    const childNode = childNodes[i2];
    if (childNode.nodeType === 1 && internalCall(childNode, "childNodes").length) {
      updateFallbackSlotVisibility(childNode);
    }
  }
};
var getSlottedChildNodes = childNodes => {
  const result = [];
  for (let i2 = 0; i2 < childNodes.length; i2++) {
    const slottedNode = childNodes[i2]["s-nr"] || void 0;
    if (slottedNode && slottedNode.isConnected) {
      result.push(slottedNode);
    }
  }
  return result;
};
function getHostSlotNodes(childNodes, hostName, slotName) {
  let i2 = 0;
  let slottedNodes = [];
  let childNode;
  for (; i2 < childNodes.length; i2++) {
    childNode = childNodes[i2];
    if (childNode["s-sr"] && (!hostName || childNode["s-hn"] === hostName) && (slotName === void 0 || getSlotName(childNode) === slotName)) {
      slottedNodes.push(childNode);
      if (typeof slotName !== "undefined") return slottedNodes;
    }
    slottedNodes = [...slottedNodes, ...getHostSlotNodes(childNode.childNodes, hostName, slotName)];
  }
  return slottedNodes;
}
var getSlotChildSiblings = (slot, slotName, includeSlot = true) => {
  const childNodes = [];
  if (includeSlot && slot["s-sr"] || !slot["s-sr"]) childNodes.push(slot);
  let node = slot;
  while (node = node.nextSibling) {
    if (getSlotName(node) === slotName && (includeSlot || !node["s-sr"])) childNodes.push(node);
  }
  return childNodes;
};
var isNodeLocatedInSlot = (nodeToRelocate, slotName) => {
  if (nodeToRelocate.nodeType === 1) {
    if (nodeToRelocate.getAttribute("slot") === null && slotName === "") {
      return true;
    }
    if (nodeToRelocate.getAttribute("slot") === slotName) {
      return true;
    }
    return false;
  }
  if (nodeToRelocate["s-sn"] === slotName) {
    return true;
  }
  return slotName === "";
};
var addSlotRelocateNode = (newChild, slotNode, prepend, position) => {
  if (newChild["s-ol"] && newChild["s-ol"].isConnected) {
    return;
  }
  const slottedNodeLocation = document.createTextNode("");
  slottedNodeLocation["s-nr"] = newChild;
  if (!slotNode["s-cr"] || !slotNode["s-cr"].parentNode) return;
  const parent = slotNode["s-cr"].parentNode;
  const appendMethod = prepend ? internalCall(parent, "prepend") : internalCall(parent, "appendChild");
  if (BUILD.hydrateClientSide && typeof position !== "undefined") {
    slottedNodeLocation["s-oo"] = position;
    const childNodes = internalCall(parent, "childNodes");
    const slotRelocateNodes = [slottedNodeLocation];
    childNodes.forEach(n => {
      if (n["s-nr"]) slotRelocateNodes.push(n);
    });
    slotRelocateNodes.sort((a, b) => {
      if (!a["s-oo"] || a["s-oo"] < (b["s-oo"] || 0)) return -1;else if (!b["s-oo"] || b["s-oo"] < a["s-oo"]) return 1;
      return 0;
    });
    slotRelocateNodes.forEach(n => appendMethod.call(parent, n));
  } else {
    appendMethod.call(parent, slottedNodeLocation);
  }
  newChild["s-ol"] = slottedNodeLocation;
  newChild["s-sh"] = slotNode["s-hn"];
};
var getSlotName = node => typeof node["s-sn"] === "string" ? node["s-sn"] : node.nodeType === 1 && node.getAttribute("slot") || void 0;
function patchSlotNode(node) {
  if (node.assignedElements || node.assignedNodes || !node["s-sr"]) return;
  const assignedFactory = elementsOnly => function (opts) {
    const toReturn = [];
    const slotName = this["s-sn"];
    if (opts == null ? void 0 : opts.flatten) {
      console.error(`
          Flattening is not supported for Stencil non-shadow slots. 
          You can use \`.childNodes\` to nested slot fallback content.
          If you have a particular use case, please open an issue on the Stencil repo.
        `);
    }
    const parent = this["s-cr"].parentElement;
    const slottedNodes = parent.__childNodes ? parent.childNodes : getSlottedChildNodes(parent.childNodes);
    slottedNodes.forEach(n => {
      if (slotName === getSlotName(n)) {
        toReturn.push(n);
      }
    });
    if (elementsOnly) {
      return toReturn.filter(n => n.nodeType === 1);
    }
    return toReturn;
  }.bind(node);
  node.assignedElements = assignedFactory(true);
  node.assignedNodes = assignedFactory(false);
}
function dispatchSlotChangeEvent(elm) {
  elm.dispatchEvent(new CustomEvent("slotchange", {
    bubbles: false,
    cancelable: false,
    composed: false
  }));
}
function findSlotFromSlottedNode(slottedNode, parentHost) {
  var _a;
  parentHost = parentHost || ((_a = slottedNode["s-ol"]) == null ? void 0 : _a.parentElement);
  if (!parentHost) return {
    slotNode: null,
    slotName: ""
  };
  const slotName = slottedNode["s-sn"] = getSlotName(slottedNode) || "";
  const childNodes = internalCall(parentHost, "childNodes");
  const slotNode = getHostSlotNodes(childNodes, parentHost.tagName, slotName)[0];
  return {
    slotNode,
    slotName
  };
}
var patchPseudoShadowDom = hostElementPrototype => {
  patchCloneNode(hostElementPrototype);
  patchSlotAppendChild(hostElementPrototype);
  patchSlotAppend(hostElementPrototype);
  patchSlotPrepend(hostElementPrototype);
  patchSlotInsertAdjacentElement(hostElementPrototype);
  patchSlotInsertAdjacentHTML(hostElementPrototype);
  patchSlotInsertAdjacentText(hostElementPrototype);
  patchInsertBefore(hostElementPrototype);
  patchTextContent(hostElementPrototype);
  patchChildSlotNodes(hostElementPrototype);
  patchSlotRemoveChild(hostElementPrototype);
};
var patchCloneNode = HostElementPrototype => {
  const orgCloneNode = HostElementPrototype.cloneNode;
  HostElementPrototype.cloneNode = function (deep) {
    const srcNode = this;
    const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;
    const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);
    if (BUILD.slot && !isShadowDom && deep) {
      let i2 = 0;
      let slotted, nonStencilNode;
      const stencilPrivates = ["s-id", "s-cr", "s-lr", "s-rc", "s-sc", "s-p", "s-cn", "s-sr", "s-sn", "s-hn", "s-ol", "s-nr", "s-si", "s-rf", "s-scs"];
      const childNodes = this.__childNodes || this.childNodes;
      for (; i2 < childNodes.length; i2++) {
        slotted = childNodes[i2]["s-nr"];
        nonStencilNode = stencilPrivates.every(privateField => !childNodes[i2][privateField]);
        if (slotted) {
          if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {
            clonedNode.__appendChild(slotted.cloneNode(true));
          } else {
            clonedNode.appendChild(slotted.cloneNode(true));
          }
        }
        if (nonStencilNode) {
          clonedNode.appendChild(childNodes[i2].cloneNode(true));
        }
      }
    }
    return clonedNode;
  };
};
var patchSlotAppendChild = HostElementPrototype => {
  HostElementPrototype.__appendChild = HostElementPrototype.appendChild;
  HostElementPrototype.appendChild = function (newChild) {
    const {
      slotName,
      slotNode
    } = findSlotFromSlottedNode(newChild, this);
    if (slotNode) {
      addSlotRelocateNode(newChild, slotNode);
      const slotChildNodes = getSlotChildSiblings(slotNode, slotName);
      const appendAfter = slotChildNodes[slotChildNodes.length - 1];
      const parent = internalCall(appendAfter, "parentNode");
      const insertedNode = internalCall(parent, "insertBefore")(newChild, appendAfter.nextSibling);
      dispatchSlotChangeEvent(slotNode);
      updateFallbackSlotVisibility(this);
      return insertedNode;
    }
    return this.__appendChild(newChild);
  };
};
var patchSlotRemoveChild = ElementPrototype => {
  ElementPrototype.__removeChild = ElementPrototype.removeChild;
  ElementPrototype.removeChild = function (toRemove) {
    if (toRemove && typeof toRemove["s-sn"] !== "undefined") {
      const childNodes = this.__childNodes || this.childNodes;
      const slotNode = getHostSlotNodes(childNodes, this.tagName, toRemove["s-sn"]);
      if (slotNode && toRemove.isConnected) {
        toRemove.remove();
        updateFallbackSlotVisibility(this);
        return;
      }
    }
    return this.__removeChild(toRemove);
  };
};
var patchSlotPrepend = HostElementPrototype => {
  HostElementPrototype.__prepend = HostElementPrototype.prepend;
  HostElementPrototype.prepend = function (...newChildren) {
    newChildren.forEach(newChild => {
      if (typeof newChild === "string") {
        newChild = this.ownerDocument.createTextNode(newChild);
      }
      const slotName = (newChild["s-sn"] = getSlotName(newChild)) || "";
      const childNodes = internalCall(this, "childNodes");
      const slotNode = getHostSlotNodes(childNodes, this.tagName, slotName)[0];
      if (slotNode) {
        addSlotRelocateNode(newChild, slotNode, true);
        const slotChildNodes = getSlotChildSiblings(slotNode, slotName);
        const appendAfter = slotChildNodes[0];
        const parent = internalCall(appendAfter, "parentNode");
        const toReturn = internalCall(parent, "insertBefore")(newChild, internalCall(appendAfter, "nextSibling"));
        dispatchSlotChangeEvent(slotNode);
        return toReturn;
      }
      if (newChild.nodeType === 1 && !!newChild.getAttribute("slot")) {
        newChild.hidden = true;
      }
      return HostElementPrototype.__prepend(newChild);
    });
  };
};
var patchSlotAppend = HostElementPrototype => {
  HostElementPrototype.__append = HostElementPrototype.append;
  HostElementPrototype.append = function (...newChildren) {
    newChildren.forEach(newChild => {
      if (typeof newChild === "string") {
        newChild = this.ownerDocument.createTextNode(newChild);
      }
      this.appendChild(newChild);
    });
  };
};
var patchSlotInsertAdjacentHTML = HostElementPrototype => {
  const originalInsertAdjacentHtml = HostElementPrototype.insertAdjacentHTML;
  HostElementPrototype.insertAdjacentHTML = function (position, text) {
    if (position !== "afterbegin" && position !== "beforeend") {
      return originalInsertAdjacentHtml.call(this, position, text);
    }
    const container = this.ownerDocument.createElement("_");
    let node;
    container.innerHTML = text;
    if (position === "afterbegin") {
      while (node = container.firstChild) {
        this.prepend(node);
      }
    } else if (position === "beforeend") {
      while (node = container.firstChild) {
        this.append(node);
      }
    }
  };
};
var patchSlotInsertAdjacentText = HostElementPrototype => {
  HostElementPrototype.insertAdjacentText = function (position, text) {
    this.insertAdjacentHTML(position, text);
  };
};
var patchInsertBefore = HostElementPrototype => {
  const eleProto = HostElementPrototype;
  if (eleProto.__insertBefore) return;
  eleProto.__insertBefore = HostElementPrototype.insertBefore;
  HostElementPrototype.insertBefore = function (newChild, currentChild) {
    const {
      slotName,
      slotNode
    } = findSlotFromSlottedNode(newChild, this);
    const slottedNodes = this.__childNodes ? this.childNodes : getSlottedChildNodes(this.childNodes);
    if (slotNode) {
      let found = false;
      slottedNodes.forEach(childNode => {
        if (childNode === currentChild || currentChild === null) {
          found = true;
          if (currentChild === null || slotName !== currentChild["s-sn"]) {
            this.appendChild(newChild);
            return;
          }
          if (slotName === currentChild["s-sn"]) {
            addSlotRelocateNode(newChild, slotNode);
            const parent = internalCall(currentChild, "parentNode");
            internalCall(parent, "insertBefore")(newChild, currentChild);
            dispatchSlotChangeEvent(slotNode);
          }
          return;
        }
      });
      if (found) return newChild;
    }
    const parentNode = currentChild == null ? void 0 : currentChild.__parentNode;
    if (parentNode && !this.isSameNode(parentNode)) {
      return this.appendChild(newChild);
    }
    return this.__insertBefore(newChild, currentChild);
  };
};
var patchSlotInsertAdjacentElement = HostElementPrototype => {
  const originalInsertAdjacentElement = HostElementPrototype.insertAdjacentElement;
  HostElementPrototype.insertAdjacentElement = function (position, element) {
    if (position !== "afterbegin" && position !== "beforeend") {
      return originalInsertAdjacentElement.call(this, position, element);
    }
    if (position === "afterbegin") {
      this.prepend(element);
      return element;
    } else if (position === "beforeend") {
      this.append(element);
      return element;
    }
    return element;
  };
};
var patchTextContent = hostElementPrototype => {
  patchHostOriginalAccessor("textContent", hostElementPrototype);
  Object.defineProperty(hostElementPrototype, "textContent", {
    get: function () {
      let text = "";
      const childNodes = this.__childNodes ? this.childNodes : getSlottedChildNodes(this.childNodes);
      childNodes.forEach(node => text += node.textContent || "");
      return text;
    },
    set: function (value) {
      const childNodes = this.__childNodes ? this.childNodes : getSlottedChildNodes(this.childNodes);
      childNodes.forEach(node => {
        if (node["s-ol"]) node["s-ol"].remove();
        node.remove();
      });
      this.insertAdjacentHTML("beforeend", value);
    }
  });
};
var patchChildSlotNodes = elm => {
  class FakeNodeList extends Array {
    item(n) {
      return this[n];
    }
  }
  patchHostOriginalAccessor("children", elm);
  Object.defineProperty(elm, "children", {
    get() {
      return this.childNodes.filter(n => n.nodeType === 1);
    }
  });
  Object.defineProperty(elm, "childElementCount", {
    get() {
      return this.children.length;
    }
  });
  patchHostOriginalAccessor("firstChild", elm);
  Object.defineProperty(elm, "firstChild", {
    get() {
      return this.childNodes[0];
    }
  });
  patchHostOriginalAccessor("lastChild", elm);
  Object.defineProperty(elm, "lastChild", {
    get() {
      return this.childNodes[this.childNodes.length - 1];
    }
  });
  patchHostOriginalAccessor("childNodes", elm);
  Object.defineProperty(elm, "childNodes", {
    get() {
      const result = new FakeNodeList();
      result.push(...getSlottedChildNodes(this.__childNodes));
      return result;
    }
  });
};
var patchSlottedNode = node => {
  if (!node || node.__nextSibling !== void 0 || !globalThis.Node) return;
  patchNextSibling(node);
  patchPreviousSibling(node);
  patchParentNode(node);
  if (node.nodeType === Node.ELEMENT_NODE) {
    patchNextElementSibling(node);
    patchPreviousElementSibling(node);
  }
};
var patchNextSibling = node => {
  if (!node || node.__nextSibling) return;
  patchHostOriginalAccessor("nextSibling", node);
  Object.defineProperty(node, "nextSibling", {
    get: function () {
      var _a;
      const parentNodes = (_a = this["s-ol"]) == null ? void 0 : _a.parentNode.childNodes;
      const index = parentNodes == null ? void 0 : parentNodes.indexOf(this);
      if (parentNodes && index > -1) {
        return parentNodes[index + 1];
      }
      return this.__nextSibling;
    }
  });
};
var patchNextElementSibling = element => {
  if (!element || element.__nextElementSibling) return;
  patchHostOriginalAccessor("nextElementSibling", element);
  Object.defineProperty(element, "nextElementSibling", {
    get: function () {
      var _a;
      const parentEles = (_a = this["s-ol"]) == null ? void 0 : _a.parentNode.children;
      const index = parentEles == null ? void 0 : parentEles.indexOf(this);
      if (parentEles && index > -1) {
        return parentEles[index + 1];
      }
      return this.__nextElementSibling;
    }
  });
};
var patchPreviousSibling = node => {
  if (!node || node.__previousSibling) return;
  patchHostOriginalAccessor("previousSibling", node);
  Object.defineProperty(node, "previousSibling", {
    get: function () {
      var _a;
      const parentNodes = (_a = this["s-ol"]) == null ? void 0 : _a.parentNode.childNodes;
      const index = parentNodes == null ? void 0 : parentNodes.indexOf(this);
      if (parentNodes && index > -1) {
        return parentNodes[index - 1];
      }
      return this.__previousSibling;
    }
  });
};
var patchPreviousElementSibling = element => {
  if (!element || element.__previousElementSibling) return;
  patchHostOriginalAccessor("previousElementSibling", element);
  Object.defineProperty(element, "previousElementSibling", {
    get: function () {
      var _a;
      const parentNodes = (_a = this["s-ol"]) == null ? void 0 : _a.parentNode.children;
      const index = parentNodes == null ? void 0 : parentNodes.indexOf(this);
      if (parentNodes && index > -1) {
        return parentNodes[index - 1];
      }
      return this.__previousElementSibling;
    }
  });
};
var patchParentNode = node => {
  if (!node || node.__parentNode) return;
  patchHostOriginalAccessor("parentNode", node);
  Object.defineProperty(node, "parentNode", {
    get: function () {
      var _a;
      return ((_a = this["s-ol"]) == null ? void 0 : _a.parentNode) || this.__parentNode;
    },
    set: function (value) {
      this.__parentNode = value;
    }
  });
};
var validElementPatches = ["children", "nextElementSibling", "previousElementSibling"];
var validNodesPatches = ["childNodes", "firstChild", "lastChild", "nextSibling", "previousSibling", "textContent", "parentNode"];
function patchHostOriginalAccessor(accessorName, node) {
  let accessor;
  if (validElementPatches.includes(accessorName)) {
    accessor = Object.getOwnPropertyDescriptor(Element.prototype, accessorName);
  } else if (validNodesPatches.includes(accessorName)) {
    accessor = Object.getOwnPropertyDescriptor(Node.prototype, accessorName);
  }
  if (!accessor) {
    accessor = Object.getOwnPropertyDescriptor(node, accessorName);
  }
  if (accessor) Object.defineProperty(node, "__" + accessorName, accessor);
}
function internalCall(node, method) {
  if ("__" + method in node) {
    const toReturn = node["__" + method];
    if (typeof toReturn !== "function") return toReturn;
    return toReturn.bind(node);
  } else {
    if (typeof node[method] !== "function") return node[method];
    return node[method].bind(node);
  }
}
var i = 0;
var createTime = (fnName, tagName = "") => {
  if (BUILD.profile && performance.mark) {
    const key = `st:${fnName}:${tagName}:${i++}`;
    performance.mark(key);
    return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);
  } else {
    return () => {
      return;
    };
  }
};
var uniqueTime = (key, measureText) => {
  if (BUILD.profile && performance.mark) {
    if (performance.getEntriesByName(key, "mark").length === 0) {
      performance.mark(key);
    }
    return () => {
      if (performance.getEntriesByName(measureText, "measure").length === 0) {
        performance.measure(measureText, key);
      }
    };
  } else {
    return () => {
      return;
    };
  }
};
var inspect = ref => {
  const hostRef = getHostRef(ref);
  if (!hostRef) {
    return void 0;
  }
  const flags = hostRef.$flags$;
  const hostElement = hostRef.$hostElement$;
  return {
    renderCount: hostRef.$renderCount$,
    flags: {
      hasRendered: !!(flags & 2),
      hasConnected: !!(flags & 1),
      isWaitingForChildren: !!(flags & 4),
      isConstructingInstance: !!(flags & 8),
      isQueuedForUpdate: !!(flags & 16),
      hasInitializedComponent: !!(flags & 32),
      hasLoadedComponent: !!(flags & 64),
      isWatchReady: !!(flags & 128),
      isListenReady: !!(flags & 256),
      needsRerender: !!(flags & 512)
    },
    instanceValues: hostRef.$instanceValues$,
    ancestorComponent: hostRef.$ancestorComponent$,
    hostElement,
    lazyInstance: hostRef.$lazyInstance$,
    vnode: hostRef.$vnode$,
    modeName: hostRef.$modeName$,
    onReadyPromise: hostRef.$onReadyPromise$,
    onReadyResolve: hostRef.$onReadyResolve$,
    onInstancePromise: hostRef.$onInstancePromise$,
    onInstanceResolve: hostRef.$onInstanceResolve$,
    onRenderResolve: hostRef.$onRenderResolve$,
    queuedListeners: hostRef.$queuedListeners$,
    rmListeners: hostRef.$rmListeners$,
    ["s-id"]: hostElement["s-id"],
    ["s-cr"]: hostElement["s-cr"],
    ["s-lr"]: hostElement["s-lr"],
    ["s-p"]: hostElement["s-p"],
    ["s-rc"]: hostElement["s-rc"],
    ["s-sc"]: hostElement["s-sc"]
  };
};
var installDevTools = () => {
  if (BUILD.devTools) {
    const stencil = win.stencil = win.stencil || {};
    const originalInspect = stencil.inspect;
    stencil.inspect = ref => {
      let result = inspect(ref);
      if (!result && typeof originalInspect === "function") {
        result = originalInspect(ref);
      }
      return result;
    };
  }
};
var h = (nodeName, vnodeData, ...children) => {
  let child = null;
  let key = null;
  let slotName = null;
  let simple = false;
  let lastSimple = false;
  const vNodeChildren = [];
  const walk = c => {
    for (let i2 = 0; i2 < c.length; i2++) {
      child = c[i2];
      if (Array.isArray(child)) {
        walk(child);
      } else if (child != null && typeof child !== "boolean") {
        if (simple = typeof nodeName !== "function" && !isComplexType(child)) {
          child = String(child);
        } else if (BUILD.isDev && typeof nodeName !== "function" && child.$flags$ === void 0) {
          consoleDevError(`vNode passed as children has unexpected type.
Make sure it's using the correct h() function.
Empty objects can also be the cause, look for JSX comments that became objects.`);
        }
        if (simple && lastSimple) {
          vNodeChildren[vNodeChildren.length - 1].$text$ += child;
        } else {
          vNodeChildren.push(simple ? newVNode(null, child) : child);
        }
        lastSimple = simple;
      }
    }
  };
  walk(children);
  if (vnodeData) {
    if (BUILD.isDev && nodeName === "input") {
      validateInputProperties(vnodeData);
    }
    if (BUILD.vdomKey && vnodeData.key) {
      key = vnodeData.key;
    }
    if (BUILD.slotRelocation && vnodeData.name) {
      slotName = vnodeData.name;
    }
    if (BUILD.vdomClass) {
      const classData = vnodeData.className || vnodeData.class;
      if (classData) {
        vnodeData.class = typeof classData !== "object" ? classData : Object.keys(classData).filter(k => classData[k]).join(" ");
      }
    }
  }
  if (BUILD.isDev && vNodeChildren.some(isHost)) {
    consoleDevError(`The <Host> must be the single root component. Make sure:
- You are NOT using hostData() and <Host> in the same component.
- <Host> is used once, and it's the single root component of the render() function.`);
  }
  if (BUILD.vdomFunctional && typeof nodeName === "function") {
    return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);
  }
  const vnode = newVNode(nodeName, null);
  vnode.$attrs$ = vnodeData;
  if (vNodeChildren.length > 0) {
    vnode.$children$ = vNodeChildren;
  }
  if (BUILD.vdomKey) {
    vnode.$key$ = key;
  }
  if (BUILD.slotRelocation) {
    vnode.$name$ = slotName;
  }
  return vnode;
};
var newVNode = (tag, text) => {
  const vnode = {
    $flags$: 0,
    $tag$: tag,
    $text$: text,
    $elm$: null,
    $children$: null
  };
  if (BUILD.vdomAttribute) {
    vnode.$attrs$ = null;
  }
  if (BUILD.vdomKey) {
    vnode.$key$ = null;
  }
  if (BUILD.slotRelocation) {
    vnode.$name$ = null;
  }
  return vnode;
};
var Host = {};
var isHost = node => node && node.$tag$ === Host;
var vdomFnUtils = {
  forEach: (children, cb) => children.map(convertToPublic).forEach(cb),
  map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate)
};
var convertToPublic = node => ({
  vattrs: node.$attrs$,
  vchildren: node.$children$,
  vkey: node.$key$,
  vname: node.$name$,
  vtag: node.$tag$,
  vtext: node.$text$
});
var convertToPrivate = node => {
  if (typeof node.vtag === "function") {
    const vnodeData = {
      ...node.vattrs
    };
    if (node.vkey) {
      vnodeData.key = node.vkey;
    }
    if (node.vname) {
      vnodeData.name = node.vname;
    }
    return h(node.vtag, vnodeData, ...(node.vchildren || []));
  }
  const vnode = newVNode(node.vtag, node.vtext);
  vnode.$attrs$ = node.vattrs;
  vnode.$children$ = node.vchildren;
  vnode.$key$ = node.vkey;
  vnode.$name$ = node.vname;
  return vnode;
};
var validateInputProperties = inputElm => {
  const props = Object.keys(inputElm);
  const value = props.indexOf("value");
  if (value === -1) {
    return;
  }
  const typeIndex = props.indexOf("type");
  const minIndex = props.indexOf("min");
  const maxIndex = props.indexOf("max");
  const stepIndex = props.indexOf("step");
  if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {
    consoleDevWarn(`The "value" prop of <input> should be set after "min", "max", "type" and "step"`);
  }
};
var initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {
  const endHydrate = createTime("hydrateClient", tagName);
  const shadowRoot = hostElm.shadowRoot;
  const childRenderNodes = [];
  const slotNodes = [];
  const slottedNodes = [];
  const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;
  const vnode = newVNode(tagName, null);
  vnode.$elm$ = hostElm;
  let scopeId2;
  if (BUILD.scoped) {
    const cmpMeta = hostRef.$cmpMeta$;
    if (cmpMeta && cmpMeta.$flags$ & 10 && hostElm["s-sc"]) {
      scopeId2 = hostElm["s-sc"];
      hostElm.classList.add(scopeId2 + "-h");
    } else if (hostElm["s-sc"]) {
      delete hostElm["s-sc"];
    }
  }
  if (win.document && (!plt.$orgLocNodes$ || !plt.$orgLocNodes$.size)) {
    initializeDocumentHydrate(win.document.body, plt.$orgLocNodes$ = new Map());
  }
  hostElm[HYDRATE_ID] = hostId;
  hostElm.removeAttribute(HYDRATE_ID);
  hostRef.$vnode$ = clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId, slottedNodes);
  let crIndex = 0;
  const crLength = childRenderNodes.length;
  let childRenderNode;
  for (crIndex; crIndex < crLength; crIndex++) {
    childRenderNode = childRenderNodes[crIndex];
    const orgLocationId = childRenderNode.$hostId$ + "." + childRenderNode.$nodeId$;
    const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);
    const node = childRenderNode.$elm$;
    if (!shadowRoot) {
      node["s-hn"] = tagName.toUpperCase();
      if (childRenderNode.$tag$ === "slot") {
        node["s-cr"] = hostElm["s-cr"];
      }
    }
    if (childRenderNode.$tag$ === "slot") {
      childRenderNode.$name$ = childRenderNode.$elm$["s-sn"] || childRenderNode.$elm$["name"] || null;
      if (childRenderNode.$children$) {
        childRenderNode.$flags$ |= 2;
        if (!childRenderNode.$elm$.childNodes.length) {
          childRenderNode.$children$.forEach(c => {
            childRenderNode.$elm$.appendChild(c.$elm$);
          });
        }
      } else {
        childRenderNode.$flags$ |= 1;
      }
    }
    if (orgLocationNode && orgLocationNode.isConnected) {
      if (shadowRoot && orgLocationNode["s-en"] === "") {
        orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);
      }
      orgLocationNode.parentNode.removeChild(orgLocationNode);
      if (!shadowRoot) {
        node["s-oo"] = parseInt(childRenderNode.$nodeId$);
      }
    }
    plt.$orgLocNodes$.delete(orgLocationId);
  }
  const hosts = [];
  const snLen = slottedNodes.length;
  let snIndex = 0;
  let slotGroup;
  let snGroupIdx;
  let snGroupLen;
  let slottedItem;
  for (snIndex; snIndex < snLen; snIndex++) {
    slotGroup = slottedNodes[snIndex];
    if (!slotGroup || !slotGroup.length) continue;
    snGroupLen = slotGroup.length;
    snGroupIdx = 0;
    for (snGroupIdx; snGroupIdx < snGroupLen; snGroupIdx++) {
      slottedItem = slotGroup[snGroupIdx];
      if (!hosts[slottedItem.hostId]) {
        hosts[slottedItem.hostId] = plt.$orgLocNodes$.get(slottedItem.hostId);
      }
      if (!hosts[slottedItem.hostId]) continue;
      const hostEle = hosts[slottedItem.hostId];
      if (!hostEle.shadowRoot || !shadowRoot) {
        slottedItem.slot["s-cr"] = hostEle["s-cr"];
        if (!slottedItem.slot["s-cr"] && hostEle.shadowRoot) {
          slottedItem.slot["s-cr"] = hostEle;
        } else {
          slottedItem.slot["s-cr"] = (hostEle.__childNodes || hostEle.childNodes)[0];
        }
        addSlotRelocateNode(slottedItem.node, slottedItem.slot, false, slottedItem.node["s-oo"]);
        if (BUILD.experimentalSlotFixes) {
          patchSlottedNode(slottedItem.node);
        }
      }
      if (hostEle.shadowRoot && slottedItem.node.parentElement !== hostEle) {
        hostEle.appendChild(slottedItem.node);
      }
    }
  }
  if (BUILD.scoped && scopeId2 && slotNodes.length) {
    slotNodes.forEach(slot => {
      slot.$elm$.parentElement.classList.add(scopeId2 + "-s");
    });
  }
  if (BUILD.shadowDom && shadowRoot && !shadowRoot.childNodes.length) {
    let rnIdex = 0;
    const rnLen = shadowRootNodes.length;
    if (rnLen) {
      for (rnIdex; rnIdex < rnLen; rnIdex++) {
        shadowRoot.appendChild(shadowRootNodes[rnIdex]);
      }
      Array.from(hostElm.childNodes).forEach(node => {
        if (typeof node["s-sn"] !== "string") {
          if (node.nodeType === 1 && node.slot && node.hidden) {
            node.removeAttribute("hidden");
          } else if (node.nodeType === 8 || node.nodeType === 3 && !node.wholeText.trim()) {
            node.parentNode.removeChild(node);
          }
        }
      });
    }
  }
  plt.$orgLocNodes$.delete(hostElm["s-id"]);
  hostRef.$hostElement$ = hostElm;
  endHydrate();
};
var clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId, slottedNodes = []) => {
  let childNodeType;
  let childIdSplt;
  let childVNode;
  let i2;
  const scopeId2 = hostElm["s-sc"];
  if (node.nodeType === 1) {
    childNodeType = node.getAttribute(HYDRATE_CHILD_ID);
    if (childNodeType) {
      childIdSplt = childNodeType.split(".");
      if (childIdSplt[0] === hostId || childIdSplt[0] === "0") {
        childVNode = createSimpleVNode({
          $flags$: 0,
          $hostId$: childIdSplt[0],
          $nodeId$: childIdSplt[1],
          $depth$: childIdSplt[2],
          $index$: childIdSplt[3],
          $tag$: node.tagName.toLowerCase(),
          $elm$: node,
          $attrs$: {
            class: node.className || ""
          }
        });
        childRenderNodes.push(childVNode);
        node.removeAttribute(HYDRATE_CHILD_ID);
        if (!parentVNode.$children$) {
          parentVNode.$children$ = [];
        }
        if (BUILD.scoped && scopeId2) {
          node["s-si"] = scopeId2;
          childVNode.$attrs$.class += " " + scopeId2;
        }
        const slotName = childVNode.$elm$.getAttribute("s-sn");
        if (typeof slotName === "string") {
          if (childVNode.$tag$ === "slot-fb") {
            addSlot(slotName, childIdSplt[2], childVNode, node, parentVNode, childRenderNodes, slotNodes, shadowRootNodes, slottedNodes);
            if (BUILD.scoped && scopeId2) {
              node.classList.add(scopeId2);
            }
          }
          childVNode.$elm$["s-sn"] = slotName;
          childVNode.$elm$.removeAttribute("s-sn");
        }
        if (childVNode.$index$ !== void 0) {
          parentVNode.$children$[childVNode.$index$] = childVNode;
        }
        parentVNode = childVNode;
        if (shadowRootNodes && childVNode.$depth$ === "0") {
          shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
        }
      }
    }
    if (node.shadowRoot) {
      for (i2 = node.shadowRoot.childNodes.length - 1; i2 >= 0; i2--) {
        clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i2], hostId, slottedNodes);
      }
    }
    const nonShadowNodes = node.__childNodes || node.childNodes;
    for (i2 = nonShadowNodes.length - 1; i2 >= 0; i2--) {
      clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, nonShadowNodes[i2], hostId, slottedNodes);
    }
  } else if (node.nodeType === 8) {
    childIdSplt = node.nodeValue.split(".");
    if (childIdSplt[1] === hostId || childIdSplt[1] === "0") {
      childNodeType = childIdSplt[0];
      childVNode = createSimpleVNode({
        $hostId$: childIdSplt[1],
        $nodeId$: childIdSplt[2],
        $depth$: childIdSplt[3],
        $index$: childIdSplt[4] || "0",
        $elm$: node,
        $attrs$: null,
        $children$: null,
        $key$: null,
        $name$: null,
        $tag$: null,
        $text$: null
      });
      if (childNodeType === TEXT_NODE_ID) {
        childVNode.$elm$ = findCorrespondingNode(node, 3);
        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3) {
          childVNode.$text$ = childVNode.$elm$.textContent;
          childRenderNodes.push(childVNode);
          node.remove();
          if (hostId === childVNode.$hostId$) {
            if (!parentVNode.$children$) {
              parentVNode.$children$ = [];
            }
            parentVNode.$children$[childVNode.$index$] = childVNode;
          }
          if (shadowRootNodes && childVNode.$depth$ === "0") {
            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
          }
        }
      } else if (childNodeType === COMMENT_NODE_ID) {
        childVNode.$elm$ = findCorrespondingNode(node, 8);
        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 8) {
          childRenderNodes.push(childVNode);
          node.remove();
        }
      } else if (childVNode.$hostId$ === hostId) {
        if (childNodeType === SLOT_NODE_ID) {
          const slotName = node["s-sn"] = childIdSplt[5] || "";
          addSlot(slotName, childIdSplt[2], childVNode, node, parentVNode, childRenderNodes, slotNodes, shadowRootNodes, slottedNodes);
        } else if (childNodeType === CONTENT_REF_ID) {
          if (BUILD.shadowDom && shadowRootNodes) {
            node.remove();
          } else if (BUILD.slotRelocation) {
            hostElm["s-cr"] = node;
            node["s-cn"] = true;
          }
        }
      }
    }
  } else if (parentVNode && parentVNode.$tag$ === "style") {
    const vnode = newVNode(null, node.textContent);
    vnode.$elm$ = node;
    vnode.$index$ = "0";
    parentVNode.$children$ = [vnode];
  } else {
    if (node.nodeType === 3 && !node.wholeText.trim()) {
      node.remove();
    }
  }
  return parentVNode;
};
var initializeDocumentHydrate = (node, orgLocNodes) => {
  if (node.nodeType === 1) {
    const componentId = node[HYDRATE_ID] || node.getAttribute(HYDRATE_ID);
    if (componentId) {
      orgLocNodes.set(componentId, node);
    }
    let i2 = 0;
    if (node.shadowRoot) {
      for (; i2 < node.shadowRoot.childNodes.length; i2++) {
        initializeDocumentHydrate(node.shadowRoot.childNodes[i2], orgLocNodes);
      }
    }
    const nonShadowNodes = node.__childNodes || node.childNodes;
    for (i2 = 0; i2 < nonShadowNodes.length; i2++) {
      initializeDocumentHydrate(nonShadowNodes[i2], orgLocNodes);
    }
  } else if (node.nodeType === 8) {
    const childIdSplt = node.nodeValue.split(".");
    if (childIdSplt[0] === ORG_LOCATION_ID) {
      orgLocNodes.set(childIdSplt[1] + "." + childIdSplt[2], node);
      node.nodeValue = "";
      node["s-en"] = childIdSplt[3];
    }
  }
};
var createSimpleVNode = vnode => {
  const defaultVNode = {
    $flags$: 0,
    $hostId$: null,
    $nodeId$: null,
    $depth$: null,
    $index$: "0",
    $elm$: null,
    $attrs$: null,
    $children$: null,
    $key$: null,
    $name$: null,
    $tag$: null,
    $text$: null
  };
  return {
    ...defaultVNode,
    ...vnode
  };
};
function addSlot(slotName, slotId, childVNode, node, parentVNode, childRenderNodes, slotNodes, shadowRootNodes, slottedNodes) {
  node["s-sr"] = true;
  childVNode.$name$ = slotName || null;
  childVNode.$tag$ = "slot";
  const parentNodeId = (parentVNode == null ? void 0 : parentVNode.$elm$) ? parentVNode.$elm$["s-id"] || parentVNode.$elm$.getAttribute("s-id") : "";
  if (BUILD.shadowDom && shadowRootNodes && win.document) {
    const slot = childVNode.$elm$ = win.document.createElement(childVNode.$tag$);
    if (childVNode.$name$) {
      childVNode.$elm$.setAttribute("name", slotName);
    }
    if (parentNodeId && parentNodeId !== childVNode.$hostId$) {
      parentVNode.$elm$.insertBefore(slot, parentVNode.$elm$.children[0]);
    } else {
      node.parentNode.insertBefore(childVNode.$elm$, node);
    }
    addSlottedNodes(slottedNodes, slotId, slotName, node, childVNode.$hostId$);
    node.remove();
    if (childVNode.$depth$ === "0") {
      shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
    }
  } else {
    const slot = childVNode.$elm$;
    const shouldMove = parentNodeId && parentNodeId !== childVNode.$hostId$ && parentVNode.$elm$.shadowRoot;
    addSlottedNodes(slottedNodes, slotId, slotName, node, shouldMove ? parentNodeId : childVNode.$hostId$);
    patchSlotNode(node);
    if (shouldMove) {
      parentVNode.$elm$.insertBefore(slot, parentVNode.$elm$.children[0]);
    }
    childRenderNodes.push(childVNode);
  }
  slotNodes.push(childVNode);
  if (!parentVNode.$children$) {
    parentVNode.$children$ = [];
  }
  parentVNode.$children$[childVNode.$index$] = childVNode;
}
var addSlottedNodes = (slottedNodes, slotNodeId, slotName, slotNode, hostId) => {
  let slottedNode = slotNode.nextSibling;
  slottedNodes[slotNodeId] = slottedNodes[slotNodeId] || [];
  while (slottedNode && ((slottedNode["getAttribute"] && slottedNode.getAttribute("slot") || slottedNode["s-sn"]) === slotName || slotName === "" && !slottedNode["s-sn"] && (slottedNode.nodeType === 8 && slottedNode.nodeValue.indexOf(".") !== 1 || slottedNode.nodeType === 3))) {
    slottedNode["s-sn"] = slotName;
    slottedNodes[slotNodeId].push({
      slot: slotNode,
      node: slottedNode,
      hostId
    });
    slottedNode = slottedNode.nextSibling;
  }
};
var findCorrespondingNode = (node, type) => {
  let sibling = node;
  do {
    sibling = sibling.nextSibling;
  } while (sibling && (sibling.nodeType !== type || !sibling.nodeValue));
  return sibling;
};
var safeSelector = selector => {
  const placeholders = [];
  let index = 0;
  selector = selector.replace(/(\[[^\]]*\])/g, (_, keep) => {
    const replaceBy = `__ph-${index}__`;
    placeholders.push(keep);
    index++;
    return replaceBy;
  });
  const content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, (_, pseudo, exp) => {
    const replaceBy = `__ph-${index}__`;
    placeholders.push(exp);
    index++;
    return pseudo + replaceBy;
  });
  const ss = {
    content,
    placeholders
  };
  return ss;
};
var restoreSafeSelector = (placeholders, content) => {
  return content.replace(/__ph-(\d+)__/g, (_, index) => placeholders[+index]);
};
var _polyfillHost = "-shadowcsshost";
var _polyfillSlotted = "-shadowcssslotted";
var _polyfillHostContext = "-shadowcsscontext";
var _parenSuffix = ")(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))?([^,{]*)";
var _cssColonHostRe = new RegExp("(" + _polyfillHost + _parenSuffix, "gim");
var _cssColonHostContextRe = new RegExp("(" + _polyfillHostContext + _parenSuffix, "gim");
var _cssColonSlottedRe = new RegExp("(" + _polyfillSlotted + _parenSuffix, "gim");
var _polyfillHostNoCombinator = _polyfillHost + "-no-combinator";
var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
var _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];
var _selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$";
var _polyfillHostRe = /-shadowcsshost/gim;
var createSupportsRuleRe = selector => new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${selector}\\b)`, "gim");
var _colonSlottedRe = createSupportsRuleRe("::slotted");
var _colonHostRe = createSupportsRuleRe(":host");
var _colonHostContextRe = createSupportsRuleRe(":host-context");
var _commentRe = /\/\*\s*[\s\S]*?\*\//g;
var stripComments = input => {
  return input.replace(_commentRe, "");
};
var _commentWithHashRe = /\/\*\s*#\s*source(Mapping)?URL=[\s\S]+?\*\//g;
var extractCommentsWithHash = input => {
  return input.match(_commentWithHashRe) || [];
};
var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
var _curlyRe = /([{}])/g;
var _selectorPartsRe = /(^.*?[^\\])??((:+)(.*)|$)/;
var OPEN_CURLY = "{";
var CLOSE_CURLY = "}";
var BLOCK_PLACEHOLDER = "%BLOCK%";
var processRules = (input, ruleCallback) => {
  const inputWithEscapedBlocks = escapeBlocks(input);
  let nextBlockIndex = 0;
  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {
    const selector = m[2];
    let content = "";
    let suffix = m[4];
    let contentPrefix = "";
    if (suffix && suffix.startsWith("{" + BLOCK_PLACEHOLDER)) {
      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
      contentPrefix = "{";
    }
    const cssRule = {
      selector,
      content
    };
    const rule = ruleCallback(cssRule);
    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;
  });
};
var escapeBlocks = input => {
  const inputParts = input.split(_curlyRe);
  const resultParts = [];
  const escapedBlocks = [];
  let bracketCount = 0;
  let currentBlockParts = [];
  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {
    const part = inputParts[partIndex];
    if (part === CLOSE_CURLY) {
      bracketCount--;
    }
    if (bracketCount > 0) {
      currentBlockParts.push(part);
    } else {
      if (currentBlockParts.length > 0) {
        escapedBlocks.push(currentBlockParts.join(""));
        resultParts.push(BLOCK_PLACEHOLDER);
        currentBlockParts = [];
      }
      resultParts.push(part);
    }
    if (part === OPEN_CURLY) {
      bracketCount++;
    }
  }
  if (currentBlockParts.length > 0) {
    escapedBlocks.push(currentBlockParts.join(""));
    resultParts.push(BLOCK_PLACEHOLDER);
  }
  const strEscapedBlocks = {
    escapedString: resultParts.join(""),
    blocks: escapedBlocks
  };
  return strEscapedBlocks;
};
var insertPolyfillHostInCssText = cssText => {
  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);
  return cssText;
};
var convertColonRule = (cssText, regExp, partReplacer) => {
  return cssText.replace(regExp, (...m) => {
    if (m[2]) {
      const parts = m[2].split(",");
      const r = [];
      for (let i2 = 0; i2 < parts.length; i2++) {
        const p = parts[i2].trim();
        if (!p) break;
        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
      }
      return r.join(",");
    } else {
      return _polyfillHostNoCombinator + m[3];
    }
  });
};
var colonHostPartReplacer = (host, part, suffix) => {
  return host + part.replace(_polyfillHost, "") + suffix;
};
var convertColonHost = cssText => {
  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);
};
var colonHostContextPartReplacer = (host, part, suffix) => {
  if (part.indexOf(_polyfillHost) > -1) {
    return colonHostPartReplacer(host, part, suffix);
  } else {
    return host + part + suffix + ", " + part + " " + host + suffix;
  }
};
var convertColonSlotted = (cssText, slotScopeId) => {
  const slotClass = "." + slotScopeId + " > ";
  const selectors = [];
  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {
    if (m[2]) {
      const compound = m[2].trim();
      const suffix = m[3];
      const slottedSelector = slotClass + compound + suffix;
      let prefixSelector = "";
      for (let i2 = m[4] - 1; i2 >= 0; i2--) {
        const char = m[5][i2];
        if (char === "}" || char === ",") {
          break;
        }
        prefixSelector = char + prefixSelector;
      }
      const orgSelector = (prefixSelector + slottedSelector).trim();
      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();
      if (orgSelector !== addedSelector) {
        const updatedSelector = `${addedSelector}, ${orgSelector}`;
        selectors.push({
          orgSelector,
          updatedSelector
        });
      }
      return slottedSelector;
    } else {
      return _polyfillHostNoCombinator + m[3];
    }
  });
  return {
    selectors,
    cssText
  };
};
var convertColonHostContext = cssText => {
  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);
};
var convertShadowDOMSelectors = cssText => {
  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, " "), cssText);
};
var makeScopeMatcher = scopeSelector2 => {
  const lre = /\[/g;
  const rre = /\]/g;
  scopeSelector2 = scopeSelector2.replace(lre, "\\[").replace(rre, "\\]");
  return new RegExp("^(" + scopeSelector2 + ")" + _selectorReSuffix, "m");
};
var selectorNeedsScoping = (selector, scopeSelector2) => {
  const re = makeScopeMatcher(scopeSelector2);
  return !re.test(selector);
};
var injectScopingSelector = (selector, scopingSelector) => {
  return selector.replace(_selectorPartsRe, (_, before = "", _colonGroup, colon = "", after = "") => {
    return before + scopingSelector + colon + after;
  });
};
var applySimpleSelectorScope = (selector, scopeSelector2, hostSelector) => {
  _polyfillHostRe.lastIndex = 0;
  if (_polyfillHostRe.test(selector)) {
    const replaceBy = `.${hostSelector}`;
    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector2) => injectScopingSelector(selector2, replaceBy)).replace(_polyfillHostRe, replaceBy + " ");
  }
  return scopeSelector2 + " " + selector;
};
var applyStrictSelectorScope = (selector, scopeSelector2, hostSelector) => {
  const isRe = /\[is=([^\]]*)\]/g;
  scopeSelector2 = scopeSelector2.replace(isRe, (_, ...parts) => parts[0]);
  const className = "." + scopeSelector2;
  const _scopeSelectorPart = p => {
    let scopedP = p.trim();
    if (!scopedP) {
      return "";
    }
    if (p.indexOf(_polyfillHostNoCombinator) > -1) {
      scopedP = applySimpleSelectorScope(p, scopeSelector2, hostSelector);
    } else {
      const t = p.replace(_polyfillHostRe, "");
      if (t.length > 0) {
        scopedP = injectScopingSelector(t, className);
      }
    }
    return scopedP;
  };
  const safeContent = safeSelector(selector);
  selector = safeContent.content;
  let scopedSelector = "";
  let startIndex = 0;
  let res;
  const sep = /( |>|\+|~(?!=))\s*/g;
  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;
  let shouldScope = !hasHost;
  while ((res = sep.exec(selector)) !== null) {
    const separator = res[1];
    const part2 = selector.slice(startIndex, res.index).trim();
    shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;
    const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;
    scopedSelector += `${scopedPart} ${separator} `;
    startIndex = sep.lastIndex;
  }
  const part = selector.substring(startIndex);
  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;
  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;
  return restoreSafeSelector(safeContent.placeholders, scopedSelector);
};
var scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {
  return selector.split(",").map(shallowPart => {
    if (slotSelector && shallowPart.indexOf("." + slotSelector) > -1) {
      return shallowPart.trim();
    }
    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {
      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();
    } else {
      return shallowPart.trim();
    }
  }).join(", ");
};
var scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {
  return processRules(cssText, rule => {
    let selector = rule.selector;
    let content = rule.content;
    if (rule.selector[0] !== "@") {
      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);
    } else if (rule.selector.startsWith("@media") || rule.selector.startsWith("@supports") || rule.selector.startsWith("@page") || rule.selector.startsWith("@document")) {
      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector);
    }
    const cssRule = {
      selector: selector.replace(/\s{2,}/g, " ").trim(),
      content
    };
    return cssRule;
  });
};
var scopeCssText = (cssText, scopeId2, hostScopeId, slotScopeId, commentOriginalSelector) => {
  cssText = insertPolyfillHostInCssText(cssText);
  cssText = convertColonHost(cssText);
  cssText = convertColonHostContext(cssText);
  const slotted = convertColonSlotted(cssText, slotScopeId);
  cssText = slotted.cssText;
  cssText = convertShadowDOMSelectors(cssText);
  if (scopeId2) {
    cssText = scopeSelectors(cssText, scopeId2, hostScopeId, slotScopeId, commentOriginalSelector);
  }
  cssText = replaceShadowCssHost(cssText, hostScopeId);
  cssText = cssText.replace(/>\s*\*\s+([^{, ]+)/gm, " $1 ");
  return {
    cssText: cssText.trim(),
    slottedSelectors: slotted.selectors.map(ref => ({
      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),
      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)
    }))
  };
};
var replaceShadowCssHost = (cssText, hostScopeId) => {
  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);
};
var scopeCss = (cssText, scopeId2, commentOriginalSelector) => {
  const hostScopeId = scopeId2 + "-h";
  const slotScopeId = scopeId2 + "-s";
  const commentsWithHash = extractCommentsWithHash(cssText);
  cssText = stripComments(cssText);
  const orgSelectors = [];
  if (commentOriginalSelector) {
    const processCommentedSelector = rule => {
      const placeholder = `/*!@___${orgSelectors.length}___*/`;
      const comment = `/*!@${rule.selector}*/`;
      orgSelectors.push({
        placeholder,
        comment
      });
      rule.selector = placeholder + rule.selector;
      return rule;
    };
    cssText = processRules(cssText, rule => {
      if (rule.selector[0] !== "@") {
        return processCommentedSelector(rule);
      } else if (rule.selector.startsWith("@media") || rule.selector.startsWith("@supports") || rule.selector.startsWith("@page") || rule.selector.startsWith("@document")) {
        rule.content = processRules(rule.content, processCommentedSelector);
        return rule;
      }
      return rule;
    });
  }
  const scoped = scopeCssText(cssText, scopeId2, hostScopeId, slotScopeId, commentOriginalSelector);
  cssText = [scoped.cssText, ...commentsWithHash].join("\n");
  if (commentOriginalSelector) {
    orgSelectors.forEach(({
      placeholder,
      comment
    }) => {
      cssText = cssText.replace(placeholder, comment);
    });
  }
  scoped.slottedSelectors.forEach(slottedSelector => {
    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), "g");
    cssText = cssText.replace(regex, slottedSelector.updatedSelector);
  });
  return cssText;
};
var computeMode = elm => modeResolutionChain.map(h2 => h2(elm)).find(m => !!m);
var setMode = handler => modeResolutionChain.push(handler);
var getMode = ref => getHostRef(ref).$modeName$;
var parsePropertyValue = (propValue, propType) => {
  if (propValue != null && !isComplexType(propValue)) {
    if (BUILD.propBoolean && propType & 4) {
      return propValue === "false" ? false : propValue === "" || !!propValue;
    }
    if (BUILD.propNumber && propType & 2) {
      return parseFloat(propValue);
    }
    if (BUILD.propString && propType & 1) {
      return String(propValue);
    }
    return propValue;
  }
  return propValue;
};
var getElement = ref => BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref;
var createEvent = (ref, name, flags) => {
  const elm = getElement(ref);
  return {
    emit: detail => {
      if (BUILD.isDev && !elm.isConnected) {
        consoleDevWarn(`The "${name}" event was emitted, but the dispatcher node is no longer connected to the dom.`);
      }
      return emitEvent(elm, name, {
        bubbles: !!(flags & 4),
        composed: !!(flags & 2),
        cancelable: !!(flags & 1),
        detail
      });
    }
  };
};
var emitEvent = (elm, name, opts) => {
  const ev = plt.ce(name, opts);
  elm.dispatchEvent(ev);
  return ev;
};
var rootAppliedStyles = new WeakMap();
var registerStyle = (scopeId2, cssText, allowCS) => {
  let style = styles.get(scopeId2);
  if (supportsConstructableStylesheets && allowCS) {
    style = style || new CSSStyleSheet();
    if (typeof style === "string") {
      style = cssText;
    } else {
      style.replaceSync(cssText);
    }
  } else {
    style = cssText;
  }
  styles.set(scopeId2, style);
};
var addStyle = (styleContainerNode, cmpMeta, mode) => {
  var _a;
  const scopeId2 = getScopeId(cmpMeta, mode);
  const style = styles.get(scopeId2);
  if (!BUILD.attachStyles || !win.document) {
    return scopeId2;
  }
  styleContainerNode = styleContainerNode.nodeType === 11 ? styleContainerNode : win.document;
  if (style) {
    if (typeof style === "string") {
      styleContainerNode = styleContainerNode.head || styleContainerNode;
      let appliedStyles = rootAppliedStyles.get(styleContainerNode);
      let styleElm;
      if (!appliedStyles) {
        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());
      }
      if (!appliedStyles.has(scopeId2)) {
        if (BUILD.hydrateClientSide && styleContainerNode.host && (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}="${scopeId2}"]`))) {
          styleElm.innerHTML = style;
        } else {
          styleElm = document.querySelector(`[${HYDRATED_STYLE_ID}="${scopeId2}"]`) || win.document.createElement("style");
          styleElm.innerHTML = style;
          const nonce = (_a = plt.$nonce$) != null ? _a : queryNonceMetaTagContent(win.document);
          if (nonce != null) {
            styleElm.setAttribute("nonce", nonce);
          }
          if ((BUILD.hydrateServerSide || BUILD.hotModuleReplacement) && (cmpMeta.$flags$ & 2 || cmpMeta.$flags$ & 128)) {
            styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId2);
          }
          if (!(cmpMeta.$flags$ & 1)) {
            if (styleContainerNode.nodeName === "HEAD") {
              const preconnectLinks = styleContainerNode.querySelectorAll("link[rel=preconnect]");
              const referenceNode2 = preconnectLinks.length > 0 ? preconnectLinks[preconnectLinks.length - 1].nextSibling : styleContainerNode.querySelector("style");
              styleContainerNode.insertBefore(styleElm, (referenceNode2 == null ? void 0 : referenceNode2.parentNode) === styleContainerNode ? referenceNode2 : null);
            } else if ("host" in styleContainerNode) {
              if (supportsConstructableStylesheets) {
                const stylesheet = new CSSStyleSheet();
                stylesheet.replaceSync(style);
                styleContainerNode.adoptedStyleSheets = [stylesheet, ...styleContainerNode.adoptedStyleSheets];
              } else {
                const existingStyleContainer = styleContainerNode.querySelector("style");
                if (existingStyleContainer) {
                  existingStyleContainer.innerHTML = style + existingStyleContainer.innerHTML;
                } else {
                  styleContainerNode.prepend(styleElm);
                }
              }
            } else {
              styleContainerNode.append(styleElm);
            }
          }
          if (cmpMeta.$flags$ & 1) {
            styleContainerNode.insertBefore(styleElm, null);
          }
        }
        if (cmpMeta.$flags$ & 4) {
          styleElm.innerHTML += SLOT_FB_CSS;
        }
        if (appliedStyles) {
          appliedStyles.add(scopeId2);
        }
      }
    } else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {
      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];
    }
  }
  return scopeId2;
};
var attachStyles = hostRef => {
  const cmpMeta = hostRef.$cmpMeta$;
  const elm = hostRef.$hostElement$;
  const flags = cmpMeta.$flags$;
  const endAttachStyles = createTime("attachStyles", cmpMeta.$tagName$);
  const scopeId2 = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$);
  if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && (flags & 10 && flags & 2 || flags & 128)) {
    elm["s-sc"] = scopeId2;
    elm.classList.add(scopeId2 + "-h");
  }
  endAttachStyles();
};
var getScopeId = (cmp, mode) => "sc-" + (BUILD.mode && mode && cmp.$flags$ & 32 ? cmp.$tagName$ + "-" + mode : cmp.$tagName$);
var convertScopedToShadow = css => css.replace(/\/\*!@([^\/]+)\*\/[^\{]+\{/g, "$1{");
var hydrateScopedToShadow = () => {
  if (!win.document) {
    return;
  }
  const styles2 = win.document.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);
  let i2 = 0;
  for (; i2 < styles2.length; i2++) {
    registerStyle(styles2[i2].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles2[i2].innerHTML), true);
  }
};
var setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags, initialRender) => {
  if (oldValue === newValue) {
    return;
  }
  let isProp = isMemberInElement(elm, memberName);
  let ln = memberName.toLowerCase();
  if (BUILD.vdomClass && memberName === "class") {
    const classList = elm.classList;
    const oldClasses = parseClassList(oldValue);
    let newClasses = parseClassList(newValue);
    if (BUILD.hydrateClientSide && elm["s-si"] && initialRender) {
      newClasses.push(elm["s-si"]);
      oldClasses.forEach(c => {
        if (c.startsWith(elm["s-si"])) newClasses.push(c);
      });
      newClasses = [...new Set(newClasses)];
      classList.add(...newClasses);
    } else {
      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));
      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));
    }
  } else if (BUILD.vdomStyle && memberName === "style") {
    if (BUILD.updatable) {
      for (const prop in oldValue) {
        if (!newValue || newValue[prop] == null) {
          if (!BUILD.hydrateServerSide && prop.includes("-")) {
            elm.style.removeProperty(prop);
          } else {
            elm.style[prop] = "";
          }
        }
      }
    }
    for (const prop in newValue) {
      if (!oldValue || newValue[prop] !== oldValue[prop]) {
        if (!BUILD.hydrateServerSide && prop.includes("-")) {
          elm.style.setProperty(prop, newValue[prop]);
        } else {
          elm.style[prop] = newValue[prop];
        }
      }
    }
  } else if (BUILD.vdomKey && memberName === "key") {} else if (BUILD.vdomRef && memberName === "ref") {
    if (newValue) {
      newValue(elm);
    }
  } else if (BUILD.vdomListener && (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) && memberName[0] === "o" && memberName[1] === "n") {
    if (memberName[2] === "-") {
      memberName = memberName.slice(3);
    } else if (isMemberInElement(win, ln)) {
      memberName = ln.slice(2);
    } else {
      memberName = ln[2] + memberName.slice(3);
    }
    if (oldValue || newValue) {
      const capture = memberName.endsWith(CAPTURE_EVENT_SUFFIX);
      memberName = memberName.replace(CAPTURE_EVENT_REGEX, "");
      if (oldValue) {
        plt.rel(elm, memberName, oldValue, capture);
      }
      if (newValue) {
        plt.ael(elm, memberName, newValue, capture);
      }
    }
  } else if (BUILD.vdomPropOrAttr) {
    const isComplex = isComplexType(newValue);
    if ((isProp || isComplex && newValue !== null) && !isSvg) {
      try {
        if (!elm.tagName.includes("-")) {
          const n = newValue == null ? "" : newValue;
          if (memberName === "list") {
            isProp = false;
          } else if (oldValue == null || elm[memberName] != n) {
            if (typeof elm.__lookupSetter__(memberName) === "function") {
              elm[memberName] = n;
            } else {
              elm.setAttribute(memberName, n);
            }
          }
        } else if (elm[memberName] !== newValue) {
          elm[memberName] = newValue;
        }
      } catch (e) {}
    }
    let xlink = false;
    if (BUILD.vdomXlink) {
      if (ln !== (ln = ln.replace(/^xlink\:?/, ""))) {
        memberName = ln;
        xlink = true;
      }
    }
    if (newValue == null || newValue === false) {
      if (newValue !== false || elm.getAttribute(memberName) === "") {
        if (BUILD.vdomXlink && xlink) {
          elm.removeAttributeNS(XLINK_NS, memberName);
        } else {
          elm.removeAttribute(memberName);
        }
      }
    } else if ((!isProp || flags & 4 || isSvg) && !isComplex && elm.nodeType === 1) {
      newValue = newValue === true ? "" : newValue;
      if (BUILD.vdomXlink && xlink) {
        elm.setAttributeNS(XLINK_NS, memberName, newValue);
      } else {
        elm.setAttribute(memberName, newValue);
      }
    }
  }
};
var parseClassListRegex = /\s/;
var parseClassList = value => {
  if (typeof value === "object" && value && "baseVal" in value) {
    value = value.baseVal;
  }
  if (!value || typeof value !== "string") {
    return [];
  }
  return value.split(parseClassListRegex);
};
var CAPTURE_EVENT_SUFFIX = "Capture";
var CAPTURE_EVENT_REGEX = new RegExp(CAPTURE_EVENT_SUFFIX + "$");
var updateElement = (oldVnode, newVnode, isSvgMode2, isInitialRender) => {
  const elm = newVnode.$elm$.nodeType === 11 && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;
  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || {};
  const newVnodeAttrs = newVnode.$attrs$ || {};
  if (BUILD.updatable) {
    for (const memberName of sortedAttrNames(Object.keys(oldVnodeAttrs))) {
      if (!(memberName in newVnodeAttrs)) {
        setAccessor(elm, memberName, oldVnodeAttrs[memberName], void 0, isSvgMode2, newVnode.$flags$, isInitialRender);
      }
    }
  }
  for (const memberName of sortedAttrNames(Object.keys(newVnodeAttrs))) {
    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode2, newVnode.$flags$, isInitialRender);
  }
};
function sortedAttrNames(attrNames) {
  return attrNames.includes("ref") ? [...attrNames.filter(attr => attr !== "ref"), "ref"] : attrNames;
}
var scopeId;
var contentRef;
var hostTagName;
var useNativeShadowDom = false;
var checkSlotFallbackVisibility = false;
var checkSlotRelocate = false;
var isSvgMode = false;
var createElm = (oldParentVNode, newParentVNode, childIndex) => {
  var _a;
  const newVNode2 = newParentVNode.$children$[childIndex];
  let i2 = 0;
  let elm;
  let childNode;
  let oldVNode;
  if (BUILD.slotRelocation && !useNativeShadowDom) {
    checkSlotRelocate = true;
    if (newVNode2.$tag$ === "slot") {
      newVNode2.$flags$ |= newVNode2.$children$ ? 2 : 1;
    }
  }
  if (BUILD.isDev && newVNode2.$elm$) {
    consoleDevError(`The JSX ${newVNode2.$text$ !== null ? `"${newVNode2.$text$}" text` : `"${newVNode2.$tag$}" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);
  }
  if (BUILD.vdomText && newVNode2.$text$ !== null) {
    elm = newVNode2.$elm$ = win.document.createTextNode(newVNode2.$text$);
  } else if (BUILD.slotRelocation && newVNode2.$flags$ & 1) {
    elm = newVNode2.$elm$ = BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode2) : win.document.createTextNode("");
    if (BUILD.vdomAttribute) {
      updateElement(null, newVNode2, isSvgMode);
    }
  } else {
    if (BUILD.svg && !isSvgMode) {
      isSvgMode = newVNode2.$tag$ === "svg";
    }
    if (!win.document) {
      throw new Error("You are trying to render a Stencil component in an environment that doesn't support the DOM. Make sure to populate the [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window/window) object before rendering a component.");
    }
    elm = newVNode2.$elm$ = BUILD.svg ? win.document.createElementNS(isSvgMode ? SVG_NS : HTML_NS, !useNativeShadowDom && BUILD.slotRelocation && newVNode2.$flags$ & 2 ? "slot-fb" : newVNode2.$tag$) : win.document.createElement(!useNativeShadowDom && BUILD.slotRelocation && newVNode2.$flags$ & 2 ? "slot-fb" : newVNode2.$tag$);
    if (BUILD.svg && isSvgMode && newVNode2.$tag$ === "foreignObject") {
      isSvgMode = false;
    }
    if (BUILD.vdomAttribute) {
      updateElement(null, newVNode2, isSvgMode);
    }
    if (BUILD.scoped && isDef(scopeId) && elm["s-si"] !== scopeId) {
      elm.classList.add(elm["s-si"] = scopeId);
    }
    if (newVNode2.$children$) {
      for (i2 = 0; i2 < newVNode2.$children$.length; ++i2) {
        childNode = createElm(oldParentVNode, newVNode2, i2);
        if (childNode) {
          elm.appendChild(childNode);
        }
      }
    }
    if (BUILD.svg) {
      if (newVNode2.$tag$ === "svg") {
        isSvgMode = false;
      } else if (elm.tagName === "foreignObject") {
        isSvgMode = true;
      }
    }
  }
  elm["s-hn"] = hostTagName;
  if (BUILD.slotRelocation) {
    if (newVNode2.$flags$ & (2 | 1)) {
      elm["s-sr"] = true;
      elm["s-cr"] = contentRef;
      elm["s-sn"] = newVNode2.$name$ || "";
      elm["s-rf"] = (_a = newVNode2.$attrs$) == null ? void 0 : _a.ref;
      patchSlotNode(elm);
      oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];
      if (oldVNode && oldVNode.$tag$ === newVNode2.$tag$ && oldParentVNode.$elm$) {
        if (BUILD.experimentalSlotFixes) {
          relocateToHostRoot(oldParentVNode.$elm$);
        } else {
          putBackInOriginalLocation(oldParentVNode.$elm$, false);
        }
      }
      if (BUILD.scoped) {
        addRemoveSlotScopedClass(contentRef, elm, newParentVNode.$elm$, oldParentVNode == null ? void 0 : oldParentVNode.$elm$);
      }
    }
  }
  return elm;
};
var relocateToHostRoot = parentElm => {
  plt.$flags$ |= 1;
  const host = parentElm.closest(hostTagName.toLowerCase());
  if (host != null) {
    const contentRefNode = Array.from(host.__childNodes || host.childNodes).find(ref => ref["s-cr"]);
    const childNodeArray = Array.from(parentElm.__childNodes || parentElm.childNodes);
    for (const childNode of contentRefNode ? childNodeArray.reverse() : childNodeArray) {
      if (childNode["s-sh"] != null) {
        insertBefore(host, childNode, contentRefNode != null ? contentRefNode : null);
        childNode["s-sh"] = void 0;
        checkSlotRelocate = true;
      }
    }
  }
  plt.$flags$ &= ~1;
};
var putBackInOriginalLocation = (parentElm, recursive) => {
  plt.$flags$ |= 1;
  const oldSlotChildNodes = Array.from(parentElm.__childNodes || parentElm.childNodes);
  if (parentElm["s-sr"] && BUILD.experimentalSlotFixes) {
    let node = parentElm;
    while (node = node.nextSibling) {
      if (node && node["s-sn"] === parentElm["s-sn"] && node["s-sh"] === hostTagName) {
        oldSlotChildNodes.push(node);
      }
    }
  }
  for (let i2 = oldSlotChildNodes.length - 1; i2 >= 0; i2--) {
    const childNode = oldSlotChildNodes[i2];
    if (childNode["s-hn"] !== hostTagName && childNode["s-ol"]) {
      insertBefore(referenceNode(childNode).parentNode, childNode, referenceNode(childNode));
      childNode["s-ol"].remove();
      childNode["s-ol"] = void 0;
      childNode["s-sh"] = void 0;
      checkSlotRelocate = true;
    }
    if (recursive) {
      putBackInOriginalLocation(childNode, recursive);
    }
  }
  plt.$flags$ &= ~1;
};
var addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {
  let containerElm = BUILD.slotRelocation && parentElm["s-cr"] && parentElm["s-cr"].parentNode || parentElm;
  let childNode;
  if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {
    containerElm = containerElm.shadowRoot;
  }
  for (; startIdx <= endIdx; ++startIdx) {
    if (vnodes[startIdx]) {
      childNode = createElm(null, parentVNode, startIdx);
      if (childNode) {
        vnodes[startIdx].$elm$ = childNode;
        insertBefore(containerElm, childNode, BUILD.slotRelocation ? referenceNode(before) : before);
      }
    }
  }
};
var removeVnodes = (vnodes, startIdx, endIdx) => {
  for (let index = startIdx; index <= endIdx; ++index) {
    const vnode = vnodes[index];
    if (vnode) {
      const elm = vnode.$elm$;
      nullifyVNodeRefs(vnode);
      if (elm) {
        if (BUILD.slotRelocation) {
          checkSlotFallbackVisibility = true;
          if (elm["s-ol"]) {
            elm["s-ol"].remove();
          } else {
            putBackInOriginalLocation(elm, true);
          }
        }
        elm.remove();
      }
    }
  }
};
var updateChildren = (parentElm, oldCh, newVNode2, newCh, isInitialRender = false) => {
  let oldStartIdx = 0;
  let newStartIdx = 0;
  let idxInOld = 0;
  let i2 = 0;
  let oldEndIdx = oldCh.length - 1;
  let oldStartVnode = oldCh[0];
  let oldEndVnode = oldCh[oldEndIdx];
  let newEndIdx = newCh.length - 1;
  let newStartVnode = newCh[0];
  let newEndVnode = newCh[newEndIdx];
  let node;
  let elmToMove;
  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
    if (oldStartVnode == null) {
      oldStartVnode = oldCh[++oldStartIdx];
    } else if (oldEndVnode == null) {
      oldEndVnode = oldCh[--oldEndIdx];
    } else if (newStartVnode == null) {
      newStartVnode = newCh[++newStartIdx];
    } else if (newEndVnode == null) {
      newEndVnode = newCh[--newEndIdx];
    } else if (isSameVnode(oldStartVnode, newStartVnode, isInitialRender)) {
      patch(oldStartVnode, newStartVnode, isInitialRender);
      oldStartVnode = oldCh[++oldStartIdx];
      newStartVnode = newCh[++newStartIdx];
    } else if (isSameVnode(oldEndVnode, newEndVnode, isInitialRender)) {
      patch(oldEndVnode, newEndVnode, isInitialRender);
      oldEndVnode = oldCh[--oldEndIdx];
      newEndVnode = newCh[--newEndIdx];
    } else if (isSameVnode(oldStartVnode, newEndVnode, isInitialRender)) {
      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === "slot" || newEndVnode.$tag$ === "slot")) {
        putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);
      }
      patch(oldStartVnode, newEndVnode, isInitialRender);
      insertBefore(parentElm, oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);
      oldStartVnode = oldCh[++oldStartIdx];
      newEndVnode = newCh[--newEndIdx];
    } else if (isSameVnode(oldEndVnode, newStartVnode, isInitialRender)) {
      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === "slot" || newEndVnode.$tag$ === "slot")) {
        putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);
      }
      patch(oldEndVnode, newStartVnode, isInitialRender);
      insertBefore(parentElm, oldEndVnode.$elm$, oldStartVnode.$elm$);
      oldEndVnode = oldCh[--oldEndIdx];
      newStartVnode = newCh[++newStartIdx];
    } else {
      idxInOld = -1;
      if (BUILD.vdomKey) {
        for (i2 = oldStartIdx; i2 <= oldEndIdx; ++i2) {
          if (oldCh[i2] && oldCh[i2].$key$ !== null && oldCh[i2].$key$ === newStartVnode.$key$) {
            idxInOld = i2;
            break;
          }
        }
      }
      if (BUILD.vdomKey && idxInOld >= 0) {
        elmToMove = oldCh[idxInOld];
        if (elmToMove.$tag$ !== newStartVnode.$tag$) {
          node = createElm(oldCh && oldCh[newStartIdx], newVNode2, idxInOld);
        } else {
          patch(elmToMove, newStartVnode, isInitialRender);
          oldCh[idxInOld] = void 0;
          node = elmToMove.$elm$;
        }
        newStartVnode = newCh[++newStartIdx];
      } else {
        node = createElm(oldCh && oldCh[newStartIdx], newVNode2, newStartIdx);
        newStartVnode = newCh[++newStartIdx];
      }
      if (node) {
        if (BUILD.slotRelocation) {
          insertBefore(referenceNode(oldStartVnode.$elm$).parentNode, node, referenceNode(oldStartVnode.$elm$));
        } else {
          insertBefore(oldStartVnode.$elm$.parentNode, node, oldStartVnode.$elm$);
        }
      }
    }
  }
  if (oldStartIdx > oldEndIdx) {
    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode2, newCh, newStartIdx, newEndIdx);
  } else if (BUILD.updatable && newStartIdx > newEndIdx) {
    removeVnodes(oldCh, oldStartIdx, oldEndIdx);
  }
};
var isSameVnode = (leftVNode, rightVNode, isInitialRender = false) => {
  if (leftVNode.$tag$ === rightVNode.$tag$) {
    if (BUILD.slotRelocation && leftVNode.$tag$ === "slot") {
      return leftVNode.$name$ === rightVNode.$name$;
    }
    if (BUILD.vdomKey && !isInitialRender) {
      return leftVNode.$key$ === rightVNode.$key$;
    }
    if (isInitialRender && !leftVNode.$key$ && rightVNode.$key$) {
      leftVNode.$key$ = rightVNode.$key$;
    }
    return true;
  }
  return false;
};
var referenceNode = node => node && node["s-ol"] || node;
var patch = (oldVNode, newVNode2, isInitialRender = false) => {
  const elm = newVNode2.$elm$ = oldVNode.$elm$;
  const oldChildren = oldVNode.$children$;
  const newChildren = newVNode2.$children$;
  const tag = newVNode2.$tag$;
  const text = newVNode2.$text$;
  let defaultHolder;
  if (!BUILD.vdomText || text === null) {
    if (BUILD.svg) {
      isSvgMode = tag === "svg" ? true : tag === "foreignObject" ? false : isSvgMode;
    }
    if (BUILD.vdomAttribute || BUILD.reflect) {
      if (BUILD.slot && tag === "slot" && !useNativeShadowDom) {
        if (BUILD.experimentalSlotFixes && oldVNode.$name$ !== newVNode2.$name$) {
          newVNode2.$elm$["s-sn"] = newVNode2.$name$ || "";
          relocateToHostRoot(newVNode2.$elm$.parentElement);
        }
      }
      updateElement(oldVNode, newVNode2, isSvgMode, isInitialRender);
    }
    if (BUILD.updatable && oldChildren !== null && newChildren !== null) {
      updateChildren(elm, oldChildren, newVNode2, newChildren, isInitialRender);
    } else if (newChildren !== null) {
      if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {
        elm.textContent = "";
      }
      addVnodes(elm, null, newVNode2, newChildren, 0, newChildren.length - 1);
    } else if (!isInitialRender && BUILD.updatable && oldChildren !== null) {
      removeVnodes(oldChildren, 0, oldChildren.length - 1);
    }
    if (BUILD.svg && isSvgMode && tag === "svg") {
      isSvgMode = false;
    }
  } else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm["s-cr"])) {
    defaultHolder.parentNode.textContent = text;
  } else if (BUILD.vdomText && oldVNode.$text$ !== text) {
    elm.data = text;
  }
};
var relocateNodes = [];
var markSlotContentForRelocation = elm => {
  let node;
  let hostContentNodes;
  let j;
  const children = elm.__childNodes || elm.childNodes;
  for (const childNode of children) {
    if (childNode["s-sr"] && (node = childNode["s-cr"]) && node.parentNode) {
      hostContentNodes = node.parentNode.__childNodes || node.parentNode.childNodes;
      const slotName = childNode["s-sn"];
      for (j = hostContentNodes.length - 1; j >= 0; j--) {
        node = hostContentNodes[j];
        if (!node["s-cn"] && !node["s-nr"] && node["s-hn"] !== childNode["s-hn"] && (!BUILD.experimentalSlotFixes || !node["s-sh"] || node["s-sh"] !== childNode["s-hn"])) {
          if (isNodeLocatedInSlot(node, slotName)) {
            let relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);
            checkSlotFallbackVisibility = true;
            node["s-sn"] = node["s-sn"] || slotName;
            if (relocateNodeData) {
              relocateNodeData.$nodeToRelocate$["s-sh"] = childNode["s-hn"];
              relocateNodeData.$slotRefNode$ = childNode;
            } else {
              node["s-sh"] = childNode["s-hn"];
              relocateNodes.push({
                $slotRefNode$: childNode,
                $nodeToRelocate$: node
              });
            }
            if (node["s-sr"]) {
              relocateNodes.map(relocateNode => {
                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node["s-sn"])) {
                  relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);
                  if (relocateNodeData && !relocateNode.$slotRefNode$) {
                    relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;
                  }
                }
              });
            }
          } else if (!relocateNodes.some(r => r.$nodeToRelocate$ === node)) {
            relocateNodes.push({
              $nodeToRelocate$: node
            });
          }
        }
      }
    }
    if (childNode.nodeType === 1) {
      markSlotContentForRelocation(childNode);
    }
  }
};
var nullifyVNodeRefs = vNode => {
  if (BUILD.vdomRef) {
    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);
    vNode.$children$ && vNode.$children$.map(nullifyVNodeRefs);
  }
};
var insertBefore = (parent, newNode, reference) => {
  if (BUILD.scoped && typeof newNode["s-sn"] === "string" && !!newNode["s-sr"] && !!newNode["s-cr"]) {
    addRemoveSlotScopedClass(newNode["s-cr"], newNode, parent, newNode.parentElement);
  } else if (BUILD.experimentalSlotFixes && typeof newNode["s-sn"] === "string") {
    if (parent.getRootNode().nodeType !== 11) {
      patchParentNode(newNode);
    }
    parent.insertBefore(newNode, reference);
    const {
      slotNode
    } = findSlotFromSlottedNode(newNode);
    if (slotNode) dispatchSlotChangeEvent(slotNode);
    return newNode;
  }
  if (BUILD.experimentalSlotFixes && parent.__insertBefore) {
    return parent.__insertBefore(newNode, reference);
  } else {
    return parent == null ? void 0 : parent.insertBefore(newNode, reference);
  }
};
function addRemoveSlotScopedClass(reference, slotNode, newParent, oldParent) {
  var _a, _b;
  let scopeId2;
  if (reference && typeof slotNode["s-sn"] === "string" && !!slotNode["s-sr"] && reference.parentNode && reference.parentNode["s-sc"] && (scopeId2 = slotNode["s-si"] || reference.parentNode["s-sc"])) {
    const scopeName = slotNode["s-sn"];
    const hostName = slotNode["s-hn"];
    (_a = newParent.classList) == null ? void 0 : _a.add(scopeId2 + "-s");
    if (oldParent && ((_b = oldParent.classList) == null ? void 0 : _b.contains(scopeId2 + "-s"))) {
      let child = (oldParent.__childNodes || oldParent.childNodes)[0];
      let found = false;
      while (child) {
        if (child["s-sn"] !== scopeName && child["s-hn"] === hostName && !!child["s-sr"]) {
          found = true;
          break;
        }
        child = child.nextSibling;
      }
      if (!found) oldParent.classList.remove(scopeId2 + "-s");
    }
  }
}
var renderVdom = (hostRef, renderFnResults, isInitialLoad = false) => {
  var _a, _b, _c, _d, _e;
  const hostElm = hostRef.$hostElement$;
  const cmpMeta = hostRef.$cmpMeta$;
  const oldVNode = hostRef.$vnode$ || newVNode(null, null);
  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);
  hostTagName = hostElm.tagName;
  if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {
    throw new Error(`The <Host> must be the single root component.
Looks like the render() function of "${hostTagName.toLowerCase()}" is returning an array that contains the <Host>.

The render() function should look like this instead:

render() {
  // Do not return an array
  return (
    <Host>{content}</Host>
  );
}
  `);
  }
  if (BUILD.reflect && cmpMeta.$attrsToReflect$) {
    rootVnode.$attrs$ = rootVnode.$attrs$ || {};
    cmpMeta.$attrsToReflect$.map(([propName, attribute]) => rootVnode.$attrs$[attribute] = hostElm[propName]);
  }
  if (isInitialLoad && rootVnode.$attrs$) {
    for (const key of Object.keys(rootVnode.$attrs$)) {
      if (hostElm.hasAttribute(key) && !["key", "ref", "style", "class"].includes(key)) {
        rootVnode.$attrs$[key] = hostElm[key];
      }
    }
  }
  rootVnode.$tag$ = null;
  rootVnode.$flags$ |= 4;
  hostRef.$vnode$ = rootVnode;
  rootVnode.$elm$ = oldVNode.$elm$ = BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm;
  if (BUILD.scoped || BUILD.shadowDom) {
    scopeId = hostElm["s-sc"];
  }
  useNativeShadowDom = supportsShadow && !!(cmpMeta.$flags$ & 1) && !(cmpMeta.$flags$ & 128);
  if (BUILD.slotRelocation) {
    contentRef = hostElm["s-cr"];
    checkSlotFallbackVisibility = false;
  }
  patch(oldVNode, rootVnode, isInitialLoad);
  if (BUILD.slotRelocation) {
    plt.$flags$ |= 1;
    if (checkSlotRelocate) {
      markSlotContentForRelocation(rootVnode.$elm$);
      for (const relocateData of relocateNodes) {
        const nodeToRelocate = relocateData.$nodeToRelocate$;
        if (!nodeToRelocate["s-ol"] && win.document) {
          const orgLocationNode = BUILD.isDebug || BUILD.hydrateServerSide ? originalLocationDebugNode(nodeToRelocate) : win.document.createTextNode("");
          orgLocationNode["s-nr"] = nodeToRelocate;
          insertBefore(nodeToRelocate.parentNode, nodeToRelocate["s-ol"] = orgLocationNode, nodeToRelocate);
        }
      }
      for (const relocateData of relocateNodes) {
        const nodeToRelocate = relocateData.$nodeToRelocate$;
        const slotRefNode = relocateData.$slotRefNode$;
        if (slotRefNode) {
          const parentNodeRef = slotRefNode.parentNode;
          let insertBeforeNode = slotRefNode.nextSibling;
          if (!BUILD.hydrateServerSide && (!BUILD.experimentalSlotFixes || insertBeforeNode && insertBeforeNode.nodeType === 1)) {
            let orgLocationNode = (_a = nodeToRelocate["s-ol"]) == null ? void 0 : _a.previousSibling;
            while (orgLocationNode) {
              let refNode = (_b = orgLocationNode["s-nr"]) != null ? _b : null;
              if (refNode && refNode["s-sn"] === nodeToRelocate["s-sn"] && parentNodeRef === (refNode.__parentNode || refNode.parentNode)) {
                refNode = refNode.nextSibling;
                while (refNode === nodeToRelocate || (refNode == null ? void 0 : refNode["s-sr"])) {
                  refNode = refNode == null ? void 0 : refNode.nextSibling;
                }
                if (!refNode || !refNode["s-nr"]) {
                  insertBeforeNode = refNode;
                  break;
                }
              }
              orgLocationNode = orgLocationNode.previousSibling;
            }
          }
          const parent = nodeToRelocate.__parentNode || nodeToRelocate.parentNode;
          const nextSibling = nodeToRelocate.__nextSibling || nodeToRelocate.nextSibling;
          if (!insertBeforeNode && parentNodeRef !== parent || nextSibling !== insertBeforeNode) {
            if (nodeToRelocate !== insertBeforeNode) {
              if (!BUILD.experimentalSlotFixes && !nodeToRelocate["s-hn"] && nodeToRelocate["s-ol"]) {
                nodeToRelocate["s-hn"] = nodeToRelocate["s-ol"].parentNode.nodeName;
              }
              insertBefore(parentNodeRef, nodeToRelocate, insertBeforeNode);
              if (nodeToRelocate.nodeType === 1 && nodeToRelocate.tagName !== "SLOT-FB") {
                nodeToRelocate.hidden = (_c = nodeToRelocate["s-ih"]) != null ? _c : false;
              }
            }
          }
          nodeToRelocate && typeof slotRefNode["s-rf"] === "function" && slotRefNode["s-rf"](slotRefNode);
        } else {
          if (nodeToRelocate.nodeType === 1) {
            if (isInitialLoad) {
              nodeToRelocate["s-ih"] = (_d = nodeToRelocate.hidden) != null ? _d : false;
            }
            nodeToRelocate.hidden = true;
          }
        }
      }
    }
    if (checkSlotFallbackVisibility) {
      updateFallbackSlotVisibility(rootVnode.$elm$);
    }
    plt.$flags$ &= ~1;
    relocateNodes.length = 0;
  }
  if (BUILD.experimentalScopedSlotChanges && cmpMeta.$flags$ & 2) {
    const children = rootVnode.$elm$.__childNodes || rootVnode.$elm$.childNodes;
    for (const childNode of children) {
      if (childNode["s-hn"] !== hostTagName && !childNode["s-sh"]) {
        if (isInitialLoad && childNode["s-ih"] == null) {
          childNode["s-ih"] = (_e = childNode.hidden) != null ? _e : false;
        }
        childNode.hidden = true;
      }
    }
  }
  contentRef = void 0;
};
var slotReferenceDebugNode = slotVNode => {
  var _a;
  return (_a = win.document) == null ? void 0 : _a.createComment(`<slot${slotVNode.$name$ ? ' name="' + slotVNode.$name$ + '"' : ""}> (host=${hostTagName.toLowerCase()})`);
};
var originalLocationDebugNode = nodeToRelocate => {
  var _a;
  return (_a = win.document) == null ? void 0 : _a.createComment(`org-location for ` + (nodeToRelocate.localName ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate["s-hn"]})` : `[${nodeToRelocate.textContent}]`));
};
var attachToAncestor = (hostRef, ancestorComponent) => {
  if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent["s-p"]) {
    const index = ancestorComponent["s-p"].push(new Promise(r => hostRef.$onRenderResolve$ = () => {
      ancestorComponent["s-p"].splice(index - 1, 1);
      r();
    }));
  }
};
var scheduleUpdate = (hostRef, isInitialLoad) => {
  if (BUILD.taskQueue && BUILD.updatable) {
    hostRef.$flags$ |= 16;
  }
  if (BUILD.asyncLoading && hostRef.$flags$ & 4) {
    hostRef.$flags$ |= 512;
    return;
  }
  attachToAncestor(hostRef, hostRef.$ancestorComponent$);
  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);
  return BUILD.taskQueue ? writeTask(dispatch) : dispatch();
};
var dispatchHooks = (hostRef, isInitialLoad) => {
  const elm = hostRef.$hostElement$;
  const endSchedule = createTime("scheduleUpdate", hostRef.$cmpMeta$.$tagName$);
  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;
  if (!instance) {
    throw new Error(`Can't render component <${elm.tagName.toLowerCase()} /> with invalid Stencil runtime! Make sure this imported component is compiled with a \`externalRuntime: true\` flag. For more information, please refer to https://stenciljs.com/docs/custom-elements#externalruntime`);
  }
  let maybePromise;
  if (isInitialLoad) {
    if (BUILD.lazyLoad && BUILD.hostListener) {
      hostRef.$flags$ |= 256;
      if (hostRef.$queuedListeners$) {
        hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event, elm));
        hostRef.$queuedListeners$ = void 0;
      }
    }
    emitLifecycleEvent(elm, "componentWillLoad");
    maybePromise = safeCall(instance, "componentWillLoad", void 0, elm);
  } else {
    emitLifecycleEvent(elm, "componentWillUpdate");
    maybePromise = safeCall(instance, "componentWillUpdate", void 0, elm);
  }
  emitLifecycleEvent(elm, "componentWillRender");
  maybePromise = enqueue(maybePromise, () => safeCall(instance, "componentWillRender", void 0, elm));
  endSchedule();
  return enqueue(maybePromise, () => updateComponent(hostRef, instance, isInitialLoad));
};
var enqueue = (maybePromise, fn) => isPromisey(maybePromise) ? maybePromise.then(fn).catch(err2 => {
  console.error(err2);
  fn();
}) : fn();
var isPromisey = maybePromise => maybePromise instanceof Promise || maybePromise && maybePromise.then && typeof maybePromise.then === "function";
var updateComponent = async (hostRef, instance, isInitialLoad) => {
  var _a;
  const elm = hostRef.$hostElement$;
  const endUpdate = createTime("update", hostRef.$cmpMeta$.$tagName$);
  const rc = elm["s-rc"];
  if (BUILD.style && isInitialLoad) {
    attachStyles(hostRef);
  }
  const endRender = createTime("render", hostRef.$cmpMeta$.$tagName$);
  if (BUILD.isDev) {
    hostRef.$flags$ |= 1024;
  }
  if (BUILD.hydrateServerSide) {
    await callRender(hostRef, instance, elm, isInitialLoad);
  } else {
    callRender(hostRef, instance, elm, isInitialLoad);
  }
  if (BUILD.isDev) {
    hostRef.$renderCount$ = hostRef.$renderCount$ === void 0 ? 1 : hostRef.$renderCount$ + 1;
    hostRef.$flags$ &= ~1024;
  }
  if (BUILD.hydrateServerSide) {
    try {
      serverSideConnected(elm);
      if (isInitialLoad) {
        if (hostRef.$cmpMeta$.$flags$ & 1) {
          elm["s-en"] = "";
        } else if (hostRef.$cmpMeta$.$flags$ & 2) {
          elm["s-en"] = "c";
        }
      }
    } catch (e) {
      consoleError(e, elm);
    }
  }
  if (BUILD.asyncLoading && rc) {
    rc.map(cb => cb());
    elm["s-rc"] = void 0;
  }
  endRender();
  endUpdate();
  if (BUILD.asyncLoading) {
    const childrenPromises = (_a = elm["s-p"]) != null ? _a : [];
    const postUpdate = () => postUpdateComponent(hostRef);
    if (childrenPromises.length === 0) {
      postUpdate();
    } else {
      Promise.all(childrenPromises).then(postUpdate);
      hostRef.$flags$ |= 4;
      childrenPromises.length = 0;
    }
  } else {
    postUpdateComponent(hostRef);
  }
};
var renderingRef = null;
var callRender = (hostRef, instance, elm, isInitialLoad) => {
  const allRenderFn = BUILD.allRenderFn ? true : false;
  const lazyLoad = BUILD.lazyLoad ? true : false;
  const taskQueue = BUILD.taskQueue ? true : false;
  const updatable = BUILD.updatable ? true : false;
  try {
    renderingRef = instance;
    instance = allRenderFn ? instance.render() : instance.render && instance.render();
    if (updatable && taskQueue) {
      hostRef.$flags$ &= ~16;
    }
    if (updatable || lazyLoad) {
      hostRef.$flags$ |= 2;
    }
    if (BUILD.hasRenderFn || BUILD.reflect) {
      if (BUILD.vdomRender || BUILD.reflect) {
        if (BUILD.hydrateServerSide) {
          return Promise.resolve(instance).then(value => renderVdom(hostRef, value, isInitialLoad));
        } else {
          renderVdom(hostRef, instance, isInitialLoad);
        }
      } else {
        const shadowRoot = elm.shadowRoot;
        if (hostRef.$cmpMeta$.$flags$ & 1) {
          shadowRoot.textContent = instance;
        } else {
          elm.textContent = instance;
        }
      }
    }
  } catch (e) {
    consoleError(e, hostRef.$hostElement$);
  }
  renderingRef = null;
  return null;
};
var getRenderingRef = () => renderingRef;
var postUpdateComponent = hostRef => {
  const tagName = hostRef.$cmpMeta$.$tagName$;
  const elm = hostRef.$hostElement$;
  const endPostUpdate = createTime("postUpdate", tagName);
  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;
  const ancestorComponent = hostRef.$ancestorComponent$;
  if (BUILD.isDev) {
    hostRef.$flags$ |= 1024;
  }
  safeCall(instance, "componentDidRender", void 0, elm);
  if (BUILD.isDev) {
    hostRef.$flags$ &= ~1024;
  }
  emitLifecycleEvent(elm, "componentDidRender");
  if (!(hostRef.$flags$ & 64)) {
    hostRef.$flags$ |= 64;
    if (BUILD.asyncLoading && BUILD.cssAnnotations) {
      addHydratedFlag(elm);
    }
    if (BUILD.isDev) {
      hostRef.$flags$ |= 2048;
    }
    safeCall(instance, "componentDidLoad", void 0, elm);
    if (BUILD.isDev) {
      hostRef.$flags$ &= ~2048;
    }
    emitLifecycleEvent(elm, "componentDidLoad");
    endPostUpdate();
    if (BUILD.asyncLoading) {
      hostRef.$onReadyResolve$(elm);
      if (!ancestorComponent) {
        appDidLoad(tagName);
      }
    }
  } else {
    if (BUILD.isDev) {
      hostRef.$flags$ |= 1024;
    }
    safeCall(instance, "componentDidUpdate", void 0, elm);
    if (BUILD.isDev) {
      hostRef.$flags$ &= ~1024;
    }
    emitLifecycleEvent(elm, "componentDidUpdate");
    endPostUpdate();
  }
  if (BUILD.method && BUILD.lazyLoad) {
    hostRef.$onInstanceResolve$(elm);
  }
  if (BUILD.asyncLoading) {
    if (hostRef.$onRenderResolve$) {
      hostRef.$onRenderResolve$();
      hostRef.$onRenderResolve$ = void 0;
    }
    if (hostRef.$flags$ & 512) {
      nextTick(() => scheduleUpdate(hostRef, false));
    }
    hostRef.$flags$ &= ~(4 | 512);
  }
};
var forceUpdate = ref => {
  if (BUILD.updatable && (Build.isBrowser || Build.isTesting)) {
    const hostRef = getHostRef(ref);
    const isConnected = hostRef.$hostElement$.isConnected;
    if (isConnected && (hostRef.$flags$ & (2 | 16)) === 2) {
      scheduleUpdate(hostRef, false);
    }
    return isConnected;
  }
  return false;
};
var appDidLoad = who => {
  if (BUILD.asyncQueue) {
    plt.$flags$ |= 2;
  }
  nextTick(() => emitEvent(win, "appload", {
    detail: {
      namespace: NAMESPACE
    }
  }));
  if (BUILD.profile && performance.measure) {
    performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, "st:app:start");
  }
};
var safeCall = (instance, method, arg, elm) => {
  if (instance && instance[method]) {
    try {
      return instance[method](arg);
    } catch (e) {
      consoleError(e, elm);
    }
  }
  return void 0;
};
var emitLifecycleEvent = (elm, lifecycleName) => {
  if (BUILD.lifecycleDOMEvents) {
    emitEvent(elm, "stencil_" + lifecycleName, {
      bubbles: true,
      composed: true,
      detail: {
        namespace: NAMESPACE
      }
    });
  }
};
var addHydratedFlag = elm => {
  var _a, _b;
  return BUILD.hydratedClass ? elm.classList.add((_a = BUILD.hydratedSelectorName) != null ? _a : "hydrated") : BUILD.hydratedAttribute ? elm.setAttribute((_b = BUILD.hydratedSelectorName) != null ? _b : "hydrated", "") : void 0;
};
var serverSideConnected = elm => {
  const children = elm.children;
  if (children != null) {
    for (let i2 = 0, ii = children.length; i2 < ii; i2++) {
      const childElm = children[i2];
      if (typeof childElm.connectedCallback === "function") {
        childElm.connectedCallback();
      }
      serverSideConnected(childElm);
    }
  }
};
var getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);
var setValue = (ref, propName, newVal, cmpMeta) => {
  const hostRef = getHostRef(ref);
  if (BUILD.lazyLoad && !hostRef) {
    throw new Error(`Couldn't find host element for "${cmpMeta.$tagName$}" as it is unknown to this Stencil runtime. This usually happens when integrating a 3rd party Stencil component with another Stencil component or application. Please reach out to the maintainers of the 3rd party Stencil component or report this on the Stencil Discord server (https://chat.stenciljs.com) or comment on this similar [GitHub issue](https://github.com/stenciljs/core/issues/5457).`);
  }
  const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;
  const oldVal = hostRef.$instanceValues$.get(propName);
  const flags = hostRef.$flags$;
  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;
  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);
  const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);
  const didValueChange = newVal !== oldVal && !areBothNaN;
  if ((!BUILD.lazyLoad || !(flags & 8) || oldVal === void 0) && didValueChange) {
    hostRef.$instanceValues$.set(propName, newVal);
    if (BUILD.isDev) {
      if (hostRef.$flags$ & 1024) {
        consoleDevWarn(`The state/prop "${propName}" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, "\nElement", elm, "\nNew value", newVal, "\nOld value", oldVal);
      } else if (hostRef.$flags$ & 2048) {
        consoleDevWarn(`The state/prop "${propName}" changed during "componentDidLoad()", this triggers extra re-renders, try to setup on "componentWillLoad()"`, "\nElement", elm, "\nNew value", newVal, "\nOld value", oldVal);
      }
    }
    if (!BUILD.lazyLoad || instance) {
      if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128) {
        const watchMethods = cmpMeta.$watchers$[propName];
        if (watchMethods) {
          watchMethods.map(watchMethodName => {
            try {
              instance[watchMethodName](newVal, oldVal, propName);
            } catch (e) {
              consoleError(e, elm);
            }
          });
        }
      }
      if (BUILD.updatable && (flags & (2 | 16)) === 2) {
        if (instance.componentShouldUpdate) {
          if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {
            return;
          }
        }
        scheduleUpdate(hostRef, false);
      }
    }
  }
};
var proxyComponent = (Cstr, cmpMeta, flags) => {
  var _a, _b;
  const prototype = Cstr.prototype;
  if (BUILD.isTesting) {
    if (prototype.__stencilAugmented) {
      return;
    }
    prototype.__stencilAugmented = true;
  }
  if (BUILD.formAssociated && cmpMeta.$flags$ & 64 && flags & 1) {
    FORM_ASSOCIATED_CUSTOM_ELEMENT_CALLBACKS.forEach(cbName => {
      const originalFormAssociatedCallback = prototype[cbName];
      Object.defineProperty(prototype, cbName, {
        value(...args) {
          const hostRef = getHostRef(this);
          const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : this;
          if (!instance) {
            hostRef.$onReadyPromise$.then(asyncInstance => {
              const cb = asyncInstance[cbName];
              typeof cb === "function" && cb.call(asyncInstance, ...args);
            });
          } else {
            const cb = BUILD.lazyLoad ? instance[cbName] : originalFormAssociatedCallback;
            typeof cb === "function" && cb.call(instance, ...args);
          }
        }
      });
    });
  }
  if (BUILD.member && cmpMeta.$members$ || BUILD.watchCallback && (cmpMeta.$watchers$ || Cstr.watchers)) {
    if (BUILD.watchCallback && Cstr.watchers && !cmpMeta.$watchers$) {
      cmpMeta.$watchers$ = Cstr.watchers;
    }
    const members = Object.entries((_a = cmpMeta.$members$) != null ? _a : {});
    members.map(([memberName, [memberFlags]]) => {
      if ((BUILD.prop || BUILD.state) && (memberFlags & 31 || (!BUILD.lazyLoad || flags & 2) && memberFlags & 32)) {
        const {
          get: origGetter,
          set: origSetter
        } = Object.getOwnPropertyDescriptor(prototype, memberName) || {};
        if (origGetter) cmpMeta.$members$[memberName][0] |= 2048;
        if (origSetter) cmpMeta.$members$[memberName][0] |= 4096;
        if (flags & 1 || !origGetter) {
          Object.defineProperty(prototype, memberName, {
            get() {
              if (BUILD.lazyLoad) {
                if ((cmpMeta.$members$[memberName][0] & 2048) === 0) {
                  return getValue(this, memberName);
                }
                const ref = getHostRef(this);
                const instance = ref ? ref.$lazyInstance$ : prototype;
                if (!instance) return;
                return instance[memberName];
              }
              if (!BUILD.lazyLoad) {
                return origGetter ? origGetter.apply(this) : getValue(this, memberName);
              }
            },
            configurable: true,
            enumerable: true
          });
        }
        Object.defineProperty(prototype, memberName, {
          set(newValue) {
            const ref = getHostRef(this);
            if (BUILD.isDev) {
              if ((flags & 1) === 0 && (cmpMeta.$members$[memberName][0] & 4096) === 0 && (ref && ref.$flags$ & 8) === 0 && (memberFlags & 31) !== 0 && (memberFlags & 1024) === 0) {
                consoleDevWarn(`@Prop() "${memberName}" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.
More information: https://stenciljs.com/docs/properties#prop-mutability`);
              }
            }
            if (origSetter) {
              const currentValue = memberFlags & 32 ? this[memberName] : ref.$hostElement$[memberName];
              if (typeof currentValue === "undefined" && ref.$instanceValues$.get(memberName)) {
                newValue = ref.$instanceValues$.get(memberName);
              } else if (!ref.$instanceValues$.get(memberName) && currentValue) {
                ref.$instanceValues$.set(memberName, currentValue);
              }
              origSetter.apply(this, [parsePropertyValue(newValue, memberFlags)]);
              newValue = memberFlags & 32 ? this[memberName] : ref.$hostElement$[memberName];
              setValue(this, memberName, newValue, cmpMeta);
              return;
            }
            if (!BUILD.lazyLoad) {
              setValue(this, memberName, newValue, cmpMeta);
              return;
            }
            if (BUILD.lazyLoad) {
              if ((flags & 1) === 0 || (cmpMeta.$members$[memberName][0] & 4096) === 0) {
                setValue(this, memberName, newValue, cmpMeta);
                if (flags & 1 && !ref.$lazyInstance$) {
                  ref.$onReadyPromise$.then(() => {
                    if (cmpMeta.$members$[memberName][0] & 4096 && ref.$lazyInstance$[memberName] !== ref.$instanceValues$.get(memberName)) {
                      ref.$lazyInstance$[memberName] = newValue;
                    }
                  });
                }
                return;
              }
              const setterSetVal = () => {
                const currentValue = ref.$lazyInstance$[memberName];
                if (!ref.$instanceValues$.get(memberName) && currentValue) {
                  ref.$instanceValues$.set(memberName, currentValue);
                }
                ref.$lazyInstance$[memberName] = parsePropertyValue(newValue, memberFlags);
                setValue(this, memberName, ref.$lazyInstance$[memberName], cmpMeta);
              };
              if (ref.$lazyInstance$) {
                setterSetVal();
              } else {
                ref.$onReadyPromise$.then(() => setterSetVal());
              }
            }
          }
        });
      } else if (BUILD.lazyLoad && BUILD.method && flags & 1 && memberFlags & 64) {
        Object.defineProperty(prototype, memberName, {
          value(...args) {
            var _a2;
            const ref = getHostRef(this);
            return (_a2 = ref == null ? void 0 : ref.$onInstancePromise$) == null ? void 0 : _a2.then(() => {
              var _a3;
              return (_a3 = ref.$lazyInstance$) == null ? void 0 : _a3[memberName](...args);
            });
          }
        });
      }
    });
    if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1)) {
      const attrNameToPropName = new Map();
      prototype.attributeChangedCallback = function (attrName, oldValue, newValue) {
        plt.jmp(() => {
          var _a2;
          const propName = attrNameToPropName.get(attrName);
          if (this.hasOwnProperty(propName) && BUILD.lazyLoad) {
            newValue = this[propName];
            delete this[propName];
          } else if (prototype.hasOwnProperty(propName) && typeof this[propName] === "number" && this[propName] == newValue) {
            return;
          } else if (propName == null) {
            const hostRef = getHostRef(this);
            const flags2 = hostRef == null ? void 0 : hostRef.$flags$;
            if (flags2 && !(flags2 & 8) && flags2 & 128 && newValue !== oldValue) {
              const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : this;
              const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;
              const entry = (_a2 = cmpMeta.$watchers$) == null ? void 0 : _a2[attrName];
              entry == null ? void 0 : entry.forEach(callbackName => {
                if (instance[callbackName] != null) {
                  instance[callbackName].call(instance, newValue, oldValue, attrName);
                }
              });
            }
            return;
          }
          const propDesc = Object.getOwnPropertyDescriptor(prototype, propName);
          newValue = newValue === null && typeof this[propName] === "boolean" ? false : newValue;
          if (newValue !== this[propName] && (!propDesc.get || !!propDesc.set)) {
            this[propName] = newValue;
          }
        });
      };
      Cstr.observedAttributes = Array.from(new Set([...Object.keys((_b = cmpMeta.$watchers$) != null ? _b : {}), ...members.filter(([_, m]) => m[0] & 15).map(([propName, m]) => {
        var _a2;
        const attrName = m[1] || propName;
        attrNameToPropName.set(attrName, propName);
        if (BUILD.reflect && m[0] & 512) {
          (_a2 = cmpMeta.$attrsToReflect$) == null ? void 0 : _a2.push([propName, attrName]);
        }
        return attrName;
      })]));
    }
  }
  return Cstr;
};
var initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId) => {
  let Cstr;
  if ((hostRef.$flags$ & 32) === 0) {
    hostRef.$flags$ |= 32;
    const bundleId = cmpMeta.$lazyBundleId$;
    if (BUILD.lazyLoad && bundleId) {
      const CstrImport = loadModule(cmpMeta, hostRef, hmrVersionId);
      if (CstrImport && "then" in CstrImport) {
        const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);
        Cstr = await CstrImport;
        endLoad();
      } else {
        Cstr = CstrImport;
      }
      if (!Cstr) {
        throw new Error(`Constructor for "${cmpMeta.$tagName$}#${hostRef.$modeName$}" was not found`);
      }
      if (BUILD.member && !Cstr.isProxied) {
        if (BUILD.watchCallback) {
          cmpMeta.$watchers$ = Cstr.watchers;
        }
        proxyComponent(Cstr, cmpMeta, 2);
        Cstr.isProxied = true;
      }
      const endNewInstance = createTime("createInstance", cmpMeta.$tagName$);
      if (BUILD.member) {
        hostRef.$flags$ |= 8;
      }
      try {
        new Cstr(hostRef);
      } catch (e) {
        consoleError(e, elm);
      }
      if (BUILD.member) {
        hostRef.$flags$ &= ~8;
      }
      if (BUILD.watchCallback) {
        hostRef.$flags$ |= 128;
      }
      endNewInstance();
      fireConnectedCallback(hostRef.$lazyInstance$, elm);
    } else {
      Cstr = elm.constructor;
      const cmpTag = elm.localName;
      customElements.whenDefined(cmpTag).then(() => hostRef.$flags$ |= 128);
    }
    if (BUILD.style && Cstr && Cstr.style) {
      let style;
      if (typeof Cstr.style === "string") {
        style = Cstr.style;
      } else if (BUILD.mode && typeof Cstr.style !== "string") {
        hostRef.$modeName$ = computeMode(elm);
        if (hostRef.$modeName$) {
          style = Cstr.style[hostRef.$modeName$];
        }
        if (BUILD.hydrateServerSide && hostRef.$modeName$) {
          elm.setAttribute("s-mode", hostRef.$modeName$);
        }
      }
      const scopeId2 = getScopeId(cmpMeta, hostRef.$modeName$);
      if (!styles.has(scopeId2)) {
        const endRegisterStyles = createTime("registerStyles", cmpMeta.$tagName$);
        if (BUILD.hydrateServerSide && BUILD.shadowDom && cmpMeta.$flags$ & 128) {
          style = scopeCss(style, scopeId2, true);
        }
        registerStyle(scopeId2, style, !!(cmpMeta.$flags$ & 1));
        endRegisterStyles();
      }
    }
  }
  const ancestorComponent = hostRef.$ancestorComponent$;
  const schedule = () => scheduleUpdate(hostRef, true);
  if (BUILD.asyncLoading && ancestorComponent && ancestorComponent["s-rc"]) {
    ancestorComponent["s-rc"].push(schedule);
  } else {
    schedule();
  }
};
var fireConnectedCallback = (instance, elm) => {
  if (BUILD.lazyLoad) {
    safeCall(instance, "connectedCallback", void 0, elm);
  }
};
var connectedCallback = elm => {
  if ((plt.$flags$ & 1) === 0) {
    const hostRef = getHostRef(elm);
    const cmpMeta = hostRef.$cmpMeta$;
    const endConnected = createTime("connectedCallback", cmpMeta.$tagName$);
    if (BUILD.hostListenerTargetParent) {
      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);
    }
    if (!(hostRef.$flags$ & 1)) {
      hostRef.$flags$ |= 1;
      let hostId;
      if (BUILD.hydrateClientSide) {
        hostId = elm.getAttribute(HYDRATE_ID);
        if (hostId) {
          if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1) {
            const scopeId2 = BUILD.mode ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute("s-mode")) : addStyle(elm.shadowRoot, cmpMeta);
            elm.classList.remove(scopeId2 + "-h", scopeId2 + "-s");
          } else if (BUILD.scoped && cmpMeta.$flags$ & 2) {
            const scopeId2 = getScopeId(cmpMeta, BUILD.mode ? elm.getAttribute("s-mode") : void 0);
            elm["s-sc"] = scopeId2;
          }
          initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);
        }
      }
      if (BUILD.slotRelocation && !hostId) {
        if (BUILD.hydrateServerSide || (BUILD.slot || BUILD.shadowDom) && cmpMeta.$flags$ & (4 | 8)) {
          setContentReference(elm);
        }
      }
      if (BUILD.asyncLoading) {
        let ancestorComponent = elm;
        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {
          if (BUILD.hydrateClientSide && ancestorComponent.nodeType === 1 && ancestorComponent.hasAttribute("s-id") && ancestorComponent["s-p"] || ancestorComponent["s-p"]) {
            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);
            break;
          }
        }
      }
      if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {
        Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {
          if (memberFlags & 31 && elm.hasOwnProperty(memberName)) {
            const value = elm[memberName];
            delete elm[memberName];
            elm[memberName] = value;
          }
        });
      }
      if (BUILD.initializeNextTick) {
        nextTick(() => initializeComponent(elm, hostRef, cmpMeta));
      } else {
        initializeComponent(elm, hostRef, cmpMeta);
      }
    } else {
      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);
      if (hostRef == null ? void 0 : hostRef.$lazyInstance$) {
        fireConnectedCallback(hostRef.$lazyInstance$, elm);
      } else if (hostRef == null ? void 0 : hostRef.$onReadyPromise$) {
        hostRef.$onReadyPromise$.then(() => fireConnectedCallback(hostRef.$lazyInstance$, elm));
      }
    }
    endConnected();
  }
};
var setContentReference = elm => {
  if (!win.document) {
    return;
  }
  const contentRefElm = elm["s-cr"] = win.document.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : "");
  contentRefElm["s-cn"] = true;
  insertBefore(elm, contentRefElm, elm.firstChild);
};
var disconnectInstance = (instance, elm) => {
  if (BUILD.lazyLoad) {
    safeCall(instance, "disconnectedCallback", void 0, elm || instance);
  }
};
var disconnectedCallback = async elm => {
  if ((plt.$flags$ & 1) === 0) {
    const hostRef = getHostRef(elm);
    if (BUILD.hostListener) {
      if (hostRef.$rmListeners$) {
        hostRef.$rmListeners$.map(rmListener => rmListener());
        hostRef.$rmListeners$ = void 0;
      }
    }
    if (!BUILD.lazyLoad) {
      disconnectInstance(elm);
    } else if (hostRef == null ? void 0 : hostRef.$lazyInstance$) {
      disconnectInstance(hostRef.$lazyInstance$, elm);
    } else if (hostRef == null ? void 0 : hostRef.$onReadyPromise$) {
      hostRef.$onReadyPromise$.then(() => disconnectInstance(hostRef.$lazyInstance$, elm));
    }
  }
  if (rootAppliedStyles.has(elm)) {
    rootAppliedStyles.delete(elm);
  }
  if (elm.shadowRoot && rootAppliedStyles.has(elm.shadowRoot)) {
    rootAppliedStyles.delete(elm.shadowRoot);
  }
};
var defineCustomElement = (Cstr, compactMeta) => {
  customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));
};
var proxyCustomElement = (Cstr, compactMeta) => {
  const cmpMeta = {
    $flags$: compactMeta[0],
    $tagName$: compactMeta[1]
  };
  if (BUILD.member) {
    cmpMeta.$members$ = compactMeta[2];
  }
  if (BUILD.hostListener) {
    cmpMeta.$listeners$ = compactMeta[3];
  }
  if (BUILD.watchCallback) {
    cmpMeta.$watchers$ = Cstr.$watchers$;
  }
  if (BUILD.reflect) {
    cmpMeta.$attrsToReflect$ = [];
  }
  if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1) {
    cmpMeta.$flags$ |= 8;
  }
  if (BUILD.experimentalSlotFixes) {
    if (BUILD.scoped && cmpMeta.$flags$ & 2) {
      patchPseudoShadowDom(Cstr.prototype);
    }
  } else {
    if (BUILD.slotChildNodesFix) {
      patchChildSlotNodes(Cstr.prototype);
    }
    if (BUILD.cloneNodeFix) {
      patchCloneNode(Cstr.prototype);
    }
    if (BUILD.appendChildSlotFix) {
      patchSlotAppendChild(Cstr.prototype);
    }
    if (BUILD.scopedSlotTextContentFix && cmpMeta.$flags$ & 2) {
      patchTextContent(Cstr.prototype);
    }
  }
  if (BUILD.hydrateClientSide && BUILD.shadowDom) {
    hydrateScopedToShadow();
  }
  const originalConnectedCallback = Cstr.prototype.connectedCallback;
  const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;
  Object.assign(Cstr.prototype, {
    __hasHostListenerAttached: false,
    __registerHost() {
      registerHost(this, cmpMeta);
    },
    connectedCallback() {
      if (!this.__hasHostListenerAttached) {
        const hostRef = getHostRef(this);
        addHostEventListeners(this, hostRef, cmpMeta.$listeners$, false);
        this.__hasHostListenerAttached = true;
      }
      connectedCallback(this);
      if (originalConnectedCallback) {
        originalConnectedCallback.call(this);
      }
    },
    disconnectedCallback() {
      disconnectedCallback(this);
      if (originalDisconnectedCallback) {
        originalDisconnectedCallback.call(this);
      }
    },
    __attachShadow() {
      if (supportsShadow) {
        if (!this.shadowRoot) {
          if (BUILD.shadowDelegatesFocus) {
            this.attachShadow({
              mode: "open",
              delegatesFocus: !!(cmpMeta.$flags$ & 16)
            });
          } else {
            this.attachShadow({
              mode: "open"
            });
          }
        } else {
          if (this.shadowRoot.mode !== "open") {
            throw new Error(`Unable to re-use existing shadow root for ${cmpMeta.$tagName$}! Mode is set to ${this.shadowRoot.mode} but Stencil only supports open shadow roots.`);
          }
        }
      } else {
        this.shadowRoot = this;
      }
    }
  });
  Cstr.is = cmpMeta.$tagName$;
  return proxyComponent(Cstr, cmpMeta, 1 | 2);
};
var forceModeUpdate = elm => {
  if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {
    const mode = computeMode(elm);
    const hostRef = getHostRef(elm);
    if (hostRef.$modeName$ !== mode) {
      const cmpMeta = hostRef.$cmpMeta$;
      const oldScopeId = elm["s-sc"];
      const scopeId2 = getScopeId(cmpMeta, mode);
      const style = elm.constructor.style[mode];
      const flags = cmpMeta.$flags$;
      if (style) {
        if (!styles.has(scopeId2)) {
          registerStyle(scopeId2, style, !!(flags & 1));
        }
        hostRef.$modeName$ = mode;
        elm.classList.remove(oldScopeId + "-h", oldScopeId + "-s");
        attachStyles(hostRef);
        forceUpdate(elm);
      }
    }
  }
};
var hmrStart = (hostElement, cmpMeta, hmrVersionId) => {
  const hostRef = getHostRef(hostElement);
  hostRef.$flags$ = 1;
  initializeComponent(hostElement, hostRef, cmpMeta, hmrVersionId);
};
var bootstrapLazy = (lazyBundles, options = {}) => {
  var _a;
  if (BUILD.profile && performance.mark) {
    performance.mark("st:app:start");
  }
  installDevTools();
  if (!win.document) {
    console.warn("Stencil: No document found. Skipping bootstrapping lazy components.");
    return;
  }
  const endBootstrap = createTime("bootstrapLazy");
  const cmpTags = [];
  const exclude = options.exclude || [];
  const customElements2 = win.customElements;
  const head = win.document.head;
  const metaCharset = head.querySelector("meta[charset]");
  const dataStyles = win.document.createElement("style");
  const deferredConnectedCallbacks = [];
  let appLoadFallback;
  let isBootstrapping = true;
  Object.assign(plt, options);
  plt.$resourcesUrl$ = new URL(options.resourcesUrl || "./", win.document.baseURI).href;
  if (BUILD.asyncQueue) {
    if (options.syncQueue) {
      plt.$flags$ |= 4;
    }
  }
  if (BUILD.hydrateClientSide) {
    plt.$flags$ |= 2;
  }
  if (BUILD.hydrateClientSide && BUILD.shadowDom) {
    hydrateScopedToShadow();
  }
  let hasSlotRelocation = false;
  lazyBundles.map(lazyBundle => {
    lazyBundle[1].map(compactMeta => {
      var _a2;
      const cmpMeta = {
        $flags$: compactMeta[0],
        $tagName$: compactMeta[1],
        $members$: compactMeta[2],
        $listeners$: compactMeta[3]
      };
      if (cmpMeta.$flags$ & 4) {
        hasSlotRelocation = true;
      }
      if (BUILD.member) {
        cmpMeta.$members$ = compactMeta[2];
      }
      if (BUILD.hostListener) {
        cmpMeta.$listeners$ = compactMeta[3];
      }
      if (BUILD.reflect) {
        cmpMeta.$attrsToReflect$ = [];
      }
      if (BUILD.watchCallback) {
        cmpMeta.$watchers$ = (_a2 = compactMeta[4]) != null ? _a2 : {};
      }
      if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1) {
        cmpMeta.$flags$ |= 8;
      }
      const tagName = BUILD.transformTagName && options.transformTagName ? options.transformTagName(cmpMeta.$tagName$) : cmpMeta.$tagName$;
      const HostElement = class extends HTMLElement {
        constructor(self) {
          super(self);
          this.hasRegisteredEventListeners = false;
          self = this;
          registerHost(self, cmpMeta);
          if (BUILD.shadowDom && cmpMeta.$flags$ & 1) {
            if (supportsShadow) {
              if (!self.shadowRoot) {
                if (BUILD.shadowDelegatesFocus) {
                  self.attachShadow({
                    mode: "open",
                    delegatesFocus: !!(cmpMeta.$flags$ & 16)
                  });
                } else {
                  self.attachShadow({
                    mode: "open"
                  });
                }
              } else {
                if (self.shadowRoot.mode !== "open") {
                  throw new Error(`Unable to re-use existing shadow root for ${cmpMeta.$tagName$}! Mode is set to ${self.shadowRoot.mode} but Stencil only supports open shadow roots.`);
                }
              }
            } else if (!BUILD.hydrateServerSide && !("shadowRoot" in self)) {
              self.shadowRoot = self;
            }
          }
        }
        connectedCallback() {
          const hostRef = getHostRef(this);
          if (!this.hasRegisteredEventListeners) {
            this.hasRegisteredEventListeners = true;
            addHostEventListeners(this, hostRef, cmpMeta.$listeners$, false);
          }
          if (appLoadFallback) {
            clearTimeout(appLoadFallback);
            appLoadFallback = null;
          }
          if (isBootstrapping) {
            deferredConnectedCallbacks.push(this);
          } else {
            plt.jmp(() => connectedCallback(this));
          }
        }
        disconnectedCallback() {
          plt.jmp(() => disconnectedCallback(this));
          plt.raf(() => {
            var _a3;
            const hostRef = getHostRef(this);
            const i2 = deferredConnectedCallbacks.findIndex(host => host === this);
            if (i2 > -1) {
              deferredConnectedCallbacks.splice(i2, 1);
            }
            if (((_a3 = hostRef == null ? void 0 : hostRef.$vnode$) == null ? void 0 : _a3.$elm$) instanceof Node && !hostRef.$vnode$.$elm$.isConnected) {
              delete hostRef.$vnode$.$elm$;
            }
          });
        }
        componentOnReady() {
          return getHostRef(this).$onReadyPromise$;
        }
      };
      if (BUILD.experimentalSlotFixes) {
        if (BUILD.scoped && cmpMeta.$flags$ & 2) {
          patchPseudoShadowDom(HostElement.prototype);
        }
      } else {
        if (BUILD.slotChildNodesFix) {
          patchChildSlotNodes(HostElement.prototype);
        }
        if (BUILD.cloneNodeFix) {
          patchCloneNode(HostElement.prototype);
        }
        if (BUILD.appendChildSlotFix) {
          patchSlotAppendChild(HostElement.prototype);
        }
        if (BUILD.scopedSlotTextContentFix && cmpMeta.$flags$ & 2) {
          patchTextContent(HostElement.prototype);
        }
      }
      if (BUILD.formAssociated && cmpMeta.$flags$ & 64) {
        HostElement.formAssociated = true;
      }
      if (BUILD.hotModuleReplacement) {
        HostElement.prototype["s-hmr"] = function (hmrVersionId) {
          hmrStart(this, cmpMeta, hmrVersionId);
        };
      }
      cmpMeta.$lazyBundleId$ = lazyBundle[0];
      if (!exclude.includes(tagName) && !customElements2.get(tagName)) {
        cmpTags.push(tagName);
        customElements2.define(tagName, proxyComponent(HostElement, cmpMeta, 1));
      }
    });
  });
  if (cmpTags.length > 0) {
    if (hasSlotRelocation) {
      dataStyles.textContent += SLOT_FB_CSS;
    }
    if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {
      dataStyles.textContent += cmpTags.sort() + HYDRATED_CSS;
    }
    if (dataStyles.innerHTML.length) {
      dataStyles.setAttribute("data-styles", "");
      const nonce = (_a = plt.$nonce$) != null ? _a : queryNonceMetaTagContent(win.document);
      if (nonce != null) {
        dataStyles.setAttribute("nonce", nonce);
      }
      head.insertBefore(dataStyles, metaCharset ? metaCharset.nextSibling : head.firstChild);
    }
  }
  isBootstrapping = false;
  if (deferredConnectedCallbacks.length) {
    deferredConnectedCallbacks.map(host => host.connectedCallback());
  } else {
    if (BUILD.profile) {
      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30, "timeout"));
    } else {
      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));
    }
  }
  endBootstrap();
};
var Fragment = (_, children) => children;
var addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {
  if (BUILD.hostListener && listeners && win.document) {
    if (BUILD.hostListenerTargetParent) {
      if (attachParentListeners) {
        listeners = listeners.filter(([flags]) => flags & 32);
      } else {
        listeners = listeners.filter(([flags]) => !(flags & 32));
      }
    }
    listeners.map(([flags, name, method]) => {
      const target = BUILD.hostListenerTarget ? getHostListenerTarget(win.document, elm, flags) : elm;
      const handler = hostListenerProxy(hostRef, method);
      const opts = hostListenerOpts(flags);
      plt.ael(target, name, handler, opts);
      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));
    });
  }
};
var hostListenerProxy = (hostRef, methodName) => ev => {
  var _a;
  try {
    if (BUILD.lazyLoad) {
      if (hostRef.$flags$ & 256) {
        (_a = hostRef.$lazyInstance$) == null ? void 0 : _a[methodName](ev);
      } else {
        (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);
      }
    } else {
      hostRef.$hostElement$[methodName](ev);
    }
  } catch (e) {
    consoleError(e, hostRef.$hostElement$);
  }
};
var getHostListenerTarget = (doc, elm, flags) => {
  if (BUILD.hostListenerTargetDocument && flags & 4) {
    return doc;
  }
  if (BUILD.hostListenerTargetWindow && flags & 8) {
    return win;
  }
  if (BUILD.hostListenerTargetBody && flags & 16) {
    return doc.body;
  }
  if (BUILD.hostListenerTargetParent && flags & 32 && elm.parentElement) {
    return elm.parentElement;
  }
  return elm;
};
var hostListenerOpts = flags => supportsListenerOptions ? {
  passive: (flags & 1) !== 0,
  capture: (flags & 2) !== 0
} : (flags & 2) !== 0;
var setNonce = nonce => plt.$nonce$ = nonce;
var setPlatformOptions = opts => Object.assign(plt, opts);
var insertVdomAnnotations = (doc, staticComponents) => {
  if (doc != null) {
    const docData = STENCIL_DOC_DATA in doc ? doc[STENCIL_DOC_DATA] : {
      ...DEFAULT_DOC_DATA
    };
    docData.staticComponents = new Set(staticComponents);
    const orgLocationNodes = [];
    parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);
    orgLocationNodes.forEach(orgLocationNode => {
      var _a;
      if (orgLocationNode != null && orgLocationNode["s-nr"]) {
        const nodeRef = orgLocationNode["s-nr"];
        let hostId = nodeRef["s-host-id"];
        let nodeId = nodeRef["s-node-id"];
        let childId = `${hostId}.${nodeId}`;
        if (hostId == null) {
          hostId = 0;
          docData.rootLevelIds++;
          nodeId = docData.rootLevelIds;
          childId = `${hostId}.${nodeId}`;
          if (nodeRef.nodeType === 1) {
            nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);
            if (typeof nodeRef["s-sn"] === "string" && !nodeRef.getAttribute("slot")) {
              nodeRef.setAttribute("s-sn", nodeRef["s-sn"]);
            }
          } else if (nodeRef.nodeType === 3) {
            if (hostId === 0) {
              const textContent = (_a = nodeRef.nodeValue) == null ? void 0 : _a.trim();
              if (textContent === "") {
                orgLocationNode.remove();
                return;
              }
            }
            const commentBeforeTextNode = doc.createComment(childId);
            commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;
            insertBefore(nodeRef.parentNode, commentBeforeTextNode, nodeRef);
          } else if (nodeRef.nodeType === 8) {
            const commentBeforeTextNode = doc.createComment(childId);
            commentBeforeTextNode.nodeValue = `${COMMENT_NODE_ID}.${childId}`;
            nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);
          }
        }
        let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;
        const orgLocationParentNode = orgLocationNode.parentElement;
        if (orgLocationParentNode) {
          if (orgLocationParentNode["s-en"] === "") {
            orgLocationNodeId += `.`;
          } else if (orgLocationParentNode["s-en"] === "c") {
            orgLocationNodeId += `.c`;
          }
        }
        orgLocationNode.nodeValue = orgLocationNodeId;
      }
    });
  }
};
var parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {
  var _a;
  if (node == null) {
    return;
  }
  if (node["s-nr"] != null) {
    orgLocationNodes.push(node);
  }
  if (node.nodeType === 1) {
    const childNodes = [...Array.from(node.childNodes), ...Array.from(((_a = node.shadowRoot) == null ? void 0 : _a.childNodes) || [])];
    childNodes.forEach(childNode => {
      const hostRef = getHostRef(childNode);
      if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {
        const cmpData = {
          nodeIds: 0
        };
        insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);
      }
      parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);
    });
  }
};
var insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {
  if (vnode != null) {
    const hostId = ++docData.hostIds;
    hostElm.setAttribute(HYDRATE_ID, hostId);
    if (hostElm["s-cr"] != null) {
      hostElm["s-cr"].nodeValue = `${CONTENT_REF_ID}.${hostId}`;
    }
    if (vnode.$children$ != null) {
      const depth = 0;
      vnode.$children$.forEach((vnodeChild, index) => {
        insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);
      });
    }
    if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute(HYDRATE_CHILD_ID)) {
      const parent = hostElm.parentElement;
      if (parent && parent.childNodes) {
        const parentChildNodes = Array.from(parent.childNodes);
        const comment = parentChildNodes.find(node => node.nodeType === 8 && node["s-sr"]);
        if (comment) {
          const index = parentChildNodes.indexOf(hostElm) - 1;
          vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment["s-host-id"]}.${comment["s-node-id"]}.0.${index}`);
        }
      }
    }
  }
};
var insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {
  const childElm = vnodeChild.$elm$;
  if (childElm == null) {
    return;
  }
  const nodeId = cmpData.nodeIds++;
  const childId = `${hostId}.${nodeId}.${depth}.${index}`;
  childElm["s-host-id"] = hostId;
  childElm["s-node-id"] = nodeId;
  if (childElm.nodeType === 1) {
    childElm.setAttribute(HYDRATE_CHILD_ID, childId);
    if (typeof childElm["s-sn"] === "string" && !childElm.getAttribute("slot")) {
      childElm.setAttribute("s-sn", childElm["s-sn"]);
    }
  } else if (childElm.nodeType === 3) {
    const parentNode = childElm.parentNode;
    const nodeName = parentNode == null ? void 0 : parentNode.nodeName;
    if (nodeName !== "STYLE" && nodeName !== "SCRIPT") {
      const textNodeId = `${TEXT_NODE_ID}.${childId}`;
      const commentBeforeTextNode = doc.createComment(textNodeId);
      insertBefore(parentNode, commentBeforeTextNode, childElm);
    }
  } else if (childElm.nodeType === 8) {
    if (childElm["s-sr"]) {
      const slotName = childElm["s-sn"] || "";
      const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;
      childElm.nodeValue = slotNodeId;
    }
  }
  if (vnodeChild.$children$ != null) {
    const childDepth = depth + 1;
    vnodeChild.$children$.forEach((vnode, index2) => {
      insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index2);
    });
  }
};


/***/ }),

/***/ "./src/components/index.ts":
/*!*********************************!*\
  !*** ./src/components/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DtpcButton: () => (/* reexport safe */ _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__.DtpcButton),
/* harmony export */   DtpcMuteButton: () => (/* reexport safe */ _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__.DtpcMuteButton),
/* harmony export */   DtpcPlayButton: () => (/* reexport safe */ _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__.DtpcPlayButton),
/* harmony export */   DtpcPlayer: () => (/* reexport safe */ _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__.DtpcPlayer),
/* harmony export */   DtpcProgressBar: () => (/* reexport safe */ _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__.DtpcProgressBar),
/* harmony export */   DtpcSlider: () => (/* reexport safe */ _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__.DtpcSlider),
/* harmony export */   DtpcTimeCurrent: () => (/* reexport safe */ _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__.DtpcTimeCurrent),
/* harmony export */   DtpcTimeDisplay: () => (/* reexport safe */ _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__.DtpcTimeDisplay),
/* harmony export */   DtpcTimeDuration: () => (/* reexport safe */ _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__.DtpcTimeDuration),
/* harmony export */   DtpcVolumeSlider: () => (/* reexport safe */ _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__.DtpcVolumeSlider),
/* harmony export */   IconPause: () => (/* reexport safe */ _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__.IconPause),
/* harmony export */   IconPlay: () => (/* reexport safe */ _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__.IconPlay),
/* harmony export */   IconVolume: () => (/* reexport safe */ _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__.IconVolume)
/* harmony export */ });
/* harmony import */ var _stencil_generated_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stencil-generated/components */ "./src/components/stencil-generated/components.ts");


/***/ }),

/***/ "./src/components/stencil-generated/components.ts":
/*!********************************************************!*\
  !*** ./src/components/stencil-generated/components.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DtpcButton: () => (/* binding */ DtpcButton),
/* harmony export */   DtpcMuteButton: () => (/* binding */ DtpcMuteButton),
/* harmony export */   DtpcPlayButton: () => (/* binding */ DtpcPlayButton),
/* harmony export */   DtpcPlayer: () => (/* binding */ DtpcPlayer),
/* harmony export */   DtpcProgressBar: () => (/* binding */ DtpcProgressBar),
/* harmony export */   DtpcSlider: () => (/* binding */ DtpcSlider),
/* harmony export */   DtpcTimeCurrent: () => (/* binding */ DtpcTimeCurrent),
/* harmony export */   DtpcTimeDisplay: () => (/* binding */ DtpcTimeDisplay),
/* harmony export */   DtpcTimeDuration: () => (/* binding */ DtpcTimeDuration),
/* harmony export */   DtpcVolumeSlider: () => (/* binding */ DtpcVolumeSlider),
/* harmony export */   IconPause: () => (/* binding */ IconPause),
/* harmony export */   IconPlay: () => (/* binding */ IconPlay),
/* harmony export */   IconVolume: () => (/* binding */ IconVolume)
/* harmony export */ });
/* harmony import */ var _stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stencil/react-output-target/runtime */ "../node_modules/@stencil/react-output-target/dist/react.js");
/* harmony import */ var dovetail_podcasts_player_web_components_dist_components_dtpc_button_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/dist/components/dtpc-button.js */ "../web-components/dist/components/dtpc-button.js");
/* harmony import */ var dovetail_podcasts_player_web_components_dist_components_dtpc_mute_button_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/dist/components/dtpc-mute-button.js */ "../web-components/dist/components/dtpc-mute-button.js");
/* harmony import */ var dovetail_podcasts_player_web_components_dist_components_dtpc_play_button_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/dist/components/dtpc-play-button.js */ "../web-components/dist/components/dtpc-play-button.js");
/* harmony import */ var dovetail_podcasts_player_web_components_dist_components_dtpc_player_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/dist/components/dtpc-player.js */ "../web-components/dist/components/dtpc-player.js");
/* harmony import */ var dovetail_podcasts_player_web_components_dist_components_dtpc_progress_bar_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/dist/components/dtpc-progress-bar.js */ "../web-components/dist/components/dtpc-progress-bar.js");
/* harmony import */ var dovetail_podcasts_player_web_components_dist_components_dtpc_slider_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/dist/components/dtpc-slider.js */ "../web-components/dist/components/dtpc-slider.js");
/* harmony import */ var dovetail_podcasts_player_web_components_dist_components_dtpc_time_current_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/dist/components/dtpc-time-current.js */ "../web-components/dist/components/dtpc-time-current.js");
/* harmony import */ var dovetail_podcasts_player_web_components_dist_components_dtpc_time_display_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/dist/components/dtpc-time-display.js */ "../web-components/dist/components/dtpc-time-display.js");
/* harmony import */ var dovetail_podcasts_player_web_components_dist_components_dtpc_time_duration_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/dist/components/dtpc-time-duration.js */ "../web-components/dist/components/dtpc-time-duration.js");
/* harmony import */ var dovetail_podcasts_player_web_components_dist_components_dtpc_volume_slider_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/dist/components/dtpc-volume-slider.js */ "../web-components/dist/components/dtpc-volume-slider.js");
/* harmony import */ var dovetail_podcasts_player_web_components_dist_components_icon_pause_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/dist/components/icon-pause.js */ "../web-components/dist/components/icon-pause.js");
/* harmony import */ var dovetail_podcasts_player_web_components_dist_components_icon_play_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/dist/components/icon-play.js */ "../web-components/dist/components/icon-play.js");
/* harmony import */ var dovetail_podcasts_player_web_components_dist_components_icon_volume_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/dist/components/icon-volume.js */ "../web-components/dist/components/icon-volume.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_14__);
'use client';
















const DtpcButton = (0,_stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__.createComponent)({
  tagName: 'dtpc-button',
  elementClass: dovetail_podcasts_player_web_components_dist_components_dtpc_button_js__WEBPACK_IMPORTED_MODULE_1__.DtpcButton,
  react: (react__WEBPACK_IMPORTED_MODULE_14___default()),
  events: {},
  defineCustomElement: dovetail_podcasts_player_web_components_dist_components_dtpc_button_js__WEBPACK_IMPORTED_MODULE_1__.defineCustomElement
});
const DtpcMuteButton = (0,_stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__.createComponent)({
  tagName: 'dtpc-mute-button',
  elementClass: dovetail_podcasts_player_web_components_dist_components_dtpc_mute_button_js__WEBPACK_IMPORTED_MODULE_2__.DtpcMuteButton,
  react: (react__WEBPACK_IMPORTED_MODULE_14___default()),
  events: {
    onDtpcControlInit: 'dtpc-control-init'
  },
  defineCustomElement: dovetail_podcasts_player_web_components_dist_components_dtpc_mute_button_js__WEBPACK_IMPORTED_MODULE_2__.defineCustomElement
});
const DtpcPlayButton = (0,_stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__.createComponent)({
  tagName: 'dtpc-play-button',
  elementClass: dovetail_podcasts_player_web_components_dist_components_dtpc_play_button_js__WEBPACK_IMPORTED_MODULE_3__.DtpcPlayButton,
  react: (react__WEBPACK_IMPORTED_MODULE_14___default()),
  events: {
    onDtpcControlInit: 'dtpc-control-init',
    onAudioTogglePaused: 'audio-toggle-paused'
  },
  defineCustomElement: dovetail_podcasts_player_web_components_dist_components_dtpc_play_button_js__WEBPACK_IMPORTED_MODULE_3__.defineCustomElement
});
const DtpcPlayer = (0,_stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__.createComponent)({
  tagName: 'dtpc-player',
  elementClass: dovetail_podcasts_player_web_components_dist_components_dtpc_player_js__WEBPACK_IMPORTED_MODULE_4__.DtpcPlayer,
  react: (react__WEBPACK_IMPORTED_MODULE_14___default()),
  events: {},
  defineCustomElement: dovetail_podcasts_player_web_components_dist_components_dtpc_player_js__WEBPACK_IMPORTED_MODULE_4__.defineCustomElement
});
const DtpcProgressBar = (0,_stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__.createComponent)({
  tagName: 'dtpc-progress-bar',
  elementClass: dovetail_podcasts_player_web_components_dist_components_dtpc_progress_bar_js__WEBPACK_IMPORTED_MODULE_5__.DtpcProgressBar,
  react: (react__WEBPACK_IMPORTED_MODULE_14___default()),
  events: {
    onDtpcControlInit: 'dtpc-control-init'
  },
  defineCustomElement: dovetail_podcasts_player_web_components_dist_components_dtpc_progress_bar_js__WEBPACK_IMPORTED_MODULE_5__.defineCustomElement
});
const DtpcSlider = (0,_stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__.createComponent)({
  tagName: 'dtpc-slider',
  elementClass: dovetail_podcasts_player_web_components_dist_components_dtpc_slider_js__WEBPACK_IMPORTED_MODULE_6__.DtpcSlider,
  react: (react__WEBPACK_IMPORTED_MODULE_14___default()),
  events: {
    onSliderChange: 'slider-change',
    onSliderInput: 'slider-input'
  },
  defineCustomElement: dovetail_podcasts_player_web_components_dist_components_dtpc_slider_js__WEBPACK_IMPORTED_MODULE_6__.defineCustomElement
});
const DtpcTimeCurrent = (0,_stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__.createComponent)({
  tagName: 'dtpc-time-current',
  elementClass: dovetail_podcasts_player_web_components_dist_components_dtpc_time_current_js__WEBPACK_IMPORTED_MODULE_7__.DtpcTimeCurrent,
  react: (react__WEBPACK_IMPORTED_MODULE_14___default()),
  events: {
    onDtpcControlInit: 'dtpc-control-init'
  },
  defineCustomElement: dovetail_podcasts_player_web_components_dist_components_dtpc_time_current_js__WEBPACK_IMPORTED_MODULE_7__.defineCustomElement
});
const DtpcTimeDisplay = (0,_stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__.createComponent)({
  tagName: 'dtpc-time-display',
  elementClass: dovetail_podcasts_player_web_components_dist_components_dtpc_time_display_js__WEBPACK_IMPORTED_MODULE_8__.DtpcTimeDisplay,
  react: (react__WEBPACK_IMPORTED_MODULE_14___default()),
  events: {},
  defineCustomElement: dovetail_podcasts_player_web_components_dist_components_dtpc_time_display_js__WEBPACK_IMPORTED_MODULE_8__.defineCustomElement
});
const DtpcTimeDuration = (0,_stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__.createComponent)({
  tagName: 'dtpc-time-duration',
  elementClass: dovetail_podcasts_player_web_components_dist_components_dtpc_time_duration_js__WEBPACK_IMPORTED_MODULE_9__.DtpcTimeDuration,
  react: (react__WEBPACK_IMPORTED_MODULE_14___default()),
  events: {
    onDtpcControlInit: 'dtpc-control-init'
  },
  defineCustomElement: dovetail_podcasts_player_web_components_dist_components_dtpc_time_duration_js__WEBPACK_IMPORTED_MODULE_9__.defineCustomElement
});
const DtpcVolumeSlider = (0,_stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__.createComponent)({
  tagName: 'dtpc-volume-slider',
  elementClass: dovetail_podcasts_player_web_components_dist_components_dtpc_volume_slider_js__WEBPACK_IMPORTED_MODULE_10__.DtpcVolumeSlider,
  react: (react__WEBPACK_IMPORTED_MODULE_14___default()),
  events: {
    onDtpcControlInit: 'dtpc-control-init'
  },
  defineCustomElement: dovetail_podcasts_player_web_components_dist_components_dtpc_volume_slider_js__WEBPACK_IMPORTED_MODULE_10__.defineCustomElement
});
const IconPause = (0,_stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__.createComponent)({
  tagName: 'icon-pause',
  elementClass: dovetail_podcasts_player_web_components_dist_components_icon_pause_js__WEBPACK_IMPORTED_MODULE_11__.IconPause,
  react: (react__WEBPACK_IMPORTED_MODULE_14___default()),
  events: {},
  defineCustomElement: dovetail_podcasts_player_web_components_dist_components_icon_pause_js__WEBPACK_IMPORTED_MODULE_11__.defineCustomElement
});
const IconPlay = (0,_stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__.createComponent)({
  tagName: 'icon-play',
  elementClass: dovetail_podcasts_player_web_components_dist_components_icon_play_js__WEBPACK_IMPORTED_MODULE_12__.IconPlay,
  react: (react__WEBPACK_IMPORTED_MODULE_14___default()),
  events: {},
  defineCustomElement: dovetail_podcasts_player_web_components_dist_components_icon_play_js__WEBPACK_IMPORTED_MODULE_12__.defineCustomElement
});
const IconVolume = (0,_stencil_react_output_target_runtime__WEBPACK_IMPORTED_MODULE_0__.createComponent)({
  tagName: 'icon-volume',
  elementClass: dovetail_podcasts_player_web_components_dist_components_icon_volume_js__WEBPACK_IMPORTED_MODULE_13__.IconVolume,
  react: (react__WEBPACK_IMPORTED_MODULE_14___default()),
  events: {},
  defineCustomElement: dovetail_podcasts_player_web_components_dist_components_icon_volume_js__WEBPACK_IMPORTED_MODULE_13__.defineCustomElement
});

/***/ }),

/***/ "./src/player/block.json":
/*!*******************************!*\
  !*** ./src/player/block.json ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"$schema":"https://schemas.wp.org/trunk/block.json","apiVersion":3,"name":"dovetail-podcasts/player","version":"0.1.0","title":"Dovetail Podcasts Player","category":"media","icon":"controls-play","description":"Customizable player for podcast episodes.","allowedBlocks":["dovetail-podcasts/play-button"],"example":{},"supports":{"html":false,"background":{"backgroundImage":true,"backgroundSize":true},"color":{"text":true,"link":false,"background":true,"gradients":true,"enableContrastChecker":true},"spacing":{"margin":true,"padding":true,"blockGap":true}},"textdomain":"dovetail-podcasts","editorScript":"file:./index.js","editorStyle":"file:./index.css","style":"file:./style-index.css","render":"file:./render.php","viewScript":"file:./view.js","attributes":{"post_id":{"type":"integer"},"post_type":{"type":"string"},"src":{"type":"string"},"duration":{"type":"number"}}}');

/***/ }),

/***/ "./src/player/edit.js":
/*!****************************!*\
  !*** ./src/player/edit.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Edit)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "react/jsx-runtime");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _wordpress_i18n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wordpress/i18n */ "@wordpress/i18n");
/* harmony import */ var _wordpress_i18n__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_wordpress_i18n__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _wordpress_block_editor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wordpress/block-editor */ "@wordpress/block-editor");
/* harmony import */ var _wordpress_block_editor__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_wordpress_block_editor__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _editor_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editor.scss */ "./src/player/editor.scss");
/* harmony import */ var _wordpress_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wordpress/data */ "@wordpress/data");
/* harmony import */ var _wordpress_data__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_wordpress_data__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components */ "./src/components/index.ts");
/* harmony import */ var dovetail_podcasts_player_web_components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! dovetail-podcasts-player-web-components */ "../web-components/dist/dovetail-podcasts-player-web-components/dovetail-podcasts-player-web-components.esm.js");







function Edit(props) {
  const blockProps = (0,_wordpress_block_editor__WEBPACK_IMPORTED_MODULE_2__.useBlockProps)();
  const {
    attributes,
    context
  } = props;
  const {
    post_id,
    post_type,
    src,
    duration
  } = attributes;
  const meta = (0,_wordpress_data__WEBPACK_IMPORTED_MODULE_4__.useSelect)(select => {
    const {
      getEditedEntityRecord
    } = select("core");
    const record = getEditedEntityRecord("postType", post_type || context.postType, post_id || context.postId);
    return record.meta?._dovetail_podcasts_episode;
  });
  const audioSrc = src || meta?.dovetail?.enclosure?.href;
  const audioDuration = duration || meta?.dovetail?.enclosure?.duration;
  console.log("player.edit: blockProps", blockProps);
  console.log("player.edit: props", props);
  console.log("player.edit: meta", meta);
  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components__WEBPACK_IMPORTED_MODULE_5__.DtpcPlayer, {
    ...blockProps,
    src: audioSrc,
    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_wordpress_block_editor__WEBPACK_IMPORTED_MODULE_2__.InnerBlocks, {})
  });
}

/***/ }),

/***/ "./src/player/editor.scss":
/*!********************************!*\
  !*** ./src/player/editor.scss ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/player/index.js":
/*!*****************************!*\
  !*** ./src/player/index.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "react/jsx-runtime");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _wordpress_blocks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wordpress/blocks */ "@wordpress/blocks");
/* harmony import */ var _wordpress_blocks__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_wordpress_blocks__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./style.scss */ "./src/player/style.scss");
/* harmony import */ var _edit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./edit */ "./src/player/edit.js");
/* harmony import */ var _save__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./save */ "./src/player/save.js");
/* harmony import */ var _block_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./block.json */ "./src/player/block.json");
/* harmony import */ var dovetail_podcasts_player_web_components_components_dtpc_player__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! dovetail-podcasts-player-web-components/components/dtpc-player */ "../web-components/dist/components/dtpc-player.js");







(0,_wordpress_blocks__WEBPACK_IMPORTED_MODULE_1__.registerBlockType)(_block_json__WEBPACK_IMPORTED_MODULE_5__.name, {
  usesContext: ["postId", "postType"],
  edit: _edit__WEBPACK_IMPORTED_MODULE_3__["default"],
  save: _save__WEBPACK_IMPORTED_MODULE_4__["default"],
  icon: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("svg", {
    width: "121",
    height: "121",
    viewBox: "0 0 121 121",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path", {
      d: "M91.0268 60.4631L119.767 31.7232C120.233 31.257 120.496 30.6234 120.496 29.9637C120.496 29.304 120.233 28.6704 119.767 28.2042L92.7864 1.22389C92.3201 0.757069 91.6865 0.494574 91.0268 0.494574C90.3672 0.494574 89.7336 0.757069 89.2673 1.22389L60.5275 29.9637L60.4644 29.9007L31.7246 1.16371C31.2584 0.69689 30.6248 0.434395 29.9651 0.434395C29.3054 0.434395 28.6718 0.69689 28.2056 1.16371L1.22529 28.144C0.758467 28.6103 0.495972 29.2439 0.495972 29.9035C0.495972 30.5632 0.758467 31.1968 1.22529 31.6631L30.0253 60.4631L1.22529 89.2631C0.758467 89.7293 0.495972 90.3629 0.495972 91.0226C0.495972 91.6823 0.758467 92.3158 1.22529 92.7821L28.2056 119.757C28.6718 120.223 29.3054 120.486 29.9651 120.486C30.6248 120.486 31.2584 120.223 31.7246 119.757L52.0537 99.4276C52.0537 99.4276 52.7099 86.9562 38.0664 68.507L60.5218 90.9595L89.2673 119.702C89.7336 120.169 90.3672 120.432 91.0268 120.432C91.6865 120.432 92.3201 120.169 92.7864 119.702L119.767 92.7219C120.233 92.2557 120.496 91.6221 120.496 90.9624C120.496 90.3027 120.233 89.6691 119.767 89.2029L91.0268 60.4631Z",
      fill: "currentColor"
    })
  }),
  variations: [{
    name: "dovetail-podcasts-player--button",
    title: "Dovetail One-Button Player",
    description: "Just the play button.",
    attributes: {
      backgroundColor: "transparent"
    },
    innerBlocks: [["dovetail-podcasts/play-button", {
      style: {
        color: {
          background: "var:preset|color|contrast",
          text: "var:preset|color|base"
        },
        spacing: {
          padding: {
            top: "var:preset|spacing|20",
            bottom: "var:preset|spacing|20",
            left: "var:preset|spacing|20",
            right: "var:preset|spacing|20"
          }
        }
      }
    }]],
    example: {
      innerBlocks: [{
        name: "dovetail-podcasts/play-button",
        attributes: {
          style: {
            color: {
              background: "var:preset|color|contrast",
              text: "var:preset|color|base"
            },
            spacing: {
              padding: {
                top: "var:preset|spacing|20",
                bottom: "var:preset|spacing|20",
                left: "var:preset|spacing|20",
                right: "var:preset|spacing|20"
              }
            }
          }
        }
      }]
    },
    isDefault: true
  }]
});

/***/ }),

/***/ "./src/player/save.js":
/*!****************************!*\
  !*** ./src/player/save.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Save)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "react/jsx-runtime");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _wordpress_i18n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wordpress/i18n */ "@wordpress/i18n");
/* harmony import */ var _wordpress_i18n__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_wordpress_i18n__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _wordpress_block_editor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wordpress/block-editor */ "@wordpress/block-editor");
/* harmony import */ var _wordpress_block_editor__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_wordpress_block_editor__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _editor_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editor.scss */ "./src/player/editor.scss");
/* harmony import */ var _wordpress_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wordpress/data */ "@wordpress/data");
/* harmony import */ var _wordpress_data__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_wordpress_data__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components */ "./src/components/index.ts");






function Save(props) {
  const blockProps = _wordpress_block_editor__WEBPACK_IMPORTED_MODULE_2__.useBlockProps.save();
  const {
    attributes,
    context
  } = props;
  const audioSrc = blockProps.src || attributes?.src;
  console.log("player.save: blockProps", blockProps);
  console.log("player.save: props", props);
  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", {
    ...blockProps,
    src: audioSrc,
    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_wordpress_block_editor__WEBPACK_IMPORTED_MODULE_2__.InnerBlocks.Content, {})
  });
}

/***/ }),

/***/ "./src/player/style.scss":
/*!*******************************!*\
  !*** ./src/player/style.scss ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "@wordpress/block-editor":
/*!*************************************!*\
  !*** external ["wp","blockEditor"] ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = window["wp"]["blockEditor"];

/***/ }),

/***/ "@wordpress/blocks":
/*!********************************!*\
  !*** external ["wp","blocks"] ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = window["wp"]["blocks"];

/***/ }),

/***/ "@wordpress/data":
/*!******************************!*\
  !*** external ["wp","data"] ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = window["wp"]["data"];

/***/ }),

/***/ "@wordpress/i18n":
/*!******************************!*\
  !*** external ["wp","i18n"] ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = window["wp"]["i18n"];

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "React" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = window["React"];

/***/ }),

/***/ "react/jsx-runtime":
/*!**********************************!*\
  !*** external "ReactJSXRuntime" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = window["ReactJSXRuntime"];

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js?ver=" + {"vendors-node_modules_stencil_react-output-target_dist_ssr_js":"420a85123a82786e2e56","web-components_dist_dovetail-podcasts-player-web-components_dtpc-button_entry_js":"00b81ccf7ddd0aa523c1","web-components_dist_dovetail-podcasts-player-web-components_dtpc-button_entry_js_map":"7b1ce57ffe4ae8ca8e0c","web-components_dist_dovetail-podcasts-player-web-components_dtpc-mute-button_entry_js":"0e75f5162d43a50b4f5a","web-components_dist_dovetail-podcasts-player-web-components_dtpc-mute-button_entry_js_map":"bae221e93d07410db333","web-components_dist_dovetail-podcasts-player-web-components_dtpc-play-button_entry_js":"ba4bf3430a1adddb3a99","web-components_dist_dovetail-podcasts-player-web-components_dtpc-play-button_entry_js_map":"5bbb991af4940ebf23f8","web-components_dist_dovetail-podcasts-player-web-components_dtpc-player_entry_js":"1ba94b6f9bf2b6ea1d05","web-components_dist_dovetail-podcasts-player-web-components_dtpc-player_entry_js_map":"f808ae8e2a96676f835b","web-components_dist_dovetail-podcasts-player-web-components_dtpc-progress-bar_entry_js":"43c9cce711ef672b45f4","web-components_dist_dovetail-podcasts-player-web-components_dtpc-progress-bar_entry_js_map":"dc81bd14c01dc3a49103","web-components_dist_dovetail-podcasts-player-web-components_dtpc-slider_entry_js":"8de7ab95a452cc76b846","web-components_dist_dovetail-podcasts-player-web-components_dtpc-slider_entry_js_map":"37c86d8ecec16bea3104","web-components_dist_dovetail-podcasts-player-web-components_dtpc-time-current_entry_js":"1f8e41ed59aa957ddf76","web-components_dist_dovetail-podcasts-player-web-components_dtpc-time-current_entry_js_map":"bb8c5aa33ef54c554d89","web-components_dist_dovetail-podcasts-player-web-components_dtpc-time-display_entry_js":"c566db1c7c44f6f998d8","web-components_dist_dovetail-podcasts-player-web-components_dtpc-time-display_entry_js_map":"aaf1fd52803e76911572","web-components_dist_dovetail-podcasts-player-web-components_dtpc-time-duration_entry_js":"e98124f42e0665ad2241","web-components_dist_dovetail-podcasts-player-web-components_dtpc-time-duration_entry_js_map":"08bc2ca21ade90159f20","web-components_dist_dovetail-podcasts-player-web-components_dtpc-volume-slider_entry_js":"bb14e7d8b3708501513f","web-components_dist_dovetail-podcasts-player-web-components_dtpc-volume-slider_entry_js_map":"4d0952b5d6e673ba2da9","web-components_dist_dovetail-podcasts-player-web-components_icon-pause_entry_js":"876ef156bf7dae3570c7","web-components_dist_dovetail-podcasts-player-web-components_icon-pause_entry_js_map":"4e0d650c87cc3bfcc0db","web-components_dist_dovetail-podcasts-player-web-components_icon-play_entry_js":"b211574010eaf1e57a55","web-components_dist_dovetail-podcasts-player-web-components_icon-play_entry_js_map":"d19c163be96ee039b5d6","web-components_dist_dovetail-podcasts-player-web-components_icon-volume_entry_js":"0c6a6493b398b3d6c8d6","web-components_dist_dovetail-podcasts-player-web-components_icon-volume_entry_js_map":"b14f4121e898b0efcde6","vendors-node_modules_html-react-parser_esm_index_mjs":"c8d909fd5406a4303fdc"}[chunkId] + "";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get mini-css chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.miniCssF = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return undefined;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "dovetail-podcasts-player-blocks:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/^blob:/, "").replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl + "../";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"player/index": 0,
/******/ 			"player/style-index": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if("player/style-index" != chunkId) {
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						} else installedChunks[chunkId] = 0;
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = globalThis["webpackChunkdovetail_podcasts_player_blocks"] = globalThis["webpackChunkdovetail_podcasts_player_blocks"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["player/style-index"], () => (__webpack_require__("./src/player/index.js")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=index.js.map